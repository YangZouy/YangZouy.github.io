<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>neuralcoref的安装与使用</title>
      <link href="/2023/12/03/neuralcoref-de-an-zhuang-yu-shi-yong/"/>
      <url>/2023/12/03/neuralcoref-de-an-zhuang-yu-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="neuralcoref安装"><a href="#neuralcoref安装" class="headerlink" title="neuralcoref安装"></a>neuralcoref安装</h2><p>版本</p><p>spacy 2.1.0</p><p>neuralcoref 4.0</p><p>en_core_web_sm-2.1.0</p><p>python 3.7</p><p>1、新建conda 虚拟环境neuralcoref，对spacy 指定版本安装</p><pre><code>pip install spacy==2.1.0 </code></pre><p>(如果有报错，是因为spacy3.0以上版本主要结合transformers使用，会有相关报错，但是2.0版本用不上)</p><p>2、neuralcoref指定版本安装</p><p><a href="https://github.com/huggingface/neuralcoref/releases">https://github.com/huggingface/neuralcoref/releases</a></p><p>通过上述网址进行适合python版本的安装，下载whl进行安装</p><pre><code>pip install neuralcoref-4.0-cp37-cp37m-manylinux1_x86_64.whl</code></pre><p>3、en_core_web_sm模型安装</p><p>下载地址：找到对应spacy版本的文件，下载后的文件类型为tar.gz压缩文件</p><p><a href="https://github.com/explosion/spacy-models/releases/tag/en_core_web_sm-2.1.0">https://github.com/explosion/spacy-models/releases/tag/en_core_web_sm-2.1.0</a></p><p>使用pip install进行安装即可</p><pre><code>pip install en_core_web_sm-2.1.0.tar.gz</code></pre><h2 id="neuralcoref使用"><a href="#neuralcoref使用" class="headerlink" title="neuralcoref使用"></a>neuralcoref使用</h2><pre><code>import en_core_web_smimport spacyimport neuralcorefnlp = spacy.load(&#39;en&#39;)neuralcoref.add_to_pipe(nlp)doc = nlp(u&#39;My sister has a dog. She loves him.&#39;)doc._.coref_resolved&#39;&#39;&#39;输出：&#39;My sister has a dog. My sister loves a dog&#39;&#39;&#39;&#39;</code></pre><h2 id="主要参考文章连接"><a href="#主要参考文章连接" class="headerlink" title="主要参考文章连接"></a>主要参考文章连接</h2><p><a href="https://blog.csdn.net/sunyanbang/article/details/118334160">spacy和neuralcoref的安装步骤_安装neuralcoref_探险家Ezreal的博客-CSDN博客</a></p><p>spacy对应版本安装<a href="https://blog.csdn.net/henanlion/article/details/117446125">NLP工具最新版Spacy及语言包en_core_web_sm下载安装指南_PythonFun的博客-CSDN博客</a></p><p>遇到报错 <a href="https://blog.csdn.net/weixin_43935696/article/details/118937153">【Python】解决Can‘t find model ‘en‘. It doesn‘t seem to be a shortcut link, a Python package or a valid-CSDN博客</a></p><p>解决：Can’t find model ‘en’. It doesn’t seem to be a shortcut link, a Python package or a valid path to a data directory</p><pre><code>python -m spacy download en  (直接下载en模型即可)</code></pre><p>neuralcoref的官网连接</p><p><a href="https://github.com/huggingface/neuralcoref">huggingface&#x2F;neuralcoref: ✨Fast Coreference Resolution in spaCy with Neural Networks (github.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客优化二</title>
      <link href="/2023/11/10/bo-ke-you-hua-er/"/>
      <url>/2023/11/10/bo-ke-you-hua-er/</url>
      
        <content type="html"><![CDATA[<p>1、在D:\Blog\source\about\index.md添加自己的内容</p>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图与图学习</title>
      <link href="/2023/11/06/tu-yu-tu-xue-xi/"/>
      <url>/2023/11/06/tu-yu-tu-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="图与图学习"><a href="#图与图学习" class="headerlink" title="图与图学习"></a>图与图学习</h2><h3 id="图的定义"><a href="#图的定义" class="headerlink" title="图的定义"></a>图的定义</h3><p>图表示物件与物件之间的关系的数学对象，是图论的基本研究对象。<br>图可用于表示:  </p><ul><li>社交网络  </li><li>网页  </li><li>生物网络  </li><li>…</li></ul><p>我们可以在图上执行怎样的分析？  </p><ul><li>研究拓扑结构和连接性  </li><li>群体检测  </li><li>识别中心节点  </li><li>预测缺失的节点  </li><li>预测缺失的边  </li><li>…</li></ul><h3 id="导入第一个预构建的图"><a href="#导入第一个预构建的图" class="headerlink" title="导入第一个预构建的图"></a>导入第一个预构建的图</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 导入需要的包</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> random<span class="token keyword">import</span> networkx <span class="token keyword">as</span> nx<span class="token keyword">from</span> IPython<span class="token punctuation">.</span>display <span class="token keyword">import</span> Image<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Load the graph</span>G_karate <span class="token operator">=</span> nx<span class="token punctuation">.</span>karate_club_graph<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Find key-values for the graph</span>pos <span class="token operator">=</span> nx<span class="token punctuation">.</span>spring_layout<span class="token punctuation">(</span>G_karate<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Plot the graph</span>nx<span class="token punctuation">.</span>draw<span class="token punctuation">(</span>G_karate<span class="token punctuation">,</span> cmap <span class="token operator">=</span> plt<span class="token punctuation">.</span>get_cmap<span class="token punctuation">(</span><span class="token string">'rainbow'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> with_labels<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> pos<span class="token operator">=</span>pos<span class="token punctuation">)</span></code></pre><div>    <img src='https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/output_3_0.png' width='500px' align='left' /></div><p>上述图是空手道俱乐部图，该图包含了34个成员，连线表示成员之间的联系，在研究期间，管理员和教练出现了冲突，俱乐部一分为二，一半成员围绕教练形成了一个新的俱乐部，另一半则找了一个新教练或放弃了空手道。基于收集到的数据，除了其中一个成员，Zachary 正确分配了所有成员在分裂之后所进入的分组。</p><h3 id="图的基本表示方法"><a href="#图的基本表示方法" class="headerlink" title="图的基本表示方法"></a>图的基本表示方法</h3><ul><li>图 G&#x3D;(V, E) 由下列要素构成：  </li><li>一组节点（也称为 verticle）V&#x3D;1,…,n  </li><li>一组边 E⊆V×V  </li><li>边 (i,j) ∈ E 连接了节点 i 和 j  </li><li>i 和 j 被称为相邻节点（neighbor）  </li><li>节点的度（degree）是指相邻节点的数量</li></ul><p>特点：  </p><ul><li>如果一个图的所有节点都有 n-1 个相邻节点，则该图是完备的（complete）。也就是说所有节点都具备所有可能的连接方式。  </li><li>从 i 到 j 的路径（path）是指从 i 到达 j 的边的序列。该路径的长度（length）等于所经过的边的数量。  </li><li>图的径（diameter）是指连接任意两个节点的所有最短路径中最长路径的长度。  </li><li>测地路径（geodesic path）是指两个节点之间的最短路径。  </li><li>如果所有节点都可通过某个路径连接到彼此，则它们构成一个连通分支（connected component）。如果一个图仅有一个连通分支，则该图是连通的（connected）  </li><li>如果一个图的边是有顺序的配对，则该图是有向的（directed）。i 的入度（in-degree）是指向 i 的边的数量，出度（out-degree）是远离 i 的边的数量  </li><li><strong>如果一个图的边数量相比于节点数量较小，则该图是稀疏的（sparse）。相对地，如果节点之间的边非常多，则该图是密集的（dense）</strong></li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># .degree()属性会返回该图的每个节点的度(相邻节点的数量)的列表</span><span class="token keyword">print</span><span class="token punctuation">(</span>G_karate<span class="token punctuation">.</span>degree<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>n <span class="token operator">=</span> <span class="token number">34</span>degree_sequence <span class="token operator">=</span> list<span class="token punctuation">(</span>G_karate<span class="token punctuation">.</span>degree<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre><code>[(0, 16), (1, 9), (2, 10), (3, 6), (4, 3), (5, 4), (6, 4), (7, 4), (8, 5), (9, 2), (10, 3), (11, 1), (12, 2), (13, 5), (14, 2), (15, 2), (16, 2), (17, 2), (18, 2), (19, 3), (20, 2), (21, 2), (22, 2), (23, 5), (24, 3), (25, 3), (26, 2), (27, 4), (28, 3), (29, 4), (30, 4), (31, 6), (32, 12), (33, 17)]</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 计算边的数量 </span>nb_nodes <span class="token operator">=</span> nnb_arr <span class="token operator">=</span> len<span class="token punctuation">(</span>G_karate<span class="token punctuation">.</span>edges<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>avg_degree <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>degree_sequence<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>med_degree <span class="token operator">=</span> np<span class="token punctuation">.</span>median<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>degree_sequence<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>max_degree <span class="token operator">=</span> max<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>degree_sequence<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>min_degree <span class="token operator">=</span> np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>degree_sequence<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 最后，打印所有信息：</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Number of nodes : "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>nb_nodes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Number of edges : "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>nb_arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Maximum degree : "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>max_degree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Minimum degree : "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>min_degree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Average degree : "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>avg_degree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Median degree : "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>med_degree<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre><code>Number of nodes : 34Number of edges : 78Maximum degree : 17Minimum degree : 1Average degree : 4.588235294117647Median degree : 3.0</code></pre><p>平均而言，该图中的每个人都连接了 4.6 个人。<br>绘制度的直方图（度的直方图非常重要，可以用于确定我们看到的图的种类）</p><pre class=" language-python"><code class="language-python">degree_freq <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>nx<span class="token punctuation">.</span>degree_histogram<span class="token punctuation">(</span>G_karate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>stem<span class="token punctuation">(</span>degree_freq<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"Frequence"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"Degre"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><div><img src='https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/output_9_0.png' width='500px' align='left'></div><h3 id="如何存储图"><a href="#如何存储图" class="headerlink" title="如何存储图"></a>如何存储图</h3><p>三种方式  </p><ul><li>存储为边列表<br>2 3<br>3 4<br>…<br>存储有边连接的每一对节点的 ID  </li><li>使用邻接矩阵，通常是在内存中加载的方式（如果两个节点有边，则设置为1，如果是无向图，则邻接矩阵是对称的。  </li><li>使用邻接列表<br>1 ：[2, 3, 4]<br>2 ：[1,3]<br>3 ：[2, 4]<br>…<br>这三种方式都是等价的，可以根据使用场景来选择图的存储方式</li></ul><h3 id="图的类型和性质"><a href="#图的类型和性质" class="headerlink" title="图的类型和性质"></a>图的类型和性质</h3><p>同构图与异构图<br>两个图G和H是同构图（isomorphic graphs），能够通过重新标记图G的顶点而产生图H。</p><p>如果G和H同构，那么它们的阶是相同的，它们大小是相同的，它们个顶点的度数也对应相同。</p><p>异构图是一个与同构图相对应的新概念。</p><p><strong>传统同构图（Homogeneous Graph）数据中只存在一种节点和边</strong>，因此在构建图神经网络时所有节点共享同样的模型参数并且拥有同样维度的特征空间。</p><p>而异构图（Heterogeneous Graph）中可以存在不只一种节点和边，因此允许不同类型的节点拥有不同维度的特征或属性。</p><h3 id="主要的图算法"><a href="#主要的图算法" class="headerlink" title="主要的图算法"></a>主要的图算法</h3><p>大多数框架支持的图算法类别主要有三个：</p><ul><li>Pathfinding（寻路）：根据可用性和质量等条件确定最优路径。我们也将搜索算法包含在这一类别中。这可用于确定最快路由或流量路由。  </li><li>Centrality（中心性）：确定网络中节点的重要性。这可用于识别社交网络中有影响力的人或识别网络中潜在的攻击目标。  </li><li>Community detection（社群检测）：评估群体聚类的方式。这可用于划分客户或检测欺诈等。<br>python的networkx框架中的所有算法：<br><a href="https://networkx.github.io/documentation/stable/reference/algorithms/index.html">https://networkx.github.io/documentation/stable/reference/algorithms/index.html</a></li></ul><h3 id="寻路和图搜索算法"><a href="#寻路和图搜索算法" class="headerlink" title="寻路和图搜索算法"></a>寻路和图搜索算法</h3><p>寻路算法是通过最小化跳（hop）的数量来寻找两个节点之间的最短路径。<br>搜索算法不是给出最短路径，而是根据图的相邻情况或深度来探索图。这可用于信息检索。<br>因为这部分我不太能用上所以先跳过  </p><h3 id="图机器学习"><a href="#图机器学习" class="headerlink" title="图机器学习"></a>图机器学习</h3><p>图机器学习（GML：Graph Machine Learning）<br>图学习中包含三种主要的任务：  </p><ul><li>链接预测（Link prediction）  </li><li>节点标记预测（Node labeling）  </li><li>图嵌入（Graph Embedding）</li></ul><h3 id="链接预测"><a href="#链接预测" class="headerlink" title="链接预测"></a>链接预测</h3><p>给定图G，我们的目标是预测新边。（根据已知的节点和边，得到新的边（的权值&#x2F;特征）。链接预测的外延广泛，在不同的task中，link prediction被用于  </p><ol><li>在社交网络中，进行用户&#x2F;商品推荐  </li><li>在生物学领域，进行相互作用发现  </li><li>在知识图谱中，进行实体关系学习 也就是预测两个实体之间属于某种关系的概率   </li><li>在基础研究中，进行图结构捕捉</li></ol><p>在不同的 work 中，Link Prediction 还会被称为（可以使用这些关键词检索哦）：  </p><ol><li>Edge Embedding&#x2F;Classification  </li><li>Relational Inference&#x2F;Reasoning  </li><li>Graph Generation（一种是从节点生成边，另一种是从噪声生成图，前者是 Link Prediction）</li></ol><p>在链路预测中，尝试在节点对之间建立相似度量，并连接最相似的节点，现在的问题是<strong>识别和计算正确的相似性分数</strong>  </p><ul><li>公共邻居  </li><li>Jaccard系数  </li><li>Adamic-Adar指数  </li><li>优先依附（Preferential attachment）</li><li>社区信息</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> random<span class="token comment" spellcheck="true"># 依旧使用空手道俱乐部图</span><span class="token comment" spellcheck="true"># 删除掉原有图的一些链接，例如25%的边</span>edge_subset <span class="token operator">=</span> random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>G_karate<span class="token punctuation">.</span>edges<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span><span class="token number">0.25</span> <span class="token operator">*</span> G_karate<span class="token punctuation">.</span>number_of_edges<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>G_karate_train <span class="token operator">=</span> G_karate<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>G_karate_train<span class="token punctuation">.</span>remove_edges_from<span class="token punctuation">(</span>edge_subset<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 绘制部分观察图</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>nx<span class="token punctuation">.</span>draw<span class="token punctuation">(</span>G_karate_train<span class="token punctuation">,</span> pos<span class="token operator">=</span>pos<span class="token punctuation">)</span></code></pre><div><img src='https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/output_14_0.png' width='500px' align='left'></div><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 计算剩余节点之间的jaccard相似度</span>pred_jaccard <span class="token operator">=</span> list<span class="token punctuation">(</span>nx<span class="token punctuation">.</span>jaccard_coefficient<span class="token punctuation">(</span>G_karate_train<span class="token punctuation">)</span><span class="token punctuation">)</span>score_jaccard<span class="token punctuation">,</span> label_jaccard <span class="token operator">=</span> zip<span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">)</span> <span class="token keyword">in</span> edge_subset<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>s<span class="token punctuation">)</span> <span class="token keyword">in</span> pred_jaccard<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pred_jaccard<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 预测结果如下，其中第一个是节点，第二个是节点，最后一个是Jaccard分数（用来表示两个节点之间边预测的概率）</span></code></pre><pre><code>[(0, 9, 0.06666666666666667), (0, 14, 0.0), (0, 15, 0.0), (0, 16, 0.07142857142857142), (0, 18, 0.0), (0, 20, 0.0), (0, 21, 0.07142857142857142), (0, 22, 0.0), (0, 23, 0.0), (0, 24, 0.0)]</code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> random<span class="token keyword">import</span> networkx <span class="token keyword">as</span> nx<span class="token keyword">from</span> IPython<span class="token punctuation">.</span>display <span class="token keyword">import</span> Image<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> accuracy_score<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> roc_curve<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> roc_auc_score<span class="token comment" spellcheck="true"># 接下来可以使用ROC-AUC标准来比较不同模型的性能，因为既有真实的边，也有预测边的概率</span>fpr_jaccard<span class="token punctuation">,</span> tpr_jaccard<span class="token punctuation">,</span> _ <span class="token operator">=</span> roc_curve<span class="token punctuation">(</span>label_jaccard<span class="token punctuation">,</span> score_jaccard<span class="token punctuation">)</span>auc_jaccard <span class="token operator">=</span> roc_auc_score<span class="token punctuation">(</span>label_jaccard<span class="token punctuation">,</span> score_jaccard<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>auc_jaccard<span class="token punctuation">)</span></code></pre><pre><code>0.6128364389233955</code></pre><h3 id="节点标记预测（Node-labeling）"><a href="#节点标记预测（Node-labeling）" class="headerlink" title="节点标记预测（Node labeling）"></a>节点标记预测（Node labeling）</h3><p>给定一个未标记某些节点的图，对这些节点的标签进行预测，这在某种意义上是一种半监督的学习问题。<br>处理这些问题的一种常见方法是假设图上有一定的平滑度。平滑度假设指出通过数据上的高密度区域的路径连接的点可能具有相似的标签。这是标签传播算法背后的主要假设。<br>标签传播算法（Label Propagation Algorithm,LPA）是一种快速算法，仅使用网络结构作为指导来发现图中的社区，而无需任何预定义的目标函数或关于社区的先验信息。<br>单个标签在密集连接的节点组中迅速占据主导地位，但是在穿过稀疏连接区域时会遇到问题。<br>例子：<br>使用Facebook中的真实数据，每个节点表示一个学生，它们的标签为是否是某所学校的学生，红色表示是，蓝色表示不是</p><div><img src='https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/Snipaste_2023-11-01_20-36-31.jpg' width='300px'></div><p>进行标签传播预测之后的结果   </p><div><img src='https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/Snipaste_2023-11-01_20-38-15.jpg' width='300px'></div><h3 id="图嵌入-Graph-Embedding"><a href="#图嵌入-Graph-Embedding" class="headerlink" title="图嵌入 Graph Embedding"></a>图嵌入 Graph Embedding</h3><p>我们所看到的图的一个局限性是没有向量特征。但是，我们可以学习图的嵌入！图有不同几个级别的嵌入：  </p><ul><li>对图的组件进行嵌入（节点，边，特征…）(Node2Vec)  </li><li>对图的子图或整个图进行嵌入(Graph2Vec)</li></ul><h3 id="图神经网络-Graph-Neural-Networks-GNN"><a href="#图神经网络-Graph-Neural-Networks-GNN" class="headerlink" title="图神经网络 Graph Neural Networks GNN"></a>图神经网络 Graph Neural Networks GNN</h3><p>结合论文A Comprehensive Survey on Graph Neural Networks来进行学习<br>ps：图神经网络与图嵌入或者网络嵌入密切相关<br>图嵌入：旨在通过保留图的网络拓扑结构和节点内容信息，将图中顶点表示为低维向量，以便可以使用简单的机器学习算法（例如支持向量机分类）进行处理。许多图嵌入算法通常是无监督的算法，它们可以大致划分为三个类别，即矩阵分解、随机游走和深度学习方法。<br>图嵌入的深度学习方法也属于图神经网络，包括基于图自动编码器的算法（DNGR和SDNE）和无监督训练的图卷积神经网络</p><p>图例显示图神经网络与图嵌入之间的区别  </p><div><img src='https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/830a1f6f739c49e4b51c941a6e834ea8e63816a3c9d5471fa1b481a4d0dd1701.png'></div><h3 id="图神经网络分类"><a href="#图神经网络分类" class="headerlink" title="图神经网络分类"></a>图神经网络分类</h3><ul><li>图卷积网络（Graph Convolution Networks，GCN）  </li><li>图注意力网络（Graph Attention Networks,GAT）  </li><li>图自编码器（ Graph Autoencoders，GAE）  </li><li>图生成网络（ Graph Generative Networks, GGN）   </li><li>图时空网络（Graph Spatial-temporal Networks, GSTN）</li></ul><p>在之前了解的图基本符号表示之外，一般使用X表示图的特征矩阵，时空图就是一种特征矩阵X随着时间变化的图，$G&#x3D;(V,E,A,X)$，其中，$X∈R^(T<em>N</em>D)$，$T$是时间步长。  </p><h3 id="图卷积网络（Graph-Convolution-Networks，GCNs）"><a href="#图卷积网络（Graph-Convolution-Networks，GCNs）" class="headerlink" title="图卷积网络（Graph Convolution Networks，GCNs）"></a>图卷积网络（Graph Convolution Networks，GCNs）</h3><p>图卷积网络将卷积运算从传统数据（例如图像）推广到图数据。其核心思想是学习一个函数映射$f(.)$，通过该映射图中的节点$v_i$可以聚合它自己的邻居特征$x_j(j∈N(v_i))$来生成节点$v_i$的新表示。图卷积网络是许多复杂图神经网络模型的基础，包括基于自动编码器的模型、生成模型和时空网络等。<br>GCN节点表示的步骤  </p><div><img src='https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/Snipaste_2023-11-01_21-45-20.jpg' width='400px'></div>  <p>GCN方法又可以分为两大类，基于谱（spectral-based）和基于空间（spatial-based）。基于谱的方法从图信号处理的角度引入滤波器来定义图卷积，其中图卷积操作被解释为从图信号中去除噪声。基于空间的方法将图卷积表示为从邻域聚合特征信息，当图卷积网络的算法在节点层次运行时，图池化模块可以与图卷积层交错，将图粗化为高级子结构。如下图所示，这种架构设计可用于提取图的各级表示和执行图分类任务。   </p><ul><li><p>基于谱的GCNs方法<br>图被假定为无向图，无向图的一种鲁棒数学表示是正则化图拉普拉斯矩阵<br>$$L&#x3D;I_n-D^(-1&#x2F;2)AD^(-1&#x2F;2)$$<br>A是邻接矩阵，D是加权对角矩阵，具体的推导内容详见手写笔记，谱图理论和傅里叶变化<br>一般基于谱的图卷积操作可以简化表示为<br>$$x*Gg_θ&#x3D;Ug_θU^Tx$$<br>现有的基于谱的图卷积网络模型有以下这些：Spectral CNN、Chebyshev Spectral CNN (ChebNet)、Adaptive Graph Convolution Network (AGCN)<br>基于谱的图卷积神经网络方法的一个常见缺点是，它们需要将整个图加载到内存中以执行图卷积，这在处理大型图时是不高效的。</p></li><li><p>基于空间的GCNs方法<br>源自于传统卷积神经网络对图像的卷积操作，将图像视为图的特殊形式，每个像素代表一个节点…<br>一种共同的实践是将多个图卷积层叠加在一起，根据卷积层叠的不同方法，基于空间的GCN可以分为两类，recurrent-based和composition-based的空间GCN。recurrent-based的方法使用相同的图卷积层来更新隐藏表示，composition-based的方法使用不同的图卷积层来更新隐藏表示。  </p></li><li><p>基于组合的空间GCNs方法<br>基于谱的模型仅限于在无向图上工作，有向图上的拉普拉斯矩阵没有明确的定义，因此将基于谱的模型应用于有向图的唯一方法是将有向图转换为无向图。基于空间的模型更灵活地处理多源输入，这些输入可以合并到聚合函数中。因此，近年来空间模型越来越受到关注。<br>消息传递神经网络（MPNNs）：对于不同的神经网络实现工具PYG或者DGL都有自己不同的方法，但是整体来说分为三个步骤：1、message function 2、reduce function （难以实现） 3、update function<br>GraphSage（GSage）：引入聚合函数的概念定义图形卷积。聚合函数本质上是聚合节点的邻域信息，需要满足对节点顺序的排列保持不变，例如均值函数，求和函数，最大值函数都对节点的顺序没有要求。<br>GraphSage没有更新所有节点上的状态，而是提出了一种批处理训练算法，提高了大型图的可伸缩性。GraphSage的学习过程分为三个步骤。首先，对一个节点的K-眺邻居节点取样，然后，通过聚合其邻居节的信息表示中心节点的最终状态，最后，利用中心节点的最终状态做预测和误差反向传播。</p></li></ul><h3 id="图注意力网络（Graph-Attention-Networks，GAT）"><a href="#图注意力网络（Graph-Attention-Networks，GAT）" class="headerlink" title="图注意力网络（Graph Attention Networks，GAT）"></a>图注意力网络（Graph Attention Networks，GAT）</h3><p>一般采用Mask Graph Attention，节点只与自己的邻居节点做attention计算（这样既利用了图结构，又减小了运算量）<br>计算过程：  </p><ul><li>计算注意力系数<br>$$e_{ij}&#x3D;α([Wh_i||Wh_j]),j∈N_i$$<br>$Wh_i$：用共享参数$W$对$h_i$进行线性变换，对特征增维，增加特征表示<br>$[.||.]$: 对节点i和j经过变换后的结果进行concat<br>$α$: 把拼接后的高维特征映射到一个实数上<br>对注意力系数做归一化，就是softmax  </li><li>加权求和<br>$$h’<em>i&#x3D;σ(\sum</em>{j∈N_i}a_{ij}Wh_j)$$</li></ul><h4 id="门控注意力网络（Gated-Attention-Network，GAAN）"><a href="#门控注意力网络（Gated-Attention-Network，GAAN）" class="headerlink" title="门控注意力网络（Gated Attention Network，GAAN）"></a>门控注意力网络（Gated Attention Network，GAAN）</h4><p>采用了多头注意力机制来更新节点的隐藏状态  </p><h4 id="图形注意力模型（Graph-Attention-Model，GAM）"><a href="#图形注意力模型（Graph-Attention-Model，GAM）" class="headerlink" title="图形注意力模型（Graph Attention Model，GAM）"></a>图形注意力模型（Graph Attention Model，GAM）</h4><p>提供了一个循环神经网络模型，以解决图形分类问题，通过自适应地访问一个重要节点的序列来处理图的信息。  </p><h3 id="图自动编码器（Graph-Autoencoders）"><a href="#图自动编码器（Graph-Autoencoders）" class="headerlink" title="图自动编码器（Graph Autoencoders）"></a>图自动编码器（Graph Autoencoders）</h3><p>它是一类图嵌入方法，目的是利用神经网络结构将图的顶点表示为低维向量。<br>目前基于GCN的自编码器的方法主要有：Graph Autoencoder (GAE)和Adversarially Regularized Graph Autoencoder (ARGA)<br>图自编码器的其它变体有：</p><p>Network Representations with Adversarially Regularized Autoencoders (NetRA)</p><p>Deep Neural Networks for Graph Representations (DNGR)</p><p>Structural Deep Network Embedding (SDNE)</p><p>Deep Recursive Network Embedding (DRNE)</p><h3 id="图生成网络（Graph-Generative-Networks）"><a href="#图生成网络（Graph-Generative-Networks）" class="headerlink" title="图生成网络（Graph Generative Networks）"></a>图生成网络（Graph Generative Networks）</h3><p>在给定一组观察到的图的情况下生成新的图。图生成网络的许多方法都是特定于领域的。在自然语言处理中，生成语义图或知识图通常以给定的句子为条件。  </p><h3 id="图神经网络的应用"><a href="#图神经网络的应用" class="headerlink" title="图神经网络的应用"></a>图神经网络的应用</h3><p>计算机视觉、推荐系统、交通、生物化学、其它（如程序验证、程序推理、社会影响预测、对抗性攻击预防、电子健康记录建模、脑网络、事件检测和组合优化。）</p>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PaddlePaddle上手</title>
      <link href="/2023/10/31/paddlepaddle-shang-shou/"/>
      <url>/2023/10/31/paddlepaddle-shang-shou/</url>
      
        <content type="html"><![CDATA[<h1 id="PaddlePaddle快速入门"><a href="#PaddlePaddle快速入门" class="headerlink" title="PaddlePaddle快速入门"></a>PaddlePaddle快速入门</h1><p>类似于pytorch或者tensorflow，pp是百度开源的深度学习框架。</p><h2 id="计算常量加法"><a href="#计算常量加法" class="headerlink" title="计算常量加法"></a>计算常量加法</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 计算常量加法</span><span class="token keyword">import</span> paddle<span class="token punctuation">.</span>fluid <span class="token keyword">as</span> fluid<span class="token comment" spellcheck="true"># 定义形状为[2,2]的张量 赋值为1,铺满整个张量,类型为int64</span>x1 <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>fill_constant<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>value<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span><span class="token string">'int64'</span><span class="token punctuation">)</span>x2 <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>fill_constant<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>value<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span><span class="token string">'int64'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 两个张量求和</span>y1 <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token punctuation">[</span>x1<span class="token punctuation">,</span>x2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建解释器 可以指定计算使用CPU或者GPU,并用它进行计算</span>place <span class="token operator">=</span> fluid<span class="token punctuation">.</span>CPUPlace<span class="token punctuation">(</span><span class="token punctuation">)</span>exe <span class="token operator">=</span> fluid<span class="token punctuation">.</span>executor<span class="token punctuation">.</span>Executor<span class="token punctuation">(</span>place<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 进行参数初始化 program默认有两个 一个是default_startup_program另外一个是default_main_program</span>exe<span class="token punctuation">.</span>run<span class="token punctuation">(</span>fluid<span class="token punctuation">.</span>default_startup_program<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 进行运算,并把y的结果输出 这里program是主程序,fetch_list是解析器在run之后要输出的值,最后得到的也是一个张量</span>result <span class="token operator">=</span> exe<span class="token punctuation">.</span>run<span class="token punctuation">(</span>program<span class="token operator">=</span>fluid<span class="token punctuation">.</span>default_main_program<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>fetch_list<span class="token operator">=</span><span class="token punctuation">[</span>y1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 如果有时出现了 Error: Need to Create DeviceContextPool first! 报错 可以重启执行器</span></code></pre><pre><code>[array([[2, 2],       [2, 2]], dtype=int64)]</code></pre><h2 id="计算变量加法"><a href="#计算变量加法" class="headerlink" title="计算变量加法"></a>计算变量加法</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 计算变量加法</span><span class="token triple-quoted-string string">'''    常量的1+1并不能随意修改常量的值，所以需要使用变量，它类似一个占位符，等到要计算时    再把要计算的值添加到占位符中进行计算'''</span><span class="token keyword">import</span> paddle<span class="token punctuation">.</span>fluid <span class="token keyword">as</span> fluid<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np <span class="token comment" spellcheck="true"># 定义两个张量 </span><span class="token comment" spellcheck="true"># 不指定张量的形状和值，它们是后面动态赋值的，目前只指定它们的类型和名字</span>a <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>create_tensor<span class="token punctuation">(</span>dtype<span class="token operator">=</span><span class="token string">'int64'</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'a'</span><span class="token punctuation">)</span>b <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>create_tensor<span class="token punctuation">(</span>dtype<span class="token operator">=</span><span class="token string">'int64'</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">)</span>y <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建CPU解析器 以及参数初始化</span>place <span class="token operator">=</span> fluid<span class="token punctuation">.</span>CPUPlace<span class="token punctuation">(</span><span class="token punctuation">)</span>exe <span class="token operator">=</span> fluid<span class="token punctuation">.</span>executor<span class="token punctuation">.</span>Executor<span class="token punctuation">(</span>place<span class="token punctuation">)</span>exe<span class="token punctuation">.</span>run<span class="token punctuation">(</span>fluid<span class="token punctuation">.</span>default_startup_program<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用numpy创建两个张量值</span>a1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'int64'</span><span class="token punctuation">)</span>b1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'int64'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 进行运算 feed参数对张量进行赋值的，使用键值对格式，key是定义张量变量时指定名称，value是要传递的值</span>out_a<span class="token punctuation">,</span>out_b<span class="token punctuation">,</span>result <span class="token operator">=</span> exe<span class="token punctuation">.</span>run<span class="token punctuation">(</span>program<span class="token operator">=</span>fluid<span class="token punctuation">.</span>default_main_program<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>feed<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'a':a1,'b':b1&amp;#125;,fetch_list=[a,b,y])</span><span class="token keyword">print</span><span class="token punctuation">(</span>out_a<span class="token punctuation">,</span><span class="token string">"+"</span><span class="token punctuation">,</span>out_b<span class="token punctuation">,</span><span class="token string">"="</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span></code></pre><pre><code>[3 2] + [1 1] = [4 3]</code></pre><h2 id="线性网络"><a href="#线性网络" class="headerlink" title="线性网络"></a>线性网络</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 线性回归</span><span class="token keyword">import</span> paddle<span class="token punctuation">.</span>fluid <span class="token keyword">as</span> fluid<span class="token keyword">import</span> paddle<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np <span class="token comment" spellcheck="true"># 定义一个简单的线性网络 输入-隐层-输出</span><span class="token comment" spellcheck="true"># 这里的data类似create_tensor() 形状为13是因为波士顿房价数据集的每条数据有13个属性</span><span class="token comment" spellcheck="true"># x表示输入</span>x <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>data<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'x'</span><span class="token punctuation">,</span>shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span><span class="token string">'float32'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 隐层</span>hidden <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>fc<span class="token punctuation">(</span>input<span class="token operator">=</span>x<span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>act<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出 </span>net <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>fc<span class="token punctuation">(</span>input<span class="token operator">=</span>hidden<span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>act<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义神经网络的损失函数 因为是线性回归 所以使用的是平方差损失函数</span><span class="token comment" spellcheck="true"># y这里还是使用了data这个接口，可以理解为数据对应的结果</span>y <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>data<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'y'</span><span class="token punctuation">,</span>shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span><span class="token string">'float32'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 求一个batch的损失值</span>cost <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>square_error_cost<span class="token punctuation">(</span>input<span class="token operator">=</span>net<span class="token punctuation">,</span>label<span class="token operator">=</span>y<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 求出平均值</span>avg_cost <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>cost<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 复制一个主程序，方便之后使用</span><span class="token triple-quoted-string string">'''    在主程序中克隆一个程序作为预测程序，用于训练完之后使用预测程序进行预测数据    定义的顺序不能错，因为网络结构、损失函数等都是按照顺序记录到paddlepaddle主程序中的    主程序定义了神经网络模型，前后向计算，以及优化算法对网络中可学习参数的更新。'''</span>test_program <span class="token operator">=</span> fluid<span class="token punctuation">.</span>default_main_program<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>clone<span class="token punctuation">(</span>for_test<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义训练使用的优化方法，随机梯度下降优化 SGD</span><span class="token comment" spellcheck="true"># 定义优化的方法</span>optimizer <span class="token operator">=</span> fluid<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>SGDOptimizer<span class="token punctuation">(</span>learning_rate<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span>opts <span class="token operator">=</span> optimizer<span class="token punctuation">.</span>minimize<span class="token punctuation">(</span>avg_cost<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建解析器，同样使用CPU进行训练</span>place <span class="token operator">=</span> fluid<span class="token punctuation">.</span>CPUPlace<span class="token punctuation">(</span><span class="token punctuation">)</span>exe <span class="token operator">=</span> fluid<span class="token punctuation">.</span>Executor<span class="token punctuation">(</span>place<span class="token punctuation">)</span>exe<span class="token punctuation">.</span>run<span class="token punctuation">(</span>fluid<span class="token punctuation">.</span>default_startup_program<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义训练数据和测试数据</span>x_data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">2.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">3.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">4.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">5.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float32'</span><span class="token punctuation">)</span>y_data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3.0</span><span class="token punctuation">,</span><span class="token number">5.0</span><span class="token punctuation">,</span><span class="token number">7.0</span><span class="token punctuation">,</span><span class="token number">9.0</span><span class="token punctuation">,</span><span class="token number">11.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float32'</span><span class="token punctuation">)</span>test_data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">6.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float32'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 开始训练</span><span class="token keyword">for</span> pass_id <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    train_cost <span class="token operator">=</span> exe<span class="token punctuation">.</span>run<span class="token punctuation">(</span>fluid<span class="token punctuation">.</span>default_main_program<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>feed<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'x':x_data,'y':y_data&amp;#125;,fetch_list=[avg_cost])</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"pass:%d, cost:%0.5f"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>pass_id<span class="token punctuation">,</span>train_cost<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre><code>pass:0, cost:55.73622pass:1, cost:26.38364pass:2, cost:17.24310pass:3, cost:15.46374pass:4, cost:15.23521pass:5, cost:15.08984pass:6, cost:14.95126pass:7, cost:14.81588pass:8, cost:14.68303pass:9, cost:14.55298</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 开始预测</span>result <span class="token operator">=</span> exe<span class="token punctuation">.</span>run<span class="token punctuation">(</span>program<span class="token operator">=</span>test_program<span class="token punctuation">,</span>feed<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'x':test_data,'y':np.array([0,0]).astype('float32')&amp;#125;,fetch_list=[net])</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"当x为6.0时，y为%.5f"</span> <span class="token operator">%</span> result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre><code>当x为6.0时，y为10.96196</code></pre><h2 id="paddlepaddle做房价预测"><a href="#paddlepaddle做房价预测" class="headerlink" title="paddlepaddle做房价预测"></a>paddlepaddle做房价预测</h2><h3 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h3><p>1、uci-housing数据集<br>506行，每行14列，前13列用来描述房屋的各种信息，最后一列是房价中位数<br>训练集接口 paddle.dataset.uci_housing.train()<br>测试集接口 paddle.dataset.uci_housing.test()  </p><p>2、train_reader和test_reader<br>paddle.reader.shuffle()表示每次缓存BUF_SIZE个数据项，并进行打乱<br>paddle.batch()表示每BATCH_SIZE组成一个batch  </p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 导入基本库</span><span class="token keyword">import</span> paddle<span class="token punctuation">.</span>fluid <span class="token keyword">as</span> fluid<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np <span class="token keyword">import</span> paddle<span class="token keyword">import</span> osBUF_SIZE<span class="token operator">=</span><span class="token number">500</span>BATCH_SIZE<span class="token operator">=</span><span class="token number">20</span><span class="token comment" spellcheck="true"># 用于训练的数据提供器 每次从缓存中随机读取批次大小的数据</span>train_reader <span class="token operator">=</span> paddle<span class="token punctuation">.</span>batch<span class="token punctuation">(</span>paddle<span class="token punctuation">.</span>reader<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>paddle<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>uci_housing<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>buf_size<span class="token operator">=</span>BUF_SIZE<span class="token punctuation">)</span><span class="token punctuation">,</span>                            batch_size<span class="token operator">=</span>BATCH_SIZE<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 用于测试的数据提供器</span>test_reader <span class="token operator">=</span> paddle<span class="token punctuation">.</span>batch<span class="token punctuation">(</span>paddle<span class="token punctuation">.</span>reader<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>paddle<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>uci_housing<span class="token punctuation">.</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>buf_size<span class="token operator">=</span>BUF_SIZE<span class="token punctuation">)</span><span class="token punctuation">,</span>                           batch_size<span class="token operator">=</span>BATCH_SIZE<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 查看uci_housing数据</span>train_data <span class="token operator">=</span> paddle<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>uci_housing<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 没有解释next函数 个人认为next应该是python的内置函数 含义返回迭代器的下一个项目</span>sampledata <span class="token operator">=</span> next<span class="token punctuation">(</span>train_data<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sampledata<span class="token punctuation">)</span></code></pre><pre><code>(array([-0.0405441 ,  0.06636364, -0.32356227, -0.06916996, -0.03435197,        0.05563625, -0.03475696,  0.02682186, -0.37171335, -0.21419304,       -0.33569506,  0.10143217, -0.21172912]), array([24.]))</code></pre><h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><p>对于线性回归来讲，它就是一个从输入到输出的简单的全连接层<br>对于波士顿房价来说，假设属性和房价之间的关系可以被属性间的线性组合描述  </p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义输入</span>x <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>data<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'x'</span><span class="token punctuation">,</span>shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span><span class="token string">'float32'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义输出 </span>y <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>data<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'y'</span><span class="token punctuation">,</span>shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span><span class="token string">'float32'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义一个简单的线性网络 连接从输入到输出的全连接层 size表示该层输出单元的数目 act表示激活函数</span>y_predict <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>fc<span class="token punctuation">(</span>input<span class="token operator">=</span>x<span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>act<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义损失函数 依旧使用均方误差损失函数</span><span class="token comment" spellcheck="true"># square_error_cost接收预测值与真实目标值 一个batch的损失值</span>cost <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>square_error_cost<span class="token punctuation">(</span>input<span class="token operator">=</span>y_predict<span class="token punctuation">,</span>label<span class="token operator">=</span>y<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 对损失求均值</span>avg_cost <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>cost<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义优化函数 随机梯度下降</span>optimizer <span class="token operator">=</span> fluid<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>SGDOptimizer<span class="token punctuation">(</span>learning_rate<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">)</span>opts <span class="token operator">=</span> optimizer<span class="token punctuation">.</span>minimize<span class="token punctuation">(</span>avg_cost<span class="token punctuation">)</span>test_program <span class="token operator">=</span> fluid<span class="token punctuation">.</span>default_main_program<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>clone<span class="token punctuation">(</span>for_test<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''    这里总结一下过程：实际数据获取（有格式规范） 定义输入和输出数据 定义网络模型 定义损失函数 定义优化函数 开始训练 开始预测    这里为什么顺序大致是这样，因为最开始需要有模型 但是模型前向计算时的权重等都是自己初始化的 没有什么意义的    根据自己的模型可以对输入的数据进行结果的预测 根据损失函数来规定是否预测准确 如果预测不准确 那么可能是网络的参数不合理    或者网络设置不合理 如果参数不合理需要调参 使用优化函数（有梯度下降，梯度上升等算法）反向计算权重进行网络优化 优化的目标就是    尽可能地减小损失。'''</span><span class="token triple-quoted-string string">'''    上述模型配置完成之后，得到两个fluid.Program：一个是startup另外一个是main    startup：参数初始化写入    main：主程序 用于训练和测试模型    fluid.layers中的所有layer函数可以向main添加算子和变量'''</span></code></pre><h3 id="模型训练-amp-amp-模型评估"><a href="#模型训练-amp-amp-模型评估" class="headerlink" title="模型训练&amp;&amp;模型评估"></a>模型训练&amp;&amp;模型评估</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 创建Executor 选择CPU还是GPU</span><span class="token comment" spellcheck="true"># executor接收传入的program 通过run的方式运行program</span>use_cuda <span class="token operator">=</span> <span class="token boolean">False</span>place <span class="token operator">=</span> fluid<span class="token punctuation">.</span>CUDAPlace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">if</span> use_cuda <span class="token keyword">else</span> fluid<span class="token punctuation">.</span>CPUPlace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建一个Executor的实例exe</span>exe <span class="token operator">=</span> fluid<span class="token punctuation">.</span>Executor<span class="token punctuation">(</span>place<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># run方法先执行startup program 进行参数初始化</span>exe<span class="token punctuation">.</span>run<span class="token punctuation">(</span>fluid<span class="token punctuation">.</span>default_startup_program<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义输入数据</span><span class="token comment" spellcheck="true"># DataFeeder负责将数据提供器（train_reader,test_reader）返回的数据转换成一种特殊的数据结构，使其可以输入到Executor中</span><span class="token comment" spellcheck="true"># feed_list：向模型输入的变量</span>feeder <span class="token operator">=</span> fluid<span class="token punctuation">.</span>DataFeeder<span class="token punctuation">(</span>place<span class="token operator">=</span>place<span class="token punctuation">,</span>feed_list<span class="token operator">=</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 训练时损失值变化趋势图示 draw_train_process</span><span class="token comment" spellcheck="true"># 引入画图第三方库</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment" spellcheck="true"># iter表示到当前batch为止的数据量</span>iter<span class="token operator">=</span><span class="token number">0</span>iters<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>train_costs<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">draw_train_process</span><span class="token punctuation">(</span>iters<span class="token punctuation">,</span>train_costs<span class="token punctuation">)</span><span class="token punctuation">:</span>    title<span class="token operator">=</span><span class="token string">"traing cost"</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>title<span class="token punctuation">,</span>fontsize<span class="token operator">=</span><span class="token number">24</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'iter'</span><span class="token punctuation">,</span>fontsize<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'cost'</span><span class="token punctuation">,</span>fontsize<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>iters<span class="token punctuation">,</span> train_costs<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'training cost'</span><span class="token punctuation">)</span>     plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">%</span>matplotlib inline<span class="token comment" spellcheck="true"># 训练并保存模型</span><span class="token comment" spellcheck="true"># 表示训练轮数</span>EPOCH_NUM<span class="token operator">=</span><span class="token number">50</span>model_save_dir <span class="token operator">=</span> <span class="token string">"/home/aistudio/work/fit_a_line.inference.model"</span><span class="token keyword">for</span> pass_id <span class="token keyword">in</span> range<span class="token punctuation">(</span>EPOCH_NUM<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 开始训练并输出最后一个batch的损失值</span>    train_cost <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> batch_id<span class="token punctuation">,</span> data <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>train_reader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        train_cost <span class="token operator">=</span> exe<span class="token punctuation">.</span>run<span class="token punctuation">(</span>program<span class="token operator">=</span>fluid<span class="token punctuation">.</span>default_main_program<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             feed<span class="token operator">=</span>feeder<span class="token punctuation">.</span>feed<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>                             fetch_list<span class="token operator">=</span><span class="token punctuation">[</span>avg_cost<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 打印最后一个batch的损失值</span>        <span class="token keyword">if</span> batch_id <span class="token operator">%</span> <span class="token number">40</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"pass:%d, Cost:%0.5f"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>pass_id<span class="token punctuation">,</span> train_cost<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># 这里是为了绘制时事损失值的变量记录 iter就是到当前batch为止的数据量 所有的iter都记录到iters当中 每个iter对应的cost记录到train_costs中</span>        iter <span class="token operator">=</span> iter<span class="token operator">+</span>BATCH_SIZE        iters<span class="token punctuation">.</span>append<span class="token punctuation">(</span>iter<span class="token punctuation">)</span>        train_costs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>train_cost<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 开始测试并输出最后一个batch的损失值</span>    test_cost <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> batch_id<span class="token punctuation">,</span> data <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>test_reader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        test_cost <span class="token operator">=</span> exe<span class="token punctuation">.</span>run<span class="token punctuation">(</span>program<span class="token operator">=</span>fluid<span class="token punctuation">.</span>default_main_program<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            feed<span class="token operator">=</span>feeder<span class="token punctuation">.</span>feed<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>                            fetch_list<span class="token operator">=</span><span class="token punctuation">[</span>avg_cost<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 打印最后一个batch的损失</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Test:%d, Cost:%0.5f'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>pass_id<span class="token punctuation">,</span>test_cost<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 保存模型</span><span class="token comment" spellcheck="true"># 如果保存路径不在就创建</span><span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>model_save_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>model_save_dir<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"save models to %s"</span> <span class="token operator">%</span> model_save_dir<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 保存训练参数到指定路径中去，构建一个专门用于预测的program</span>fluid<span class="token punctuation">.</span>io<span class="token punctuation">.</span>save_inference_model<span class="token punctuation">(</span>model_save_dir<span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 保存推理model的路径</span>                              <span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#推理（inference）需要 feed 的数据</span>                              <span class="token punctuation">[</span>y_predict<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#保存推理（inference）结果的 Variables</span>                              exe<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#exe 保存 inference model</span>draw_train_process<span class="token punctuation">(</span>iters<span class="token punctuation">,</span>train_costs<span class="token punctuation">)</span></code></pre><pre><code>pass:0, Cost:554.59772Test:0, Cost:167.82324pass:1, Cost:419.52271Test:1, Cost:118.58235pass:2, Cost:786.26758Test:2, Cost:206.14641pass:3, Cost:522.15173Test:3, Cost:124.77617pass:4, Cost:506.57925Test:4, Cost:329.67911pass:5, Cost:589.67590Test:5, Cost:144.04843pass:6, Cost:497.10205Test:6, Cost:119.91728...pass:48, Cost:128.59196Test:48, Cost:4.06591pass:49, Cost:37.72329Test:49, Cost:7.94485save models to /home/aistudio/work/fit_a_line.inference.model</code></pre><div><img src='https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/output_13_1.png' width='400px' align='left'></div><h3 id="模型预测"><a href="#模型预测" class="headerlink" title="模型预测"></a>模型预测</h3><pre class=" language-python"><code class="language-python"><span class="token operator">%</span>matplotlib inline<span class="token comment" spellcheck="true"># 创建预测用的Executor</span>infer_exe <span class="token operator">=</span> fluid<span class="token punctuation">.</span>Executor<span class="token punctuation">(</span>place<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Scope指定作用域</span>inference_scope <span class="token operator">=</span> fluid<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Scope<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 可视化真实值与预测值方法定义</span>infer_results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>groud_truths <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">draw_infer_result</span><span class="token punctuation">(</span>groud_truths<span class="token punctuation">,</span>infer_results<span class="token punctuation">)</span><span class="token punctuation">:</span>    title<span class="token operator">=</span><span class="token string">'Boston'</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>title<span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">24</span><span class="token punctuation">)</span>    x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span>     y <span class="token operator">=</span> x    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'ground truth'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'infer result'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>groud_truths<span class="token punctuation">,</span> infer_results<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'green'</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'training cost'</span><span class="token punctuation">)</span>     plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 开始预测 </span><span class="token comment" spellcheck="true"># with语句修改全局/默认作用域（scope），运行时的所有变量都将分配给新的scope</span><span class="token keyword">with</span> fluid<span class="token punctuation">.</span>scope_guard<span class="token punctuation">(</span>inference_scope<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 从指定目录中加载 推理模型</span>    <span class="token punctuation">[</span>inference_program<span class="token punctuation">,</span>                             <span class="token comment" spellcheck="true">#推理的program</span>     feed_target_names<span class="token punctuation">,</span>                             <span class="token comment" spellcheck="true">#需要在推理program中提供数据的变量名称</span>     fetch_targets<span class="token punctuation">]</span> <span class="token operator">=</span> fluid<span class="token punctuation">.</span>io<span class="token punctuation">.</span>load_inference_model<span class="token punctuation">(</span><span class="token comment" spellcheck="true">#fetch_targets: 推断结果</span>                                    model_save_dir<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#model_save_dir:模型训练路径 </span>                                    infer_exe<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#infer_exe: 预测用executor</span>    <span class="token comment" spellcheck="true"># 获取预测数据</span>    infer_reader <span class="token operator">=</span> paddle<span class="token punctuation">.</span>batch<span class="token punctuation">(</span>paddle<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>uci_housing<span class="token punctuation">.</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>batch_size<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#从test_reader中分割x </span>    <span class="token comment" spellcheck="true"># 这里使用了next 迭代取得infer_reader中的下一个数据 但是它里面的数据是按照批次划分</span>    <span class="token comment" spellcheck="true"># 一个批次有200条数据</span>    test_data <span class="token operator">=</span> next<span class="token punctuation">(</span>infer_reader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    test_x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> data <span class="token keyword">in</span> test_data<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">"float32"</span><span class="token punctuation">)</span>    test_y<span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> data <span class="token keyword">in</span> test_data<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">"float32"</span><span class="token punctuation">)</span>    results <span class="token operator">=</span> infer_exe<span class="token punctuation">.</span>run<span class="token punctuation">(</span>inference_program<span class="token punctuation">,</span>                              <span class="token comment" spellcheck="true">#预测模型</span>                            feed<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;feed_target_names[0]: np.array(test_x)&amp;#125;,  #喂入要预测的x值</span>                            fetch_list<span class="token operator">=</span>fetch_targets<span class="token punctuation">)</span>                       <span class="token comment" spellcheck="true">#得到推测结果 </span>        <span class="token comment" spellcheck="true"># 输出当前批次中的推断值</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"infer results: (House Price)"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> idx<span class="token punctuation">,</span> val <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%d: %.2f"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>idx<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span>        infer_results<span class="token punctuation">.</span>append<span class="token punctuation">(</span>val<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 输出当前批次中的真实值</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ground truth:"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> idx<span class="token punctuation">,</span> val <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>test_y<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%d: %.2f"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>idx<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span>        groud_truths<span class="token punctuation">.</span>append<span class="token punctuation">(</span>val<span class="token punctuation">)</span>        draw_infer_result<span class="token punctuation">(</span>groud_truths<span class="token punctuation">,</span>infer_results<span class="token punctuation">)</span></code></pre><pre><code>infer results: (House Price)0: 15.531: 15.902: 15.453: 16.594: 15.835: 16.146: 15.697: 15.408: 13.759: 15.65...99: 21.84100: 21.73101: 21.50ground truth:0: 8.501: 5.002: 11.903: 27.904: 17.205: 27.506: 15.007: 17.208: 17.909: 16.30...99: 23.90100: 22.00101: 11.90</code></pre><div><img src='https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/output_15_1.png' width='300px' align='left'></div><p>ps：存在matplotlib.pyplot在jupyter notebook中不显示图像问题<br>原因：在命令行知道需要使用ipython –pylab进入ipython环境后才能做出图像<br>解决方法：在绘制图形之前添加%matplotlib inline，然后使用plt.show()就可以绘制图像了</p>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图神经网络coding</title>
      <link href="/2023/10/26/tu-shen-jing-wang-luo-coding/"/>
      <url>/2023/10/26/tu-shen-jing-wang-luo-coding/</url>
      
        <content type="html"><![CDATA[<h2 id="python入门"><a href="#python入门" class="headerlink" title="python入门"></a>python入门</h2><p>对不熟悉部分进行记录</p><p>函数头之后的第一个字符串称为docstring，是文档字符串的缩写，通常使用三引号，以便docstring可以扩展到多行，可以将此字符串作为函数的__doc__属性使用</p><p>python面向对象编程OOP（Object-oriented Programming）</p><p>提供了一种结构化程序的方法，以便<strong>将属性和行为</strong>捆绑到单个对象中。</p><p>注意：python是一种多范式编程语言（面向对象或者函数式编程都是可以的）</p><p>继承：</p><pre><code>class Dog(object)</code></pre><p>isinstance(classname1,classname2)：判断两个类是否属于父子类</p><p>Notebook基础操作</p>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法题归纳与总结（二）</title>
      <link href="/2023/10/15/suan-fa-ti-gui-na-yu-zong-jie-er/"/>
      <url>/2023/10/15/suan-fa-ti-gui-na-yu-zong-jie-er/</url>
      
        <content type="html"><![CDATA[<h2 id="哈希函数与哈希表"><a href="#哈希函数与哈希表" class="headerlink" title="哈希函数与哈希表"></a>哈希函数与哈希表</h2>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础算法题的归纳总结</title>
      <link href="/2023/10/09/ji-chu-suan-fa-ti-de-gui-na-zong-jie/"/>
      <url>/2023/10/09/ji-chu-suan-fa-ti-de-gui-na-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>常数操作：+-*&#x2F;以及数组获取值（ps：链表获取不是常数操作）</p><h3 id="简单排序"><a href="#简单排序" class="headerlink" title="简单排序"></a>简单排序</h3><p>每次都找到最小值放置到对应的数组位置上即可</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 这里需要找n-1趟就可以了 因为最后一个默认已经到了最后的位置</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        minIndex <span class="token operator">=</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">?</span> j <span class="token operator">:</span> minIndex<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>minIndex<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>先确定最大值，两两进行交互</p><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>j<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>ps:这里的swap交换可以使用普通的交换方法，还可以使用异或来表示，因为异或具有交换律和结合律，0^N &#x3D; N, N^N &#x3D; 0 位运算是最快的</p><pre class=" language-java"><code class="language-java">arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>下标0~0有序</p><p>下标0~1有序</p><p>…</p><p>每次都朝后扩展一个数进入到已经排好序的数组中，然后将其依次与前一个比较，如果小，则交换位置，否则停止</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 因为0~0已经是有序的了，所以直接从0~1开始</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>j<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>ps：插入排序与简单排序和冒泡排序的区别</p><p>前两种排序它们的过程与数据状态没有关系，每趟都会执行且时间复杂度固定，但是插入排序与数据状态有关，因此会区分最好时间复杂度和最坏时间复杂度</p><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>先对数据进行划分，找到mid，找到左侧，找到右侧，然后递归这样的操作，将每一部分细化到只有一个数为止，然后对每两个小部分开始合并，合并时需要让其有序，这里建立一个辅助空间使其有序</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// process这里主要是对L和R中的数据进行划分</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> L<span class="token punctuation">,</span><span class="token keyword">int</span> R<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 停止递归的条件 当左侧和右侧都是一个数的时候</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L <span class="token operator">==</span> R<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> L <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>R <span class="token operator">-</span> L<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>L<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>L<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// merge就是对当前分好的左右侧小块进行合并</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> L<span class="token punctuation">,</span><span class="token keyword">int</span> mid<span class="token punctuation">,</span><span class="token keyword">int</span> R<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 建立辅助空间</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> help <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>R<span class="token operator">-</span>L<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> p1 <span class="token operator">=</span> L<span class="token punctuation">;</span>    <span class="token keyword">int</span> p2 <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p1 <span class="token operator">&lt;=</span> M <span class="token operator">&amp;&amp;</span> p2 <span class="token operator">&lt;=</span> R<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        help<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>p1<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>p2<span class="token punctuation">]</span> <span class="token operator">?</span> arr<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">:</span> arr<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p1<span class="token operator">&lt;=</span>M<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        help<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p2<span class="token operator">&lt;=</span>R<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        help<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将辅助空间内容拷贝到原数组中</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>help<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token operator">+</span>L<span class="token punctuation">]</span> <span class="token operator">=</span> help<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>归并时间复杂度计算：（采用递归的master计算公式）</p><p>时间复杂度：$O(N*logN)$ 空间复杂度：O(N)</p><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>分治法，每一轮选择挑选一个基准元素，并让其它比它大的元素移动数列一边，比它小的移动到另外一边，从而将数列拆解成了两个部分。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quicksort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> L<span class="token punctuation">,</span><span class="token keyword">int</span> R<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">&lt;</span>R<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>R<span class="token operator">-</span>L<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>index<span class="token punctuation">,</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> p <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>L<span class="token punctuation">,</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quicksort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>L<span class="token punctuation">,</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quicksort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> L<span class="token punctuation">,</span><span class="token keyword">int</span> R<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// less是小于区的下标界限</span>    <span class="token comment" spellcheck="true">// more是大于区的下标界限</span>    <span class="token keyword">int</span> less <span class="token operator">=</span> L<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> more <span class="token operator">=</span> R<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>L<span class="token operator">&lt;</span>more<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>L<span class="token punctuation">]</span><span class="token operator">&lt;</span>arr<span class="token punctuation">[</span>R<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            less<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>less<span class="token punctuation">,</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>            L<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>L<span class="token punctuation">]</span><span class="token operator">></span>arr<span class="token punctuation">[</span>R<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            more<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>more<span class="token punctuation">,</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token keyword">else</span> L<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这里将arr[R]看作了基准，最后需要将最后一个数放置到他自己的位置上去，因此需要交换</span>    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>more<span class="token punctuation">,</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这里less指向小于区的末尾，所以+1才能跳转到=区，因为more与R进行了交换所以刚好是=区的末尾</span>    <span class="token keyword">return</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>less<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>more<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p>堆排序就是先建立大顶堆或者小顶堆 heapInsert的过程</p><p>然后交换堆顶和堆底的数值，然后跳转大顶堆或者小顶堆heapify的过程</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">heapSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 开始插入建立大顶堆</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">heapInsert</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义堆大小</span>    <span class="token keyword">int</span> heapSize <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 第一次交换</span>    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">--</span>heapSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 交换之后调整</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>heapSize <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>heapSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">--</span>heapSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 插入大顶堆</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">heapInsert</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果比自己的父节点大</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>arr<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 开始调整</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">heapify</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> size<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> largest <span class="token operator">=</span> left<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>size <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">?</span> left<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">:</span> left<span class="token punctuation">;</span>        largest <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span> <span class="token operator">?</span> i <span class="token operator">:</span> largert<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>largest <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">break</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token punctuation">,</span>largest<span class="token punctuation">)</span><span class="token punctuation">;</span>        i <span class="token operator">=</span> largest<span class="token punctuation">;</span>        left <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h3><p>自定义比较器：升序（o1- o2） 返回负数第一个参数会排在前面</p><p>不是基于比较的排序，而是需要根据状况来统计，排序过程中，位数不足的需要补齐，个位先排，然后依次出桶，然后十位排序，出桶。。。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>稳定性：同样值的个体之间，不因为排序而改变相对次序</p><p>不具备稳定性：选择、快排、堆</p><p>基础类型对稳定性要求不高，非基础类型对稳定性要求较高</p><table><thead><tr><th></th><th>时</th><th>空</th><th>稳</th></tr></thead><tbody><tr><td>选择</td><td>$O(N^2)$</td><td>$O(1)$</td><td>×</td></tr><tr><td>冒泡</td><td>$O(N^2)$</td><td>$O(1)$</td><td>√</td></tr><tr><td>插入</td><td>$O(N^2)$</td><td>$O(1)$</td><td>√</td></tr><tr><td>归并</td><td>$O(NlogN)$</td><td>$O(N)$</td><td>√</td></tr><tr><td>快排</td><td>$O(NlogN)$</td><td>$O(logN)$</td><td>×</td></tr><tr><td>堆</td><td>$O(NlogN)$</td><td>$O(1)$</td><td>×</td></tr></tbody></table><p>这里快排的空间复杂度为$O(logN)$，是因为虽然快排过程中没有开辟空间，但是使用了递归，递归会开辟栈</p><p>递归算法的空间复杂度 &#x3D; 每次递归的空间复杂度$O(1)$*递归深度</p><h2 id="递归时间复杂度"><a href="#递归时间复杂度" class="headerlink" title="递归时间复杂度"></a>递归时间复杂度</h2><p>master公式：$T(N) &#x3D; a*T(N&#x2F;b) + O(N^d)$ </p><p>对递归问题的时间复杂度计算</p><p>$a$：表示递归次数</p><p>$O(N^d)$：表示剩余所需的时间复杂度</p><p>最后整个时间复杂度为</p><p>$log_ba &lt; d$     -&gt;     $O(N^d)$</p><p>$log_ba &gt; d$     -&gt;     $O(N^(log_ba))$</p><p>$log_ba &#x3D;&#x3D; d$     -&gt;     $O(N^d * logN)$</p><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>链表涉及的题目都是练习coding，没有太多的算法部分，一般题型可能有</p><p>打印两个链表的公共有序部分（指针下标法）</p><p>判断一个链表是否是回文结构（栈、快慢指针+栈）</p><p>链表排序（申请辅助数组空间）</p><p>复制含有随机指针节点的链表（可以使用hashmap类型，保存老节点与新节点之间的地址）</p><p>两个单链表相交的一系列问题（涉及到判断每个链表是否有环）</p><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h3 id="节点定义"><a href="#节点定义" class="headerlink" title="节点定义"></a>节点定义</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    V value<span class="token punctuation">;</span>    Node left<span class="token punctuation">;</span>    Node right<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="先序遍历（栈）"><a href="#先序遍历（栈）" class="headerlink" title="先序遍历（栈）"></a>先序遍历（栈）</h3><p>非递归</p><p>1、从栈中弹出一个节点</p><p>2、打印</p><p>3、右节点入栈</p><p>4、左节点入栈</p><h3 id="后序遍历（栈）"><a href="#后序遍历（栈）" class="headerlink" title="后序遍历（栈）"></a>后序遍历（栈）</h3><p>双栈配合</p><p>第一个栈弹出，进入第二个栈，然后分别将弹出节点的左右节点放入第一个栈，依次循环</p><p>第二个栈就是需要的后序遍历的顺序，直接循环输出第二个栈即可</p><h3 id="中序遍历（栈）"><a href="#中序遍历（栈）" class="headerlink" title="中序遍历（栈）"></a>中序遍历（栈）</h3><p>因为是左根右的打印顺序，故需要一直压入左节点然后头节点左节点头节点…如果没有左节点了，就需要转换到右节点即可</p><h3 id="层次遍历（队列）"><a href="#层次遍历（队列）" class="headerlink" title="层次遍历（队列）"></a>层次遍历（队列）</h3><p>头节点进入队列，然后弹出，打印</p><p>弹出节点的左右节点进入队列</p><p>队列弹出，打印，然后将弹出节点的左右节点压入队列</p><pre><code></code></pre><h3 id="获取二叉树最大宽度"><a href="#获取二叉树最大宽度" class="headerlink" title="获取二叉树最大宽度"></a>获取二叉树最大宽度</h3><p>层次遍历+hashmap（记录每个节点与它对应的层数）</p><pre><code></code></pre><h3 id="判断是否是搜索二叉树"><a href="#判断是否是搜索二叉树" class="headerlink" title="判断是否是搜索二叉树"></a>判断是否是搜索二叉树</h3><p>递归 （采用一个preValue记录当前节点的前一个节点值，如果curValue &lt; preValue 则不是搜索二叉树）</p><p>搜索二叉树的左节点值都小于根节点，右节点值都大于根节点</p><pre><code></code></pre><p>还可以采用与判断是否是平衡二叉树一样的方法，调用树形递归方法</p><p>非递归</p><p>需要采用中序遍历的方法，因为中序刚好是左根右的顺序，判断是否是升序就可</p><h3 id="判断是否是完全二叉树"><a href="#判断是否是完全二叉树" class="headerlink" title="判断是否是完全二叉树"></a>判断是否是完全二叉树</h3><p>层次遍历</p><p>1、任意节点有右孩子但是无左孩子 false</p><p>2、在遵守1的条件下，遇到了第一个左右孩子不全，后续的都是叶节点才行</p><p>采用一个flag表示遍历过程中是否遇到过左右两个孩子不双全的情况</p><pre><code></code></pre><h3 id="判断是否是满二叉树"><a href="#判断是否是满二叉树" class="headerlink" title="判断是否是满二叉树"></a>判断是否是满二叉树</h3><p>判断逻辑：深度为$l$，节点数为$N$，如果$N &#x3D; 2^l-1$,那么它就是一颗满二叉树</p><p>递归分别得到左右子树的高度和node数，然后进行比较</p><h3 id="判断是否是一颗平衡二叉树"><a href="#判断是否是一颗平衡二叉树" class="headerlink" title="判断是否是一颗平衡二叉树"></a>判断是否是一颗平衡二叉树</h3><p>左数与右树的高度差不能超过1</p><p>如果是一棵平衡二叉树的话，左子树是平衡的，右子树是平衡的，且$|左树高度 - 右树高度|&lt;&#x3D;1$</p><p>需要定义一种新的数据类型，在递归时可以使用，因为根据判断条件，需要得到左右子树是否是平衡的flag以及左右子树的高度。</p><p>于是递归调用判断函数即可</p><h3 id="两棵二叉树节点的最低公共祖先节点"><a href="#两棵二叉树节点的最低公共祖先节点" class="headerlink" title="两棵二叉树节点的最低公共祖先节点"></a>两棵二叉树节点的最低公共祖先节点</h3><p>循环遍历方法</p><p>用hashMap来记录每个节点与它的父节点之间的映射</p><p>将一棵二叉树的节点往上查找的链放置到set1中</p><p>同样，遍历第二棵二叉树，查看该节点是否出现在了第一棵二叉树的set链中，如果出现了说明就是两个节点的最近公共祖先。</p><h3 id="找出二叉树中一个节点的后继节点"><a href="#找出二叉树中一个节点的后继节点" class="headerlink" title="找出二叉树中一个节点的后继节点"></a>找出二叉树中一个节点的后继节点</h3><p>这道题必须有某节点的父节点记录才行</p><p>这里的后继节点指的是中序遍历得到的顺序中该节点的下一个节点</p><p>情况1：</p><p>该节点有右子树时，它的下一个节点为右子树的最左的节点</p><p>情况2：</p><p>该节点没有右子树，如果它是父节点的左孩子，那么它的下一个节点就是它的父节点，如果它是父节点的有孩子，那么它的下一个节点就需要从父节点身上循环去找</p><p>情况3：</p><p>整棵树的最右节点没有后继节点</p><h3 id="二叉树的序列化与反序列化"><a href="#二叉树的序列化与反序列化" class="headerlink" title="二叉树的序列化与反序列化"></a>二叉树的序列化与反序列化</h3><p>序列化：将二叉树先序遍历的结果用字符串的形式进行表示</p><p>先序遍历（递归）</p><pre><code></code></pre><p>反序列化：将字符串的形式表示转换为一棵二叉树</p><p>采用辅助空间队列，将字符串拆分成一个字符串数组放置在队列中，然后递归建立根节点，左节点，右节点即可</p><h3 id="折纸问题"><a href="#折纸问题" class="headerlink" title="折纸问题"></a>折纸问题</h3><p>其实折纸问题类似于一棵二叉树，左子树的头节点都是凹，右子树的头节点都是凸，按照中序打印的方式可以得到正确的折痕顺序</p><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 每个节点表示</span><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token keyword">int</span> in<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 入度</span>    <span class="token keyword">int</span> out<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 出度</span>    ArrayList<span class="token operator">&lt;</span>Node<span class="token operator">></span> nexts<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 邻接点</span>    ArrayList<span class="token operator">&lt;</span>Edge<span class="token operator">></span> edges<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 邻接边</span>        <span class="token function">Node</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        in <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        out <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        nexts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edges <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 每条边表示</span><span class="token keyword">class</span> <span class="token class-name">Edge</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> weight<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 边的权重</span>    Node from<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 边的起始点</span>    Node to<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 边的结束点</span>        <span class="token function">Edge</span><span class="token punctuation">(</span><span class="token keyword">int</span> weight<span class="token punctuation">,</span>Node from<span class="token punctuation">,</span>Node to<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>weigth <span class="token operator">=</span> weight<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>from <span class="token operator">=</span> from<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>to <span class="token operator">=</span> to<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 图的表示</span><span class="token keyword">class</span> <span class="token class-name">Graph</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    HashMap<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>Node<span class="token operator">></span> nodes<span class="token punctuation">;</span>    HashSet<span class="token operator">&lt;</span>Edge<span class="token operator">></span> edges<span class="token punctuation">;</span>    <span class="token function">Graph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        nodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edges <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="宽度优先遍历"><a href="#宽度优先遍历" class="headerlink" title="宽度优先遍历"></a>宽度优先遍历</h3><p>类似于层次遍历，使用队列</p><p>将源节点入队列，弹出，然后将弹出节点的所有邻接节点入队列，循环这个过程</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Queue<span class="token operator">&lt;</span>Node<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这里使用set主要是因为在遍历邻接节点时需要判断是否遍历过了</span>    HashSet<span class="token operator">&lt;</span>Node<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Node temp <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Node cur<span class="token operator">:</span> temp<span class="token punctuation">.</span>nexts<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 说明未曾遍历过 是否遍历也可以使用一个boolean数组来表示该节点是否遍历过</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>                set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h3><p>栈</p><p>从源节点开始将节点按照深度放入栈，然后弹出，每弹出一个节点，就把该节点未进过栈的邻接节点入栈，直到栈变空</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Stack<span class="token operator">&lt;</span>Node<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    HashSet<span class="token operator">&lt;</span>Node<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Node cur <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Node next<span class="token operator">:</span> cur<span class="token punctuation">.</span>nexts<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>                set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 这里的break非常重要，可以直接跳出for循环，避免与宽度遍历一样一直找当前节点的邻接节点</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h3><p>每次找到一个入度为0的节点，打印，然后删除掉它的影响，继续找入度为0的节点，循环这个过程</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Node<span class="token operator">></span> <span class="token function">sortTopology</span><span class="token punctuation">(</span>Graph graph<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 保存每个节点的入度隐射</span>    HashMap<span class="token operator">&lt;</span>Node<span class="token punctuation">,</span>Integer<span class="token operator">></span> inMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 保存入度是0的节点</span>    Queue<span class="token operator">&lt;</span>Node<span class="token operator">></span> zeroInQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 对上述数据进行初始化</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>Node cur<span class="token operator">:</span> graph<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        inMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span>cur<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>in <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            zeroInQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 开始拓扑排序 结果保存在result中</span>    ArrayList<span class="token operator">&lt;</span>Node<span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>zeroInQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Node cur <span class="token operator">=</span> zeroInQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Node temp<span class="token operator">:</span>cur<span class="token punctuation">.</span>nexts<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 个人认为这里可以直接使用node.in的，但是最好不要在原来数据上修改in的值，所以</span>            <span class="token comment" spellcheck="true">// 使用了hashMap来进行记录 使得图的原来的数据不变</span>            inMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span>inMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>inMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                zeroInQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="最小生成树MST"><a href="#最小生成树MST" class="headerlink" title="最小生成树MST"></a>最小生成树MST</h3><p>K算法</p><p>prim算法 无向图</p><p>从图中任选一个点，然后挑选权重最小的边，然后再挑选与已选的点集有关边的最小权重边，循环，直到图连通</p><pre><code></code></pre><h3 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h3><p>最短路径问题</p><p>从图中某个顶点出发到达另外一个顶点所经过的边的权重和最小的一条路径，称为最短路径</p><p>解决算法</p><p>1、dijkstra算法 使用hashmap来记录某节点到其它节点的距离 使用set来记录已经选择过的节点</p><p>2、floyd算法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> HashMap<span class="token operator">&lt;</span>Node<span class="token punctuation">,</span>Integer<span class="token operator">></span> <span class="token function">dijkstra</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 记录其它节点到node的距离 如果没有保存说明它们之间的距离为正无穷</span>    HashMap<span class="token operator">&lt;</span>Node<span class="token punctuation">,</span>Integer<span class="token operator">></span> distanceMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 记录已经更新的节点</span>    HashSet<span class="token operator">&lt;</span>Node<span class="token operator">></span> selectedNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化</span>    distanceMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取</span>    Node minNode <span class="token operator">=</span> <span class="token function">getNode</span><span class="token punctuation">(</span>distanceMap<span class="token punctuation">,</span>selectedNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>minNode <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 找到最小点之后需要更新他周边的点距离</span>        <span class="token keyword">int</span> dis <span class="token operator">=</span> distanceMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>minNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Edge edge<span class="token operator">:</span>minNode<span class="token punctuation">.</span>edges<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Node toNode <span class="token operator">=</span> edge<span class="token punctuation">.</span>to<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>distanceMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>toNode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                distanceMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>toNode<span class="token punctuation">,</span>dis<span class="token operator">+</span>edge<span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span>                selectedNode<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>toNode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                distanceMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>toNode<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dis<span class="token operator">+</span>edge<span class="token punctuation">.</span>weight<span class="token punctuation">,</span>distanceMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>toNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        selectedNode<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>minNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        minNode <span class="token operator">=</span> <span class="token function">getNode</span><span class="token punctuation">(</span>distanceMap<span class="token punctuation">,</span>selectedNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> distanceMap<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取到distanceMap中路径最短的点</span><span class="token keyword">public</span> Node <span class="token function">getNode</span><span class="token punctuation">(</span>HashMap<span class="token operator">&lt;</span>Node<span class="token punctuation">,</span>Integer<span class="token operator">></span> distanceMap<span class="token punctuation">,</span>HashSet<span class="token operator">&lt;</span>Node<span class="token operator">></span> seletedNode<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Node minNode <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">int</span> minDis <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Node<span class="token punctuation">,</span>Integer<span class="token operator">></span> entry<span class="token operator">:</span>distanceMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Node cur <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> distance <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>distance <span class="token operator">&lt;</span> minDis <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>seletedNode<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            minNode <span class="token operator">=</span> cur<span class="token punctuation">;</span>            minDis <span class="token operator">=</span> distance<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> minNode<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="前缀树"><a href="#前缀树" class="headerlink" title="前缀树"></a>前缀树</h2><h3 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 前缀树定义</span><span class="token keyword">class</span> <span class="token class-name">TrieNode</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> pass<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 表示该节点通过了多少次 || 将当前字符串作为前缀的数量</span>    <span class="token keyword">int</span> end<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 多少个字符串的结尾节点 || 将当前字符串作为结尾的数量</span>    TrieNode<span class="token punctuation">[</span><span class="token punctuation">]</span> nexts<span class="token punctuation">;</span>    <span class="token function">TrieNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        pass <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        nexts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrieNode</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>前缀树如果后期有使用到，再详细记录</p><h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2><p>优先考虑最满足标准的样本，最后考虑最不满足标准的样本，最终得到一个答案的算法，叫做贪心算法。</p><p>也就是说，不从整体最优上加以考虑，所作出的是在某种意义上的局部最优解。</p><h3 id="会议室宣讲"><a href="#会议室宣讲" class="headerlink" title="会议室宣讲"></a>会议室宣讲</h3><p>有很多项目宣讲，知道每个项目的开始和结束时间，要求会议室进行的宣讲场次最多，返回最多的宣讲场次。</p><p>思路：结束时间早的先安排，需要自己编写自定义比较器，按照结束时间来对项目进行排序，遍历排序后的数组，如果开始时间&lt;当前时间，则可以安排该项目。</p><pre class=" language-java"><code class="language-java"></code></pre><h3 id="金条分割问题"><a href="#金条分割问题" class="headerlink" title="金条分割问题"></a>金条分割问题</h3><p>[10,20,30]将一块60的金条分割成数组所示的数值，但是切割的cost &#x3D; 金条的value，如果切割使得cost最少。</p><p>使用小根堆 PriorityQueue数据结构，然后构建哈夫曼树，在构建过程中可以得到最小的cost</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lessMoney</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    PriorityQueue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> pq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        pq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构建哈夫曼树</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>pq<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cur <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>pq<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sum <span class="token operator">+=</span> cur<span class="token punctuation">;</span>        pq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>金条分割问题可以归类到最小分割问题，一般都可以使用建立哈夫曼树的过程解决（如何很好的使用小根堆）</p><h3 id="获取项目最大利润"><a href="#获取项目最大利润" class="headerlink" title="获取项目最大利润"></a>获取项目最大利润</h3><p>若干个项目，有自己的cost和profit，k表示最多能做的项目数量，m表示初始资金。</p><p>只能串行做项目，做完的项目收益可以当作初始资金投入到下一轮项目</p><p>思路：大小根堆的配合使用</p><p>小根堆（根据cost将项目排序，小根堆的项目是锁定的项目）</p><p>大根堆（如果项目的cost &lt;&#x3D; m，那么这些项目就可以解锁，从小根堆中移除，然后根据项目利润在大根堆中排序）然后m+&#x3D;获得的利润，又可以解锁更多的项目，依次放入到大根堆中</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 表示一个项目的信息</span><span class="token keyword">class</span> <span class="token class-name">Program</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> profit<span class="token punctuation">;</span>    <span class="token keyword">int</span> cost<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化</span>    <span class="token function">Program</span><span class="token punctuation">(</span><span class="token keyword">int</span> pro<span class="token punctuation">,</span><span class="token keyword">int</span> cos<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>profit <span class="token operator">=</span> pro<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cost <span class="token operator">=</span> cos<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 建立大根堆比较器</span><span class="token keyword">class</span> <span class="token class-name">MaxProfitComparator</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>Program<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Program o1<span class="token punctuation">,</span> Program o2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> o2<span class="token punctuation">.</span>profit <span class="token operator">-</span> o1<span class="token punctuation">.</span>profit<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 建立小根堆比较器</span><span class="token keyword">class</span> <span class="token class-name">MinCostComparator</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>Program<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Program o1<span class="token punctuation">,</span> Program o2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> o1<span class="token punctuation">.</span>cost <span class="token operator">-</span> o2<span class="token punctuation">.</span>cost<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findMaxCapital</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> Profits<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> Capital<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    PriorityQueue<span class="token operator">&lt;</span>Program<span class="token operator">></span> minq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MinCostComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PriorityQueue<span class="token operator">&lt;</span>Program<span class="token operator">></span> maxq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MaxProfitComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将项目全部加入到小根堆中</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>Profits<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        minq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Program</span><span class="token punctuation">(</span>Profits<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>Capital<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 开始解锁</span>    <span class="token comment" spellcheck="true">// 因为只能做k个项目 所以有k轮，在每一轮中找到利润最大的</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>k<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>minq<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> minq<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cost<span class="token operator">&lt;=</span>m<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            maxq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>minq<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这里如果解锁后大根堆里仍然是空的，说明没有符合条件的项目，故返回初始资金即可</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>maxq<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> m<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        m <span class="token operator">+=</span> maxq<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>profit<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> m<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="N皇后问题"><a href="#N皇后问题" class="headerlink" title="N皇后问题"></a>N皇后问题</h3><p>如果n &#x3D; 1，则只有一种放置的方法</p><p>如果n &#x3D; 2或者3 则没有放置的方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">NQueens</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// record[i]表示在第i行放置皇后的列位置</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> record <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>record<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 表示在第i行放置皇后</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> record<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果已经来到了第n层，说明已经放置成功了一种</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 否则需要在第0列-第n-1列进行尝试</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断第j列是否共列共斜线</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isValid</span><span class="token punctuation">(</span>record<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            res <span class="token operator">+=</span> <span class="token function">process</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>record<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> record<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将前i-1行的位置分别与第i行的位置进行比较，看是否符合</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>record<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> j <span class="token operator">||</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>record<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">-</span> j<span class="token punctuation">)</span> <span class="token operator">==</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>k<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="暴力递归"><a href="#暴力递归" class="headerlink" title="暴力递归"></a>暴力递归</h2><p>1、把问题转化为规模缩小了的同类问题的子问题</p><p>2、有递归停止的条件</p><p>3、不记录每一个子问题的解</p><h3 id="汉诺塔问题"><a href="#汉诺塔问题" class="headerlink" title="汉诺塔问题"></a>汉诺塔问题</h3><p>汉诺塔问题是一个经典的问题。汉诺塔（Hanoi Tower），又称河内塔，源于印度一个古老传说。大梵天创造世界的时候做了三根金刚石柱子，在一根柱子上从下往上按照大小顺序摞着64片黄金圆盘。大梵天命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱子上。并且规定，任何时候，在小圆盘上都不能放大圆盘，且在三根柱子之间一次只能移动一个圆盘。问应该如何操作？</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 汉诺塔问题</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hano</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">func</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token string">"左"</span><span class="token punctuation">,</span><span class="token string">"右"</span><span class="token punctuation">,</span><span class="token string">"中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>String start<span class="token punctuation">,</span>String end<span class="token punctuation">,</span>String other<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Move 1 from "</span><span class="token operator">+</span>start<span class="token operator">+</span><span class="token string">" to "</span><span class="token operator">+</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">func</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>start<span class="token punctuation">,</span>other<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Move "</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">" from "</span><span class="token operator">+</span>start<span class="token operator">+</span><span class="token string">" to "</span><span class="token operator">+</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">func</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>other<span class="token punctuation">,</span>end<span class="token punctuation">,</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="打印字符串的全部子序列"><a href="#打印字符串的全部子序列" class="headerlink" title="打印字符串的全部子序列"></a>打印字符串的全部子序列</h3><p>举例abc（穷举法）</p><p>有a （有b（有cabc</p><p>​    （无cab    </p><p>​  （无b（有cac</p><p>​（无ca</p><p>无a（有b（有cbc</p><p>​（无cb</p><p>​  （无b（有cc</p><p>​    （无c空</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 来到i位置前，要和不要，走两条路</span><span class="token comment" spellcheck="true">// res是之前的选择所形成的列表</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>List<span class="token operator">&lt;</span>Character<span class="token operator">></span> res<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> str<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printList</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 保留第i个字符</span>    List<span class="token operator">&lt;</span>Character<span class="token operator">></span> resKeep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    resKeep<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">process</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>resKeep<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 不保留第i个字符</span>    List<span class="token operator">&lt;</span>Character<span class="token operator">></span> resNotKeep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">process</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>resNotKeep<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Character<span class="token operator">></span> res<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    String result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>Character c<span class="token operator">:</span> res<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        result <span class="token operator">+=</span> c<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token operator">==</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="打印字符串的全排列"><a href="#打印字符串的全排列" class="headerlink" title="打印字符串的全排列"></a>打印字符串的全排列</h3><p>要求不出现重复的排列，每个字符都可以做排列的开头</p><p>a）b）c</p><p>​  ）c）b</p><p>b）a）c</p><p>​  ）c）a</p><p>c）b）a</p><p>​  ）a）b</p><pre><code></code></pre><h3 id="获胜者的分数"><a href="#获胜者的分数" class="headerlink" title="获胜者的分数"></a>获胜者的分数</h3><p>博弈论 先手胜或者后手胜</p><h3 id="逆序栈"><a href="#逆序栈" class="headerlink" title="逆序栈"></a>逆序栈</h3><p>不能申请额外的数据结构，只能使用递归函数</p><h3 id="字符串转化结果"><a href="#字符串转化结果" class="headerlink" title="字符串转化结果"></a>字符串转化结果</h3><p>给定一个只有数字字符组成的字符串str，1对应A，2对应B…</p><h3 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h3><p>暴力递归的解法就是尝试所有的可能，然后返回最大价值</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 暴力递归背包问题</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> weights<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> alreadyWeight<span class="token punctuation">,</span><span class="token keyword">int</span> bag<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 停止递归的条件</span>    <span class="token comment" spellcheck="true">// 已装的重量大于等于了包的容量</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>alreadyWeight <span class="token operator">>=</span> bag<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 或者已经撞到了最后一个 不能再装了</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> weights<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 返回的是装了第i个物品或不装第i个物品的最大价值</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token function">process</span><span class="token punctuation">(</span>weights<span class="token punctuation">,</span> values<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> alreadyWeight<span class="token operator">+</span>weights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> bag<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">process</span><span class="token punctuation">(</span>weights<span class="token punctuation">,</span>values<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>alreadyWeight<span class="token punctuation">,</span>bag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>基于深度学习的实体关系联合抽取研究综述</title>
      <link href="/2023/10/07/ji-yu-shen-du-xue-xi-de-shi-ti-guan-xi-lian-he-chou-qu-yan-jiu-zong-shu/"/>
      <url>/2023/10/07/ji-yu-shen-du-xue-xi-de-shi-ti-guan-xi-lian-he-chou-qu-yan-jiu-zong-shu/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实体关系抽取 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后端文件上传</title>
      <link href="/2023/09/26/hou-duan-wen-jian-shang-chuan/"/>
      <url>/2023/09/26/hou-duan-wen-jian-shang-chuan/</url>
      
        <content type="html"><![CDATA[<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>采用multer中间件（nodejs的中间件）用于处理multipart&#x2F;form-data类型的表单数据，它主要用于上传文件，但是它不会处理任何非multipart&#x2F;form-data类型的表达数据</p><p>在后台通过multer的配置文件进行文件上传</p><p>在前端采用el-load进行文件上传 但是需要自定义上传文件 将action设定为#</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解现代浏览器</title>
      <link href="/2023/09/21/shen-ru-li-jie-xian-dai-liu-lan-qi/"/>
      <url>/2023/09/21/shen-ru-li-jie-xian-dai-liu-lan-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="深入理解现代浏览器"><a href="#深入理解现代浏览器" class="headerlink" title="深入理解现代浏览器"></a>深入理解现代浏览器</h1><p>转载，非原创，最后连接在结尾。</p><p>好了，言归正传。本文分4个部分，对应上述4篇文章（原文链接附后）。</p><ul><li>架构：以Chrome为例，介绍现代浏览器的实现架构。</li><li>导航：从输入URL到获到HTML响应称为导航。</li><li>渲染：浏览器解析HTML、下载外部资源、计算样式并把网页绘制到屏幕上。</li><li>交互：用户输入事件的处理与优化。</li></ul><p>先来个小小的序言。很多人在开发网站时，只关注怎么写自己的代码，关注怎么提升自己的开发效率。这些当然重要，但是写到一定的阶段，就应该停下来想想：浏览器到底会怎么运行你写的代码。如果你能多了解一些浏览器，然后对它好一点，那么就会更容易达成你提升用户体验的目标。</p><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>Web浏览器的架构，可以实现为一个进程包含多个线程，也可以实现为很多进程包含少数线程通过IPC通信。如何实现浏览器，并没有统一的标准。Chrome最新的架构：最上层是浏览器进程，负责协调承担各项工作的其他进程，比如实用程序进程、渲染器进程、GPU进程、插件进程等，如下图所示。</p><p><img src="https://p0.ssl.qhimg.com/t01b66df9900b6f46a6.png"></p><p>渲染器进程对应新开的标签页，每新开一个标签页，就会创建一个新的渲染器进程。不仅如此，Chrome还会尽量给每个站点新开一个渲染器进程，包括iframe中的站点，以实现站点隔离。</p><p>下面详细了解一下每个进程的作用，可以参考下图。</p><ul><li><strong>浏览器进程</strong>：控制浏览器这个应用的chrome（主框架）部分，包括地址栏、书签、前进&#x2F;后退按钮等，同时也会处理浏览器不可见的高权限任务，如发送网络请求、访问文件。</li><li><strong>渲染器进程</strong>：负责在标签页中显示网站及处理事件。</li><li><strong>插件进程</strong>：控制网站用到的所有插件。</li><li><strong>GPU进程</strong>：在独立的进程中处理GPU任务。之所以放到独立的进程，是因为GPU要处理来自多个应用的请求，但要在同一个界面上绘制图形。</li></ul><p><img src="https://p1.ssl.qhimg.com/t01890ac79f228dc66b.png"></p><p>当然，还有其他进程，比如扩展进程、实用程序进程。要知道你的Chrome当前打开了多少个进程，点击右上角的按钮，选择“更多工具”，再选择“任务管理器”。</p><p>Chrome的多进程架构有哪些优点呢？</p><p>最简单的情况下，可以想像一个标签页就是一个渲染器进程，比如3个标签页就是3个渲染器进程。这时候，如果有一个渲染器崩溃了，只要把它关掉即可，不会影响其他标签页。如果所有标签页都运行在一个进程中，那只要有一个标签页卡住，所有标签页都会卡住。</p><p>除此之外，多进程架构还有助于安全和隔离。因为操作系统有限制进程特权的机制，浏览器可以借此限制某些进程的能力。比如，Chrome会限制处理任意用户输入的渲染器进程，不让它任意访问文件。</p><p>由于进程都有自己私有的内存空间，因此每个进程可能都会保存某个公共基础设施（比如Chrome的JavaScript引擎V8）的多个副本。这会导致内存占用增多。为节省内存，Chrome会限制自己可以打开的进程数量。限制的条件取决于设备内存和CPU配置。达到限制条件后，Chrome会用一个进程处理同一个站点的多个标签页。</p><p>Chrome架构进化的目标是将整个浏览器程序的不同部分服务化，便于分割或合并。基本思路是在高配设备中，每个服务独立开进程，保证稳定；在低配设备中，多个服务合并为一个进程，节约资源。同样的思路也应用到了Android上。</p><p>重点说一说站点隔离（<a href="http://t.cn/RgNAwLC%EF%BC%89%E3%80%82%E7%AB%99%E7%82%B9%E9%9A%94%E7%A6%BB%E6%98%AF%E6%96%B0%E8%BF%91%E5%BC%95%E5%85%A5Chrome%E7%9A%84%E4%B8%80%E4%B8%AA%E9%87%8C%E7%A8%8B%E7%A2%91%E5%BC%8F%E7%89%B9%E6%80%A7%EF%BC%8C%E5%8D%B3%E6%AF%8F%E4%B8%AA%E8%B7%A8%E7%AB%99%E7%82%B9iframe%E9%83%BD%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AA%E7%8B%AC%E7%AB%8B%E7%9A%84%E6%B8%B2%E6%9F%93%E5%99%A8%E8%BF%9B%E7%A8%8B%E3%80%82%E5%8D%B3%E4%BE%BF%E5%83%8F%E5%89%8D%E9%9D%A2%E8%AF%B4%E7%9A%84%E9%82%A3%E6%A0%B7%EF%BC%8C%E6%AF%8F%E4%B8%AA%E6%A0%87%E7%AD%BE%E9%A1%B5%E5%8D%95%E5%BC%80%E4%B8%80%E4%B8%AA%E6%B8%B2%E6%9F%93%E5%99%A8%E8%BF%9B%E7%A8%8B%EF%BC%8C%E4%BD%86%E5%85%81%E8%AE%B8%E8%B7%A8%E7%AB%99%E7%82%B9%E7%9A%84iframe%E8%BF%90%E8%A1%8C%E5%9C%A8%E5%90%8C%E4%B8%80%E4%B8%AA%E6%B8%B2%E6%9F%93%E5%99%A8%E8%BF%9B%E7%A8%8B%E4%B8%AD%E5%B9%B6%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%EF%BC%8C%E9%82%A3%E5%AE%89%E5%85%A8%E6%94%BB%E5%87%BB%E4%BB%8D%E7%84%B6%E6%9C%89%E5%8F%AF%E8%83%BD%E7%BB%95%E5%BC%80%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%EF%BC%88http://t.cn/8s1ySzx%EF%BC%89%EF%BC%8C%E8%80%8C%E4%B8%94%E6%9C%89%E4%BA%BA%E5%8F%91%E7%8E%B0%E5%9C%A8%E7%8E%B0%E4%BB%A3CPU%E4%B8%AD%EF%BC%8C%E8%BF%9B%E7%A8%8B%E6%9C%89%E5%8F%AF%E8%83%BD%E8%AF%BB%E5%8F%96%E4%BB%BB%E6%84%8F%E5%86%85%E5%AD%98%EF%BC%88http://t.cn/R8FwHoX%EF%BC%89%E3%80%82">http://t.cn/RgNAwLC）。站点隔离是新近引入Chrome的一个里程碑式特性，即每个跨站点iframe都运行一个独立的渲染器进程。即便像前面说的那样，每个标签页单开一个渲染器进程，但允许跨站点的iframe运行在同一个渲染器进程中并共享内存空间，那安全攻击仍然有可能绕开同源策略（http://t.cn/8s1ySzx），而且有人发现在现代CPU中，进程有可能读取任意内存（http://t.cn/R8FwHoX）。</a></p><p>进程隔离是隔离站点、确保上网安全最有效的方式。Chrome 67桌面版默认采用站点隔离。站点隔离是多年工程化努力的结果，它并非多开几个渲染器进程那么简单。比如，不同的iframe运行在不同进程中，开发工具在后台仍然要做到无缝切换，而且即便简单地Ctrl+F查找也会涉及在不同进程中搜索。</p><h2 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h2><p>导航涉及浏览器进程与线程间为显示网页而通信。一切从用户在浏览器中输入一个URL开始。输入URL之后，浏览器会通过互联网获取数据并显示网页。从请求网页到浏览器准备渲染网页的过程，叫做导航。</p><p>如前所述，标签页外面的一切都由浏览器进程处理。浏览器进程中有线程（UI线程）负责绘制浏览器的按钮和地址栏，有线程（网络线程）负责处理网络请求并从互联网接收数据，有线程（存储线程）负责访问文件和存储数据。</p><p><img src="https://p3.ssl.qhimg.com/t012538c72b5bec3f3d.png"></p><p>下面我们逐步看一看导航的几个步骤。</p><p>第一步：<strong>处理输入</strong>。UI线程会判断用户输入的是查询字符串还是URL。因为Chrome的地址栏同时也是搜索框。</p><p><img src="https://p3.ssl.qhimg.com/t01c427a2f3373e4514.png"></p><p>第二步：<strong>开始导航</strong>。如果输入的是URL，UI线程会通知网络线程发起网络调用，获取网站内容。此时标签页左端显示旋转图标，网络线程进行DNS查询、建立TLS连接（对于HTTPS）。网络线程可能收到服务器的重定向头部，如HTTP 301。此时网络线程会跟UI线程沟通，告诉它服务器要求重定向。然后，再发起对另一个URL的请求。</p><p><img src="https://p4.ssl.qhimg.com/t0152b96a4eedeb09c3.png"></p><p>第三步：<strong>读取响应</strong>。服务器返回的响应体到来之后，网络线程会检查接收到的前几个字节。响应的Content-Type头部应该包含数据类型，如果没有这个字段，则需要MIME类型嗅探（<a href="http://t.cn/Rt2gG2J%EF%BC%89%E3%80%82%E7%9C%8B%E7%9C%8BChrome%E6%BA%90%E7%A0%81%EF%BC%88http://t.cn/Ai9cZI7D%EF%BC%89%E4%B8%AD%E7%9A%84%E6%B3%A8%E9%87%8A%E5%B0%B1%E7%9F%A5%E9%81%93%E8%BF%99%E4%B8%80%E5%9D%97%E6%9C%89%E5%A4%9A%E9%9A%BE%E6%90%9E%E3%80%82">http://t.cn/Rt2gG2J）。看看Chrome源码（http://t.cn/Ai9cZI7D）中的注释就知道这一块有多难搞。</a></p><p><img src="https://p5.ssl.qhimg.com/t0151fd485b8ba8c4ab.png"></p><p>如果响应是HTML文件，那下一步就是把数据交给渲染器进程。但如果是一个zip文件或其他文件，那就意味着是一个下载请求，需要把数据传给下载管理器。</p><p>此时也是“安全浏览”（<a href="https://safebrowsing.google.com/%EF%BC%89%E6%A3%80%E6%9F%A5%E7%9A%84%E7%8E%AF%E8%8A%82%E3%80%82%E5%A6%82%E6%9E%9C%E5%9F%9F%E5%90%8D%E5%92%8C%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE%E5%8C%B9%E9%85%8D%E5%B7%B2%E7%9F%A5%E7%9A%84%E6%81%B6%E6%84%8F%E7%BD%91%E7%AB%99%EF%BC%8C%E7%BD%91%E7%BB%9C%E7%BA%BF%E7%A8%8B%E4%BC%9A%E6%98%BE%E7%A4%BA%E8%AD%A6%E5%91%8A%E9%A1%B5%E3%80%82%E6%AD%A4%E5%A4%96%EF%BC%8CCORB%EF%BC%88Cross">https://safebrowsing.google.com/）检查的环节。如果域名和响应数据匹配已知的恶意网站，网络线程会显示警告页。此外，CORB（Cross</a> Origin Read Blocking，<a href="https://www.chromium.org/Home/chromium-security/corb-for-developers%EF%BC%89%E6%A3%80%E6%9F%A5%E4%B9%9F%E4%BC%9A%E6%89%A7%E8%A1%8C%EF%BC%8C%E4%BB%A5%E7%A1%AE%E4%BF%9D%E6%95%8F%E6%84%9F%E7%9A%84%E8%B7%A8%E7%AB%99%E7%82%B9%E6%95%B0%E6%8D%AE%E4%B8%8D%E4%BC%9A%E5%8F%91%E9%80%81%E7%BB%99%E6%B8%B2%E6%9F%93%E5%99%A8%E8%BF%9B%E7%A8%8B%E3%80%82">https://www.chromium.org/Home/chromium-security/corb-for-developers）检查也会执行，以确保敏感的跨站点数据不会发送给渲染器进程。</a></p><p>第四步：<strong>联系渲染器进程</strong>。所有查检完毕，网络线程确认浏览器可以导航到用户请求的网站，于是会通知UI线程数据已经准备好了。UI线程会联系渲染器进程渲染网页。</p><p><img src="https://p5.ssl.qhimg.com/t01785bedd04ce1df31.png"></p><blockquote><p>由于网络请求可能要花几百毫秒才能拿到响应，这里还会应用一个优化策略。第二步UI线程要求网络线程发送请求后，已经知道可能要导航到哪个网站去了。因此在发送网络请求的同时，UI线程会提前联系或并行启动一个渲染器进程。这样在网络线程收到数据后，就已经有渲染器进程原地待命了。如果发生了重定向，这个待命进程可能用不上，而是换作其他进程去处理。</p></blockquote><p>第五步：<strong>提交导航</strong>。数据和渲染器进程都有了，就可以通过IPC从浏览器进程向渲染器进程提交导航。渲染器进程也会同时接收到不间断的HTML数据流。当浏览器进程收到渲染器进程的确认消息后，导航完成，文档加载阶段开始。</p><p><img src="https://p4.ssl.qhimg.com/t01a353c06b0ad8e803.png"></p><p>此时，地址栏会更新，安全指示图标和网站设置UI也会反映新页面的信息。当前标签页面的会话历史会更新，后退&#x2F;前进按钮起作用。为便于标签页&#x2F;会话在关闭标签页或窗口后恢复，会话历史会写入磁盘。</p><p>最后一步：<strong>初始加载完成</strong>。提交导航之后，渲染器进程将负责加载资源和渲染页面（具体细节后面介绍）。而在“完成”渲染后（在所有iframe中的<code>onload</code>事件触发且执行完成后），渲染器进程会通过IPC给浏览器进程发送一个消息。此时，UI线程停止标签页上的旋转图标。</p><blockquote><p>初始加载完成后，客户端JavaScript仍然可能加载额外资源并重新渲染页面。</p></blockquote><p>如果此时用户在地址又输入了其他URL呢？浏览器进程还会重复上述步骤，导航到新站点。不过在此之前，需要确认已渲染的网站是否关注<code>beforeunload</code>事件。因为标签页中的一切，包括JavaScript代码都由渲染器进程处理，所以浏览器进程必须与当前的渲染器进程确认后再导航到新站点。</p><p><img src="https://p0.ssl.qhimg.com/t0119f48471b67a986b.png"></p><p>如果导航请求来自当前渲染器进程（用户点击了链接或JavaScript运行了<code>window.location = &quot;https://newsite.com&quot;</code>），渲染器进程首先会检查<code>beforeunload</code>处理程序。然后，它会走一遍与浏览器进程触发导航同样的过程。唯一的区别在于导航请求是由渲染器进程提交给浏览器进程的。</p><p>导航到不同的网站时，会有一个新的独立渲染器进程负责处理新导航，而老的渲染器进程要负责处理<code>unload</code>之类的事件。更多细节，可以参考“页面生命周期API”：<a href="http://t.cn/Rey7RIE%E3%80%82">http://t.cn/Rey7RIE。</a></p><p><img src="https://p5.ssl.qhimg.com/t0108ccd79a35081bbe.png"></p><p>另外，导航阶段还可能涉及Service Worker，即网页应用中的网络代理服务（<a href="http://t.cn/R3SH3HL%EF%BC%89%EF%BC%8C%E5%BC%80%E5%8F%91%E8%80%85%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E5%AE%83%E6%8E%A7%E5%88%B6%E4%BB%80%E4%B9%88%E7%BC%93%E5%AD%98%E5%9C%A8%E6%9C%AC%E5%9C%B0%EF%BC%8C%E4%BD%95%E6%97%B6%E4%BB%8E%E7%BD%91%E7%BB%9C%E8%8E%B7%E5%8F%96%E6%96%B0%E6%95%B0%E6%8D%AE%E3%80%82Service">http://t.cn/R3SH3HL），开发者可以通过它控制什么缓存在本地，何时从网络获取新数据。Service</a> Worker说到底也是需要渲染器进程运行的JavaScript代码。如果网站注册了Server Worker，那么导航请求到来时，网络线程会根据URL将其匹配出来，此时UI线程就会联系一个渲染器进程来执行Service Worker的代码：可能只要从本地缓存读取数据，也可能需要发送网络请求。</p><p><img src="https://p1.ssl.qhimg.com/t01b7feedfc5b96ea4d.png"></p><p>如果Service Worker最终决定从网络请求数据，浏览器进程与渲染器进程间的这种往返通信会导致延迟。因此，这里会有一个“导航预加载”的优化（<a href="http://t.cn/Ai9qGJ66%EF%BC%89%EF%BC%8C%E5%8D%B3%E5%9C%A8Service">http://t.cn/Ai9qGJ66），即在Service</a> Worker启动同时预先加载资源，加载请求通过HTTP头部与服务器沟通，服务器决定是否完全更新内容。</p><p><img src="https://p4.ssl.qhimg.com/t01ed10281779eb37a6.png"></p><h2 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h2><p>渲染是渲染器进程内部的工作，涉及Web性能的诸多方面（详细内容可以参考这里<a href="http://t.cn/Ai9c4nUu%EF%BC%89%E3%80%82%E6%A0%87%E7%AD%BE%E9%A1%B5%E4%B8%AD%E7%9A%84%E4%B8%80%E5%88%87%E9%83%BD%E7%94%B1%E6%B8%B2%E6%9F%93%E5%99%A8%E8%BF%9B%E7%A8%8B%E8%B4%9F%E8%B4%A3%E5%A4%84%E7%90%86%EF%BC%8C%E5%85%B6%E4%B8%AD%E4%B8%BB%E7%BA%BF%E7%A8%8B%E8%B4%9F%E8%B4%A3%E8%BF%90%E8%A1%8C%E5%A4%A7%E5%A4%9A%E6%95%B0%E5%AE%A2%E6%88%B7%E7%AB%AFJavaScript%E4%BB%A3%E7%A0%81%EF%BC%8C%E5%B0%91%E9%87%8F%E4%BB%A3%E7%A0%81%E5%8F%AF%E8%83%BD%E4%BC%9A%E7%94%B1%E5%B7%A5%E4%BD%9C%E7%BA%BF%E7%A8%8B%E5%A4%84%E7%90%86%EF%BC%88%E5%A6%82%E6%9E%9C%E7%94%A8%E5%88%B0%E4%BA%86Web">http://t.cn/Ai9c4nUu）。标签页中的一切都由渲染器进程负责处理，其中主线程负责运行大多数客户端JavaScript代码，少量代码可能会由工作线程处理（如果用到了Web</a> Worker或Service Worker）。合成器（compositor）线程和栅格化（raster）线程负责高效、平滑地渲染页面。</p><p><img src="https://p2.ssl.qhimg.com/t01c8f9c816da34752d.png"></p><p>渲染器进程的核心任务是把HTML、CSS和JavaScript转换成用户可以交互的网页接下来，我们从整体上过一遍渲染器进程处理Web内容的各个阶段。</p><h3 id="解析HTML"><a href="#解析HTML" class="headerlink" title="解析HTML"></a>解析HTML</h3><p><strong>构建DOM</strong>。渲染器进程收到导航的提交消息后，开始接收HTML，其主线程开始解析文本字符串（HTML），并将它转换为DOM（Document Object Model，文档对象模型）。</p><p>DOM是浏览器内部对页面的表示，也是JavaScript与之交互的数据结构和API。</p><p>如何将HTML解析为DOM由HTML标准（<a href="http://t.cn/R2NREUt%EF%BC%89%E5%AE%9A%E4%B9%89%E3%80%82HTML%E6%A0%87%E5%87%86%E8%A6%81%E6%B1%82%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E9%94%99%E8%AF%AF%E7%9A%84HTML%E5%86%99%E6%B3%95%EF%BC%8C%E5%9B%A0%E6%AD%A4%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BC%9A%E2%80%9C%E5%BF%8D%E6%B0%94%E5%90%9E%E5%A3%B0%E2%80%9D%EF%BC%8C%E7%BB%9D%E4%B8%8D%E6%8A%A5%E9%94%99%E3%80%82%E8%AF%A6%E6%83%85%E5%8F%AF%E4%BB%A5%E7%9C%8B%E7%9C%8B%E2%80%9C%E8%A7%A3%E6%9E%90%E5%99%A8%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E5%8F%8A%E6%80%AA%E5%BC%82%E6%83%85%E5%BD%A2%E7%AE%80%E4%BB%8B%E2%80%9D%EF%BC%88http://t.cn/Ai9c8i5D%EF%BC%89%E3%80%82">http://t.cn/R2NREUt）定义。HTML标准要求浏览器兼容错误的HTML写法，因此浏览器会“忍气吞声”，绝不报错。详情可以看看“解析器错误处理及怪异情形简介”（http://t.cn/Ai9c8i5D）。</a></p><p><strong>加载子资源</strong>。网站都会用到图片、CSS和JavaScript等外部资源。浏览器需要从缓存或网络加载这些文件。主线程可以在解析并构建DOM的过程中发现一个加载一个，但这样效率太低。为此，Chrome会在解析同时并发运行“预加载扫描器”，当发现HTML文档中有<code>&lt;img&gt;</code>或<code>&lt;link&gt;</code>时，预加载扫描器会将请求提交给浏览器进程中的网络线程。</p><p><img src="https://p1.ssl.qhimg.com/t01c91faf9ab7237d9b.png"></p><p><strong>JavaScript可能阻塞解析</strong>。如果HTML解析器碰到<code>&lt;script&gt;</code>标签，会暂停解析HTML文档并加载、解析和执行JavaScript代码。因为JavaScript有可能通过<code>document.write()</code>修改文档，进而改变DOM结构（HTML标准的“解析模型”有一张图可以一目了然：<a href="http://t.cn/Ai9cupLc%EF%BC%89%E3%80%82%E6%89%80%E4%BB%A5HTML%E8%A7%A3%E6%9E%90%E5%99%A8%E5%BF%85%E9%A1%BB%E5%81%9C%E4%B8%8B%E6%9D%A5%E6%89%A7%E8%A1%8CJavaScript%EF%BC%8C%E7%84%B6%E5%90%8E%E5%86%8D%E6%81%A2%E5%A4%8D%E8%A7%A3%E6%9E%90HTML%E3%80%82%E8%87%B3%E4%BA%8E%E6%89%A7%E8%A1%8CJavaScript%E7%9A%84%E7%BB%86%E8%8A%82%EF%BC%8C%E5%A4%A7%E5%AE%B6%E5%8F%AF%E4%BB%A5%E5%85%B3%E6%B3%A8V8%E5%9B%A2%E9%98%9F%E7%9B%B8%E5%85%B3%E7%9A%84%E5%88%86%E4%BA%AB%EF%BC%9Ahttp://t.cn/RB9qP51%E3%80%82">http://t.cn/Ai9cupLc）。所以HTML解析器必须停下来执行JavaScript，然后再恢复解析HTML。至于执行JavaScript的细节，大家可以关注V8团队相关的分享：http://t.cn/RB9qP51。</a></p><blockquote><h5 id="提示浏览器你要加载资源"><a href="#提示浏览器你要加载资源" class="headerlink" title="提示浏览器你要加载资源"></a><strong>提示浏览器你要加载资源</strong></h5><p>为了更好地加载资源，可以通过很多方式告诉浏览器。如果JavaScript没有用到<code>document.write()</code>，可以在<code>&lt;script&gt;</code>标签上添加<code>async</code>或<code>defer</code>属性。这样浏览器就会异步运行JavaScript代码，不会阻塞解析。合适的话，可以考虑使用JavaScript模块（<a href="http://t.cn/RDXCctZ%EF%BC%89%E3%80%82%E5%86%8D%E6%AF%94%E5%A6%82%EF%BC%8C%60">http://t.cn/RDXCctZ）。再比如，`</a><link rel="preload">&#96;告诉浏览器该资源对于当前导航绝对必要，应该尽快下载。关于资源加载优先级，可以参考这里：<a href="http://t.cn/EVlIx31%E3%80%82">http://t.cn/EVlIx31。</a></p><p><img src="https://p0.ssl.qhimg.com/t01f14816e57df4f8f1.png"></p></blockquote><h3 id="计算样式"><a href="#计算样式" class="headerlink" title="计算样式"></a>计算样式</h3><p>光有DOM还不行，因为并不知道页面应该长啥样。所以接下来，主线程要解析CSS并计算每个DOM节点的样式。这个过程就是根据CSS选择符，确定每个元素要应用什么样式。在Chrome开发工具“计算的样式”（computed）中可以看每个元素计算后的样式。</p><p><img src="https://p0.ssl.qhimg.com/t015704d14879481455.png"></p><p>就算网页没有提供任何CSS，每个DOM节点仍然会有计算的样式。这是因为浏览器有一个默认的样式表，Chrome默认的样式在这里：<a href="http://t.cn/Ai9VALCy%E3%80%82">http://t.cn/Ai9VALCy。</a></p><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><p>到这一步，渲染器进程知道了文档的结构，也知道了每个节点的样式。但基于这些信息仍然不足以渲染页面。比如，你通过电话跟朋友说：“画一个红色的大圆形，还有一个蓝色的小方形”，你的朋友仍然不知道该画成什么样。</p><p><img src="https://p1.ssl.qhimg.com/t010d783d6e0dc52ed8.png"></p><p>布局，就是要找到元素间的几何位置关系。主线程会遍历DOM元素及其计算样式，然后构造一棵布局树，这棵树的每个节点将带有坐标和大小信息。布局树与DOM树的结构类似，但只包含页面中可见元素的信息。如果元素被应用了<code>display: none</code>，则布局树中不会包含它（<code>visibility: hidden</code>的元素会包含在内）。类似地，通过伪类<code>p::before&#123;content: &#39;Hi!&#39;&#125;</code>添加的内容会包含在布局树中，但DOM树中却没有。</p><p><img src="https://p0.ssl.qhimg.com/t01c18b18400af16720.png"></p><p>确定页面的布局要考虑很多很多因素，并不简单。比如，字体大小、文本换行都会影响段落的形状，进而影响后续段落的布局。CSS可让元素浮动到一边、隐藏溢出边界的内容、改变文本显示方向。可想而知，布局阶段的任务是非常艰巨的。Chrome有一个工程师团队专司布局，感兴起的话，可以看看他们这个分享：<a href="http://t.cn/Ai9VcjFn%EF%BC%88%E5%9C%A8YouTube%E4%B8%8A%EF%BC%89%E3%80%82">http://t.cn/Ai9VcjFn（在YouTube上）。</a></p><h3 id="绘制"><a href="#绘制" class="headerlink" title="绘制"></a>绘制</h3><p>有了DOM、样式和布局，仍然不足以渲染页面。还要解决先画什么后画什么，即绘制顺序的问题。比如，<code>z-index</code>影响元素叠放，如果有这个属性，那简单地按元素在HTML中出现的顺序绘制就会出错。</p><p><img src="https://p3.ssl.qhimg.com/t014a138b89de57d235.png"></p><p>因此，在这一步，主线程会遍历布局树并创建绘制记录。绘制记录是对绘制过程的注解，比如“先画背景，然后画文本，最后画矩形”。如果你用过<code>&lt;canvas&gt;</code>，应该更容易理解这一点。</p><p><img src="https://p1.ssl.qhimg.com/t0103e043f9a25862d1.png"></p><p>渲染是一个流水线作业（pipeline）：前一道工序的输出就是下一道工序的输入。这意味着如果布局树有变化，则相应的绘制记录也要重新生成。</p><p><img src="https://p4.ssl.qhimg.com/t015fcefd847f0c3cc2.gif"></p><p>如果元素有动画，浏览器就需要每帧运行一次渲染流水线。目前显示器的刷新率为每秒60次（60fps），也就是说每秒更新60帧，动画会显得很流畅。如果中间缺了帧，那页面看起来就会“闪眼睛”。</p><p><img src="https://p5.ssl.qhimg.com/t011b359c7670940fe4.png"></p><p>即便渲染操作的频率能跟上屏幕刷新率，但由于计算发生在主线程上，而主线程可能因为运行JavaScript被阻塞。此时动画会因为阻塞被卡住。</p><p><img src="https://p1.ssl.qhimg.com/t013f84441e74c20535.png"></p><p>此时，可以使用<code>requestAnimationFrame()</code>将涉及动画的JavaScript操作分块并调度到每一帧的开始去运行。对于耗时的不必操作DOM的JavaScript操作，可以考虑Web Worker（<a href="http://t.cn/Ai9VBqs9%EF%BC%89%EF%BC%8C%E9%81%BF%E5%85%8D%E9%98%BB%E5%A1%9E%E4%B8%BB%E7%BA%BF%E7%A8%8B%E3%80%82">http://t.cn/Ai9VBqs9），避免阻塞主线程。</a></p><h3 id="合成"><a href="#合成" class="headerlink" title="合成"></a>合成</h3><p>知道了文档结构、每个元素的样式、页面的几何关系，以及绘制顺序，接下来就该绘制页面了。具体该怎么绘制呢？把上述信息转换为屏幕上的像素叫做栅格化。</p><p>最简单的方式，可能就是把页面在当前视口中的部分先转换为像素。然后随着用户滚动页面，再移动栅格化的画框（frame），填补缺失的部分。Chrome最早的版本就是这样干的。</p><p><img src="https://p3.ssl.qhimg.com/t013115b345452496c9.gif"></p><p>但现代浏览器会使用一个更高级的步骤叫合成。什么是合成？合成（composite）是将页面不同部分先分层并分别栅格化，然后再通过独立的合成器线程合成页面。这样当用户滚动页面时，因为层都已经栅格化，所以浏览器唯一要做的就是合成一个新的帧。而动画也可以用同样的方式实现：先移动层，再合成帧。</p><p><img src="https://p4.ssl.qhimg.com/t0177df168ec35b727e.gif"></p><p>怎么分层？为了确定哪个元素应该在哪一层，主线程会遍历布局树并创建分层树（这一部分在开发工具的“性能”面板中叫“Update Layer Tree”）。如果页面某些部分应该独立一层（如滑入的菜单）但却没有，那你可以在CSS中给它加上<code>will-change</code>属性（<a href="http://t.cn/R7IJCx2%EF%BC%89%E6%9D%A5%E6%8F%90%E9%86%92%E6%B5%8F%E8%A7%88%E5%99%A8%E3%80%82">http://t.cn/R7IJCx2）来提醒浏览器。</a></p><p><img src="https://p0.ssl.qhimg.com/t013797adf5d3b21d50.png"></p><p>分层并不是越多越好，合成过多的层有可能还不如每帧都对页面中的一小部分执行一次栅格化更快。关于这里边的权衡，可以参考：<a href="http://t.cn/Ai9fiJiM%E3%80%82">http://t.cn/Ai9fiJiM。</a></p><p>创建了分层树，确定了绘制顺序，主线程就会把这些信息提交给合成器线程。合成器线程接下来负责将每一层转换为像素——栅格化。一层有可能跟页面一样大，此时合成器线程会将它切成小片（tile），再把每一片发给栅格化线程。栅格化线程将每一小片转换为像素后将它们保存在GPU的内存中。</p><p><img src="https://p2.ssl.qhimg.com/t01182abc8d259cbb80.png"></p><p>合成器线程会安排栅格化线程优先转换视口（及附近）的小片。而构成一层的小片也会转换为不同分辨率的版本，以便在用户缩放时使用。</p><p>所有小片都栅格化以后，合成器线程会收集叫做“绘制方块”（draw quad）的小片信息，以创建合成器帧。</p><ul><li>绘制方块：包含小片的内存地址、页面位置等合成页面相关的信息</li><li>合成器帧：由从多绘制方块拼成的页面中的一帧</li></ul><p>创建好的合成器帧会通过IPC提交给浏览器进程。与此同时，为更新浏览器界面，UI线程可能还会添加另一个合成器帧；或者因为有扩展，其他渲染器进程也可能添加额外的合成器帧。所有这些合成器帧都会发送给GPU，以便最终显示在屏幕上。如果发生滚动事件，合成器线程会再创建新的合成器帧并发送给GPU。</p><p><img src="https://p0.ssl.qhimg.com/t01611f1aa3a10b25f3.png"></p><p>使用合成的好处是不用牵扯主线程。合成器线程不用等待样式计算或JavaScript执行。这也是为什么“只需合成的动画”（<a href="http://t.cn/Ai9fO8OW%EF%BC%89%E8%A2%AB%E8%AE%A4%E4%B8%BA%E6%80%A7%E8%83%BD%E6%9C%80%E4%BD%B3%E7%9A%84%E5%8E%9F%E5%9B%A0%E3%80%82%E5%9B%A0%E4%B8%BA%E5%A6%82%E6%9E%9C%E5%B8%83%E5%B1%80%E5%92%8C%E7%BB%98%E5%88%B6%E9%9C%80%E8%A6%81%E5%86%8D%E6%AC%A1%E8%AE%A1%E7%AE%97%EF%BC%8C%E9%82%A3%E8%BF%98%E5%BE%97%E7%94%A8%E5%88%B0%E4%B8%BB%E7%BA%BF%E7%A8%8B%E3%80%82">http://t.cn/Ai9fO8OW）被认为性能最佳的原因。因为如果布局和绘制需要再次计算，那还得用到主线程。</a></p><h2 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h2><p>最后，我们看一看合成器如何处理用户交互。说到用户交互，有人可能只会想到在文本框里打字或点击鼠标。实际上，从浏览器的角度看，交互意味着来自用户的任何输入：鼠标滚轮转动、触摸屏幕、鼠标悬停，这些都是交互。</p><p>当用户交互比如触摸事件发生时，浏览器进程首先接收到该手势。但是，浏览器进程仅仅知道手势发生在哪里，因为标签页中的内容是渲染器进程处理。因此浏览器进程会把事件类型（如<code>touchstart</code>）及其坐标发送给渲染器进程。渲染器进程会处理这个事件，即根据事件目标来运行注册的监听程序。</p><p><img src="https://p0.ssl.qhimg.com/t013284de6b748e2a79.png"></p><p>具体来说，输入事件是由渲染器进程中的合成器线程处理的。如前所述，如果页面上没有注册事件监听程序，那合成器线程可以完全独立于主线程生成新的合成器帧。但是如果页面上注册了事件监听程序呢？此时合成器线程怎么知道是否有事件要处理？</p><p>这就涉及一个概念，叫“非快速滚动区”（non-fast scrollable region）。我们知道，运行JavaScript是主线程的活儿。在页面合成后，合成器线程会给附加了事件处理程序的页面区域打上“Non-Fast Scrollable Region”的记号。有了这个记号，合成器线程就可以在该区域发生事件时把事件发送给主线程。</p><p><img src="https://p1.ssl.qhimg.com/t01bb4a6153e809af97.png"></p><p>如果事件发生在这个区域外，那合成器线程会继续合成新帧而不会等待主线程。</p><p>提到注册事件，有一个常见的问题要注意。很多人喜欢使用事件委托来注册处理程序。这是利用事件冒泡原理，把事件注册到最外层元素上，然后再根据事件目标决定是否执行任务。</p><pre class=" language-js"><code class="language-js">document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchstart'</span><span class="token punctuation">,</span> evt <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>evt<span class="token punctuation">.</span>target <span class="token operator">===</span> area<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        evt<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>一个事件处理程序就可以面向多个元素，这种高效的写法因此很流行。然而，从浏览器的角度来看，这样会导致整个页面被标记为“非快速滚动区”。这也就意味着，即便事件发生在那些不需要处理的元素上，合成器线程也要每次都跟主线程沟通，并等待它的回应。于是，合成器线程平滑滚动的优点就被抵销了。</p><p><img src="https://p3.ssl.qhimg.com/t015b49fbbed9197a3f.png"></p><p>为缓冲使用事件委托带来的副作用，可以在注册事件时传入<code>passive: true</code>。这个选项会提醒浏览器，你仍然希望主线程处理事件，但与此同时合成器线程也可以继续合成新的帧。</p><pre class=" language-js"><code class="language-js">document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchstart'</span><span class="token punctuation">,</span> evt <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token operator">...</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> passive<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>此外，检查事件是否可以取消也是一个优化策略。假设页面中有一个盒子，你想限制盒子中的内容只能水平滚动。</p><p><img src="https://p5.ssl.qhimg.com/t019697113324b93546.png"></p><p>使用<code>passive: true</code>可以让页面平滑滚动，但为了限制滚动方向而调用<code>prevenDefault</code>则不会避免垂直滚动。此时可以检查<code>evt.cancelable</code>。</p><pre class=" language-js"><code class="language-js">document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'pointermove'</span><span class="token punctuation">,</span> evt <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>evt<span class="token punctuation">.</span>cancelable<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        evt<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 阻止原生滚动</span>        <span class="token comment" spellcheck="true">/*        *  其他操作        */</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> passive<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当然，也可以使用CSS规则如<code>touch-action</code>完全避免使用事件处理程序。</p><pre class=" language-css"><code class="language-css">#area &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">touch-action</span><span class="token punctuation">:</span> pan-x<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p>合成器线程把事件发送给主线程以后，要做的第一件事就是通过命中测试（hit test）找到事件目标。命中测试就是根据渲染进程生成的绘制记录数据和事件坐标找到下方的元素。</p><p><img src="https://p0.ssl.qhimg.com/t01acc46ab48b08a521.png"></p><p>另外，事件还有一个触发频率的问题。通常的触屏设备每秒会产生60~120次触碰事件，而鼠标每秒会产生约100次事件。换句话说，输入事件具有比每秒刷新60次的屏幕更高的保真度。</p><p>如果像<code>touchmove</code>这种连续事件，以每秒120次的频率发送到主线程，相比更慢的屏幕刷新率而言，就会导致过多的命中测试和JavaScript执行。</p><p><img src="https://p2.ssl.qhimg.com/t014e27155fdb319b3e.png"></p><p>为把对主线程过多的调用降至最少，Chrome会合并（coalesce）连续触发的事件（如<code>wheel</code>、<code>mousewheel</code>、<code>mousemove</code>、<code>pointermove</code>、<code>touchmove</code>），并将它们延迟到恰好在下一次<code>requestAnimationFrame</code>之前派发。</p><p><img src="https://p4.ssl.qhimg.com/t01b28eb91d2e8dc044.png"></p><p>对于其他离散触发的事件，像<code>keydown</code>、<code>keyup</code>、<code>mouseup</code>、<code>mousedown</code>、<code>touchstart</code>和<code>touchend</code>会立即派发。</p><p>合并后的事件在多数情况下足以保证不错的用户体验。但是，在一些特殊应用场景下，比如需要基于<code>touchmove</code>事件的坐标生成轨迹的绘图应用，合并事件就会导致丢失一些坐标，影响所绘线条的平滑度。</p><p><img src="https://p0.ssl.qhimg.com/t01fc4c94f337b9fa52.png"></p><p>此时，可以使用指针事件的<code>getCoalescedEvents</code>方法，取得被合并事件的信息：</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'pointermove'</span><span class="token punctuation">,</span> event <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> events <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getCoalescedEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> event <span class="token keyword">of</span> events<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> x <span class="token operator">=</span> event<span class="token punctuation">.</span>pageX<span class="token punctuation">;</span>        <span class="token keyword">const</span> y <span class="token operator">=</span> event<span class="token punctuation">.</span>pageY<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用x和y坐标画线</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这是个小小的结尾。相信不少前端开发者早已知道给<code>&lt;script&gt;</code>标签添加<code>defer</code>、<code>async</code>属性的作用。通过阅读本文，你应该也知道了为什么在注册事件监听器时最好传入<code>passive: true</code>选项，知道了CSS的<code>will-change</code>属性会让浏览器做出不同的决策。事实上，不止上面这些，看完看懂篇文章，你甚至也会对其他关于浏览器性能优化的细节感到豁然开朗，从而对更多关于网页性能的话题会产生兴起。而这正是深入理解现代浏览器的重要意义和价值所在，因为它为我们打开了一扇大门。</p><p>原文链接：</p><ul><li><a href="https://developers.google.com/web/updates/2018/09/inside-browser-part1">https://developers.google.com/web/updates/2018/09/inside-browser-part1</a></li><li><a href="https://developers.google.com/web/updates/2018/09/inside-browser-part2">https://developers.google.com/web/updates/2018/09/inside-browser-part2</a></li><li><a href="https://developers.google.com/web/updates/2018/09/inside-browser-part3">https://developers.google.com/web/updates/2018/09/inside-browser-part3</a></li><li><a href="https://developers.google.com/web/updates/2018/09/inside-browser-part4">https://developers.google.com/web/updates/2018/09/inside-browser-part4</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端巩固</title>
      <link href="/2023/09/15/qian-duan-gong-gu/"/>
      <url>/2023/09/15/qian-duan-gong-gu/</url>
      
        <content type="html"><![CDATA[<h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> debounce <span class="token operator">=</span> <span class="token punctuation">(</span>fn<span class="token punctuation">,</span>delay<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> timeout <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 有定时器的存在 将该定时器清除</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>timeout <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>          timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>delay<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> throtte <span class="token operator">=</span> <span class="token punctuation">(</span>fn<span class="token punctuation">,</span>delay<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> falg <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token keyword">return</span>       flag <span class="token operator">=</span> <span class="token boolean">false</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span>        flag <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>delay<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="isEqual深度比较"><a href="#isEqual深度比较" class="headerlink" title="isEqual深度比较"></a>isEqual深度比较</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">null</span> <span class="token operator">!==</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">isEqual</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1.判断是不是引用类型，不是引用</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> obj1 <span class="token operator">===</span> obj2<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2.比较是否为同一个内存地址</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj1 <span class="token operator">===</span> obj2<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 3.比较 key 的数量</span>    <span class="token keyword">const</span> obj1KeysLength <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">const</span> obj2KeysLength <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj1KeysLength <span class="token operator">!==</span> obj2KeysLength<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 4.比较 value 的值</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj1<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">isEqual</span><span class="token punctuation">(</span>obj1<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> obj2<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="手写instanceof"><a href="#手写instanceof" class="headerlink" title="手写instanceof"></a>手写instanceof</h2><p>描述：instanceof运算符用来检测 constructor.prototype是否存在于参数object的原型链上</p><p>语法： object instanceof constructor</p><p>参数：object（某个实例对象）constructor（某个构造函数） 由于constructor主要存在于prototype原型对象上，故需要先找到object的原型对象 ，通过proto属性来找</p><p>因为instanceof只能检测引用类型，而基本数据类型检测出来的都是false 并且找出来的类型基本都是构造函数创建的类型，且该函数还应该有prototype原型对象，否则proto就不能指向该类</p><p>instanceof左侧的话必须是对象类型 右侧的话必须是函数且有prototype属性</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">myInstanceof</span><span class="token punctuation">(</span>L <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>R<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 先判断界限</span>  <span class="token comment" spellcheck="true">// 如果左侧不是对象的话 直接返回false</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Object</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span> <span class="token operator">!==</span> L<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>  <span class="token comment" spellcheck="true">// 右侧需要是函数且有prototype原型对象</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> R <span class="token operator">!==</span> <span class="token string">'function'</span> <span class="token operator">||</span> <span class="token operator">!</span>R<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'Right-hand side of '</span><span class="token keyword">instanceof</span><span class="token string">' is not an object'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 满足条件了就可以继续判断 获取到proto来得到原型对象</span>  <span class="token keyword">let</span> link <span class="token operator">=</span> L<span class="token punctuation">.</span>__proto__  <span class="token keyword">while</span><span class="token punctuation">(</span>link <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>link <span class="token operator">=</span> R<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token comment" spellcheck="true">// 没找到就沿着原型链查找 直到找到或者为空</span>    link <span class="token operator">=</span> link<span class="token punctuation">.</span>__proto__  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 运行到这里说明最后还是没有找到</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="map和foreach的区别"><a href="#map和foreach的区别" class="headerlink" title="map和foreach的区别"></a>map和foreach的区别</h2><p>相同点：都循环遍历数组中的每一项，匿名函数都支持三个参数，第一个是数组中的当前项item，当前项索引index，原始数组input，匿名函数中的this都是指向window，只能遍历数组。</p><p>区别：</p><p>map 有返回值（新数组），不改变原数组</p><p>foreach 没有返回值，匿名函数中的操作是对原始数组中的每一项进行修改</p><p>foreach与for（i）的区别：for i可以停止，break或者continue，但是foreach不能停止，如果要停止，需要使用throw new Error才可以</p><h2 id="统计数组中字符的出现次数并将其排序"><a href="#统计数组中字符的出现次数并将其排序" class="headerlink" title="统计数组中字符的出现次数并将其排序"></a>统计数组中字符的出现次数并将其排序</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">let</span> arrObj <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrObj<span class="token punctuation">)</span><span class="token punctuation">;</span>arrObj<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h2 id="js中的数组方法手撕"><a href="#js中的数组方法手撕" class="headerlink" title="js中的数组方法手撕"></a>js中的数组方法手撕</h2><h2 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h2><p>num -&gt; string ：num.toString()</p><h2 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h2><p>typeof 可以判断基本数据类型undefined string number boolean function</p><p>instance of 可以判断类 引用数据类型 object array </p><p>判断是否是对象</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> obj <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>是否是整型：Number.isInteger(1.00) &#x2F;&#x2F; true</p><p>获取字符串中的某一位str.charAr(index)</p><p>截取子字符串str.slice(beginIndex,endIndex)</p><h2 id="for-of-与for-in"><a href="#for-of-与for-in" class="headerlink" title="for of 与for in"></a>for of 与for in</h2><p>遍历数组使用of </p><p>遍历对象使用in</p><h2 id="js中new关键字的执行过程"><a href="#js中new关键字的执行过程" class="headerlink" title="js中new关键字的执行过程"></a>js中new关键字的执行过程</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/56c8bfe229254f669ac66ac1ae37d279~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="微信图片_20210528132147.png"></p><p>具体分为四步</p><p>1、创建一个新对象</p><p>2、将新建对象的__proto__属性指向构造函数的prototype对象</p><p>3、改变构造函数的this绑定到新对象obj，执行构造函数</p><p>4、返回新对象</p><h2 id="详述vue2和vue3之间的区别"><a href="#详述vue2和vue3之间的区别" class="headerlink" title="详述vue2和vue3之间的区别"></a>详述vue2和vue3之间的区别</h2><p>① vue2使用的是webpack形式去构建项目<br>webpack是一开始是入口文件，然后分析路由，然后模块，最后进行打包，然后告诉你，服务器准备好了可以开始干了<br>②vue3使用vite构建项目<br>先告诉你服务器准备完成，然后等你发送HTTP请求，然后是入口文件，Dynamic import（动态导入）code split point（代码分割）</p><p>最大的好处和区别就是为了让项目中一些代码文件多了以后去保存更新数据时更快能够看到实际效果，也就是所谓的（热更新）</p><p>vue3中app组件中可以没有根标签</p><p>ref使用.value进行修改操作</p><p>ref与reactive区别</p><p>ref定义的是基本数据类型<br>ref通过Object.defineProperty()的get和set实现数据劫持<br>ref操作数据.value，读取时不需要。value<br>reactive定义对象或数组数据类型<br>reactive通过Proxy实现数据劫持<br>reactive操作和读取数据不需要.value</p><p>vue2的响应式原理用Object.defineProperty的get和set进行数据劫持，从而实现响应式</p><ul><li>vue2中只有get和set方法去进行属性的读取和修改操作，当我们进行新增，删除时，页面不会实时更新</li><li>直接通过下标改数组，页面也不会实时更新</li></ul><p>vue3中响应式原理使用Proxy进行代理，使用window内置对象Reflect反射，学了Es6的语法的就知道我们在使用Proxy进行代理，好比甲方公司给出需要什么技术的前端攻城狮，让乙方去干招聘、面试等环节</p><p>Proxy可以拦截对象中任意的属性变化，当然包括读写，添加，删除等<br>Reflect对源对象属性进行操作</p><p>生命周期</p><p>vue3中区别：beforeCreate与created并没有组合式API中,setup就相当于这两个生命周期函数</p><h2 id="css特性"><a href="#css特性" class="headerlink" title="css特性"></a>css特性</h2><p>盒模型 </p><p>通过box-sizing来指定传统模型content-box或者css3模型border-box</p><p>传统盒模型 <strong>宽度和高度的计算仅考虑内容区域的尺寸。</strong></p><p>css3盒模型 <strong>宽度和高度（width和height）的计算包含了内容区域、内边距和边框的尺</strong>寸。</p><h2 id="http特性"><a href="#http特性" class="headerlink" title="http特性"></a>http特性</h2><p>http1.0缺点：服务器发送完响应，就会关闭连接，如果后面需要请求新的数据，则需要再次建立连接。</p><p>解决：客户端的请求头中使用keep-alive，服务器在发送完响应数据之后，就不会断开TCP连接了，从而达到复用同一个TCP连接的目的。</p><p>http1.1 header里面携带的内容过大，在一定程度上增加了传输的成本，并且每次请求header基本不怎么变化</p><p>http2.0：默认不再使用ASCII编码传输，改为了二进制数据，来提升传输效率。头部信息压缩 服务器主动推送数据给客户端 头部和数据部分都是二进制，且统称为帧</p><h2 id="OSI七层模型"><a href="#OSI七层模型" class="headerlink" title="OSI七层模型"></a>OSI七层模型</h2><p><a href="https://www.zhihu.com/tardis/zm/art/296670054?source_id=1005">一文看懂网络七层协议&#x2F;OSI七层模型 (zhihu.com)</a></p><h2 id="项目中遇到的难点和解决方式"><a href="#项目中遇到的难点和解决方式" class="headerlink" title="项目中遇到的难点和解决方式"></a>项目中遇到的难点和解决方式</h2><ul><li><strong>Situation</strong>：事情是在什么情况下发生，基于一个怎样的背景；</li><li><strong>Task</strong>：你是如何明确你的任务的；</li><li><strong>Action</strong>：针对这样的情况分析，你采用了什么行动方式，具体做了哪些工作内容；</li><li><strong>Result</strong>：结果怎样，带来了什么价值，在整个过程中你学到了什么，有什么新的体会。</li></ul><p>登录鉴权</p><p>动态路由 权限管理</p><p>webpack配置或者vite配置 </p><p>script中的defer属性：立即下载 延迟执行</p><p>菜单权限用动态添加路由addRoutes解决。</p><p>有一个公共路由，登录后获取权限，得到需要动态添加的路由表，把路由添加到router里。实现方式是提前定义好完整的路由表，然后跟后台传输的权限做对比，过滤出一个路由权限表，再用addRoutes动态添加到路由里。然后根据过滤出的路由权限表渲染侧边栏。</p><p>连接http注意url的写法以及自己api地址是否正确</p><p>难点：</p><p>对自己的功能还有模块有一个整体的完整的了解，</p><h2 id="笔试题目"><a href="#笔试题目" class="headerlink" title="笔试题目"></a>笔试题目</h2><h3 id="url解析"><a href="#url解析" class="headerlink" title="url解析"></a>url解析</h3><p>需要了解常见的url组成</p><img src='https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/Snipaste_2023-10-16_10-11-27.jpg' align='left' width='600px'><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 直接使用js中的url方法 功能很强大，但是IE的支持不太好</span><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">'https://juejin.cn/post/6910810031264890893'</span><span class="token keyword">const</span> parseUrl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// hash host hostname href origin password prot protocol search等属性都可以拿到 </span><span class="token comment" spellcheck="true">// 但是还需要对search进行解析 search = "?p1=v1&amp;p2=v2"</span><span class="token keyword">const</span> search <span class="token operator">=</span> parseUrl<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">const</span> pairs <span class="token operator">=</span> search <span class="token operator">?</span> search<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>pairs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span>value<span class="token punctuation">]</span> <span class="token operator">=</span> pairs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span>  query<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pairs<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="整数反转"><a href="#整数反转" class="headerlink" title="整数反转"></a>整数反转</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param &amp;#123;number&amp;#125; x * @return &amp;#123;number&amp;#125; */</span><span class="token keyword">var</span> reverse <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 解法一 反转字符串 </span>    <span class="token comment" spellcheck="true">// 将数字转换成字符串然后进行反转reverse()然后连接join('') 期间需要判断是否是负数</span>     <span class="token keyword">let</span> str <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">let</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断是否有-号</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 没有-号，则直接翻转连接即可</span>         <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">>=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> num<span class="token operator">&lt;=</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>             <span class="token keyword">return</span> num<span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span>              <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 有-号 删除-号翻转连接</span>     <span class="token keyword">delete</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>     <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">>=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">&lt;=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">*</span>num<span class="token punctuation">;</span>     <span class="token keyword">else</span>          <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 上述简便写法</span>     <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// x为整数</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         res <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         x <span class="token operator">=</span> <span class="token operator">-</span>x<span class="token punctuation">;</span>         res <span class="token operator">=</span> <span class="token operator">-</span><span class="token function">String</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">>=</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">31</span> <span class="token operator">&amp;&amp;</span> res <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> res<span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 解法二</span>    <span class="token comment" spellcheck="true">// 采用商与余数的形式</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这里是直接将得到的余数进行拼接</span>        res <span class="token operator">=</span> res <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">31</span> <span class="token operator">||</span> res <span class="token operator">></span> <span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ~~ 按位取反再取反 对于整数的话取反还是自身</span>        <span class="token comment" spellcheck="true">// 对于小数，等于舍去小数位 相当于正数向下取整 </span>        <span class="token comment" spellcheck="true">// 负数向上取整</span>        x <span class="token operator">=</span> <span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span>x <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><p>一般去重 数组中没有复杂的对象结构</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 普通数组去重</span>  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>newArr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>      newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 如果数组中包含对象等类型</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'meili'</span><span class="token punctuation">,</span><span class="token string">'meili'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 采用stringify进行去重 map</span><span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>arr2<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>map类型</p><h3 id="indexOf方法"><a href="#indexOf方法" class="headerlink" title="indexOf方法"></a>indexOf方法</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// indexof手撕</span><span class="token comment" spellcheck="true">// 思路1：正则匹配找到字符串中的字符</span><span class="token comment" spellcheck="true">// 参数解释: 从str字符串中寻找 target表示要找的字符 start表示从下标为start开始查找</span><span class="token keyword">function</span> <span class="token function">myIndexOf</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>target<span class="token punctuation">,</span>start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`$&amp;#123;target&amp;#125;`</span></span><span class="token punctuation">,</span><span class="token string">'ig'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 通过lastIndex设置开始匹配的位置 只有flag为g或者y时才会有效果</span>    regex<span class="token punctuation">.</span>lastIndex <span class="token operator">=</span> start    <span class="token comment" spellcheck="true">// exec主要配合捕获组使用,返回的是Array实例,包含index(字符串匹配模式的起始位置)和input(要查找的字符串)两个属性</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>    <span class="token keyword">return</span> result <span class="token operator">?</span> result<span class="token punctuation">.</span>index <span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'china has a very beautiful city'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">myIndexOf</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token string">'city'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 思路2: 遍历匹配 找到数组中的某个值</span><span class="token keyword">function</span> myIndexOf2 <span class="token punctuation">(</span>arr<span class="token punctuation">,</span>target<span class="token punctuation">,</span>start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ant'</span><span class="token punctuation">,</span><span class="token string">'bison'</span><span class="token punctuation">,</span><span class="token string">'camel'</span><span class="token punctuation">,</span><span class="token string">'duck'</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">myIndexOf2</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token string">'biso'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 最后整合一下就是将数组和字符串类型进行区分 调用不同的indexOf即可</span><span class="token keyword">function</span> <span class="token function">finalIndexOf</span><span class="token punctuation">(</span>items<span class="token punctuation">,</span>item<span class="token punctuation">,</span>fromIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断是否是数组</span>    <span class="token keyword">let</span> isArray <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断是否是字符串 ??</span>    <span class="token keyword">let</span> isString <span class="token operator">=</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'[object String]'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isArray<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token function">myIndexOf</span><span class="token punctuation">(</span>items<span class="token punctuation">,</span>item<span class="token punctuation">,</span>fromIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token function">myIndexOf2</span><span class="token punctuation">(</span>items<span class="token punctuation">,</span>item<span class="token punctuation">,</span>fromIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="纯CSS实现三角形"><a href="#纯CSS实现三角形" class="headerlink" title="纯CSS实现三角形"></a>纯CSS实现三角形</h3><pre class=" language-html"><code class="language-html">// 第1种方法 border<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span>triangle</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token number">.</span>triangle &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">100</span>px solid skyblue<span class="token punctuation">;</span>      <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">100</span>px solid transparent<span class="token punctuation">;</span>      <span class="token property">border-right</span><span class="token punctuation">:</span> <span class="token number">100</span>px solid transparent<span class="token punctuation">;</span>      <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token number">100</span>px solid transparent<span class="token punctuation">;</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>实现一个简单的js深拷贝</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 使用stringfy</span><span class="token keyword">function</span> deepClone <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h2><p>CSS可以继承的样式</p><p>字体系列属性：</p><p>font font-weight font-family…</p><p>文本系列属性：</p><p>text-indent text-align line-height color…</p><p>元素可见性：visibility</p><p>表格布局属性：caption-side。。。</p><p>不可继承的属性：</p><p>display vertical-align text-decoration border</p><p>盒模型属性：宽度、高度、内外边距等</p><p>背景属性：背景图片、颜色、位置等</p><p>定位属性：浮动、position等</p><h2 id="八种排序算法的性能与手撕"><a href="#八种排序算法的性能与手撕" class="headerlink" title="八种排序算法的性能与手撕"></a>八种排序算法的性能与手撕</h2><h2 id="得到数组最大值"><a href="#得到数组最大值" class="headerlink" title="得到数组最大值"></a>得到数组最大值</h2><p>var arr &#x3D; [a,b,c,d]，数组arr中每一项都是一个整数，下面得到其中最大整数语句</p><p>Math.max(arr[0],arr[1],arr[2],arr[3]) 里面参数是number类型 不能传入数组</p><p>Math.max.call(Math,arr[0],arr[1],arr[2],arr[3]) call里面可以传入多个参数</p><p>Math.max.apply(Math,arr) apply里面传入的是数组</p><h2 id="Promise实例方法与静态方法"><a href="#Promise实例方法与静态方法" class="headerlink" title="Promise实例方法与静态方法"></a>Promise实例方法与静态方法</h2><p>实例方法：</p><p>Promise.prototype.then()</p><p>Promise.prototype.catch()</p><p>Promise.prototype.finally()</p><p>静态方法：</p><p>Promise.all()</p><p>Promise.race()</p><p>Promise.allSettled()</p><p>any()</p><p>resolve()</p><p>reject()</p><h2 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h2><p>元素个数 头尾指针 front rear</p><p>（rear-front + m）% m</p><h2 id="操作系统复习"><a href="#操作系统复习" class="headerlink" title="操作系统复习"></a>操作系统复习</h2><h2 id="margin塌陷"><a href="#margin塌陷" class="headerlink" title="margin塌陷"></a>margin塌陷</h2><p>现象：父元素和子元素都在垂直方向上设置了偏离距离，但是子元素的设置没有起作用，两者的顶部紧挨着，相当于父元素的顶部塌陷下来了，所以叫做margin塌陷。</p><p>总结：父子嵌套的元素垂直方向的margin取最大值</p><p>解决：触发BFC </p><p>方法：</p><ul><li><p>float属性为left&#x2F;right （浮动 父或子）</p></li><li><p>overflow属性为hidden scroll auto等 （父 将溢出部分隐藏显示）</p></li><li><p>position为absolute fixed（父）</p></li><li><p>display为inline-block table-cell等（父或子）</p></li><li><p>利用伪元素给父元素前面添加一个空元素</p></li></ul><h2 id="margin合并"><a href="#margin合并" class="headerlink" title="margin合并"></a>margin合并</h2><p>兄弟之间垂直方向上的margin进行了合并，虽然两者都设置了margin的大小，但是显示的是最大值</p><p>解决：触发bfc</p><h2 id="浏览器重排与重绘"><a href="#浏览器重排与重绘" class="headerlink" title="浏览器重排与重绘"></a>浏览器重排与重绘</h2><p>浏览器的工作流程：输入url或者字符串，如果是url那么就会涉及到DNS解析（本地缓存映射或者去DNS服务器上寻找），如果是字符串，代表了搜索查询，返回的可能是html文件或者zip等压缩文件，综上两种情况，如果是html那就会开启渲染进程，渲染进程就是将img html js css等文件转化为用户可以交互的web网页，首先进行<strong>html解析</strong>，会构建DOM树，然后<strong>加载html文件中的一些子资源</strong>，例如css文件或者js文件，在解析过程中，如果遇到script标签，它会阻塞html页面的解析，因为js可以调用document.write方法来修改文件，所以如果不用该API的script标签可以添加上async或者defer，使得浏览器可以异步执行js代码。之后解析css文件计算每个DOM节点的样式，根据CSS选择器获取每个节点是继承样式默认样式还是自定义样式，最后在开发工具中可以查看每个节点的样式信息。布局（重排、回流），计算元素节点之间的位置，包括它们的大小、坐标信息等，与DOM树结构相似，但是只包含页面中可见元素的信息，display：none元素不显示，生成布局树。绘制（重绘）：确定绘制的顺序，决定先画什么或者后画什么，因为渲染是流水线进程，前一道工序的输出是下一道工序的输入，所以如果布局树变化，相应的绘制记录也要重新生成。对应着重排一定会重绘，但是重绘不一定会发生重排。</p><p>重排：重新排列布局，打碎重组，对DOM的修改引发了DOM几何尺寸的变化（宽、高隐藏元素等），浏览器需要重新计算元素的几何属性。</p><p>js，css，html加载顺序：<a href="https://blog.csdn.net/mocas_wang/article/details/108290609">js,css,html加载顺序(DOM执行）_html script执行顺序-CSDN博客</a></p><h2 id="setTimeout与promise的执行顺序"><a href="#setTimeout与promise的执行顺序" class="headerlink" title="setTimeout与promise的执行顺序"></a>setTimeout与promise的执行顺序</h2><p>先执行promise微任务然后执行setTimeout宏任务</p><h2 id="ES5和ES6中类定义的区别"><a href="#ES5和ES6中类定义的区别" class="headerlink" title="ES5和ES6中类定义的区别"></a>ES5和ES6中类定义的区别</h2><h2 id="前端数据安全"><a href="#前端数据安全" class="headerlink" title="前端数据安全"></a>前端数据安全</h2><h4 id="https"><a href="#https" class="headerlink" title="https"></a>https</h4><p>使用https，它是一种加密通信协议，可以确保数据在传输过程中不被窃取</p><h4 id="输入验证"><a href="#输入验证" class="headerlink" title="输入验证"></a>输入验证</h4><p>前后端都需要进行输入验证</p><h4 id="防止XSS攻击"><a href="#防止XSS攻击" class="headerlink" title="防止XSS攻击"></a>防止XSS攻击</h4><p>跨站脚本（XSS）攻击是一种黑客通过植入恶意脚本来窃取用户数据的方式，要防止XSS攻击，确保应用程序不会直接将用户提供的数据插入到HTML中</p><h4 id="跨站点请求伪造（CSRF）防护"><a href="#跨站点请求伪造（CSRF）防护" class="headerlink" title="跨站点请求伪造（CSRF）防护"></a>跨站点请求伪造（CSRF）防护</h4><h4 id="安全的存储和传输"><a href="#安全的存储和传输" class="headerlink" title="安全的存储和传输"></a>安全的存储和传输</h4><h2 id="函数扩展（rest参数-amp-箭头函数"><a href="#函数扩展（rest参数-amp-箭头函数" class="headerlink" title="函数扩展（rest参数&amp;箭头函数"></a>函数扩展（rest参数&amp;箭头函数</h2><h2 id="link和-import的区别引发的CSS渲染杂谈"><a href="#link和-import的区别引发的CSS渲染杂谈" class="headerlink" title="link和@import的区别引发的CSS渲染杂谈"></a>link和@import的区别引发的CSS渲染杂谈</h2><p>1、link属于html标签，@import在css中使用表示导入外部样式表</p><p>2、页面被加载时，link会同时被加载，而@import引用的css会等到页面被加载完成之后再加载</p><p>3、import只在IE5以上才能够被识别，而link是html标签，无兼容问题</p><p>4、link方式的样式权重高于@import的权重</p><p>5、link支持使用javascript改变样式，后者不可以</p><h2 id="为什么利用多个域名来存储网站资源更有效"><a href="#为什么利用多个域名来存储网站资源更有效" class="headerlink" title="为什么利用多个域名来存储网站资源更有效"></a>为什么利用多个域名来存储网站资源更有效</h2><h2 id="CDN缓存更加方便"><a href="#CDN缓存更加方便" class="headerlink" title="CDN缓存更加方便"></a>CDN缓存更加方便</h2><h2 id="BOM和DOM的区别"><a href="#BOM和DOM的区别" class="headerlink" title="BOM和DOM的区别"></a>BOM和DOM的区别</h2><p>1、BOM是浏览器对象模型</p><p>提供了独立于内容而与浏览器窗口进行交互的对象。描述了与浏览器进行交互的方法和接口，<br>可以对浏览器窗口进行访问和操作，譬如可以弹出新的窗口，改变状态栏中的文本，<br>对Cookie的支持，IE还扩展了BOM，加入了ActiveXObject类，可以通过js脚本实例化<br>ActiveX对象等等）</p><p>2、DOM是文档对象模型</p><p>DOM是针对XML的基于树的API。描述了处理网页内容的方法和接口，是HTML和XML的API，<br>DOM把整个页面规划成由节点层级构成的文档。DOM本身是与语言无关的API，它并不与Java，<br>JavaScript或其他语言绑定。</p><h2 id="外边距重叠"><a href="#外边距重叠" class="headerlink" title="外边距重叠"></a>外边距重叠</h2><p>也叫做margin合并</p><p>相邻外边距都是正数时，折叠结果是它们之间较大的值</p><p>都是负数时，折叠结果是两者绝对值的较大值</p><p>一正一负，折叠结果是两者相加的和</p><h2 id="js中改变原数组的方法"><a href="#js中改变原数组的方法" class="headerlink" title="js中改变原数组的方法"></a>js中改变原数组的方法</h2><p>reverse、sort、push、unshift、pop、shift、splice（理解为替换）</p><p>不改变原数组的方法</p><p>concat、slice、substring、substr、reduce、map、filter、</p><h2 id="js面向对象以及class类的继承"><a href="#js面向对象以及class类的继承" class="headerlink" title="js面向对象以及class类的继承"></a>js面向对象以及class类的继承</h2><p>ps：初始化写在constructor中，然后函数前面不用带function 直接写名字就可</p><p>eg</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>grade<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>grade <span class="token operator">=</span> grade    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">...</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>行测模拟题</title>
      <link href="/2023/09/14/xing-ce-mo-ni-ti/"/>
      <url>/2023/09/14/xing-ce-mo-ni-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="语言理解题"><a href="#语言理解题" class="headerlink" title="语言理解题"></a>语言理解题</h2><p>技巧：先读问题 圈画主题词</p><p>找出语句中的关键词信息（因此 所以 转折句 而 但 像是并列句的话不用看，因为它们表达意思含义很可能相同）</p><p>如果有时候句子中隐藏了语句结构，就需要精读，动手圈画主题词可以让思路更加清晰。</p><p>成语类型：</p><p>伯仲之间：形容技术层面 </p><p>泾渭分明：形容河流 </p><p>差强人意：还算满意 属于褒义词</p><p>瓜田李下：容易引起嫌疑的地方</p><p>绘声绘色：形容描写、叙事生动逼真</p><p>登堂入室：学问或者技能由浅入深，逐步达到很高的水平</p><p>如坐春风：同道德高尚、学士渊博的人相处，受其熏陶</p><p>走马观花：观察事务或了解情况不深入细致</p><p>一文不名：一文钱都没有 形容极为贫穷</p><p>求全责备：对人对事要求完美无缺</p><p>身无长物：身边没有多余的东西，形容贫困简朴</p><h2 id="数字找规律"><a href="#数字找规律" class="headerlink" title="数字找规律"></a>数字找规律</h2><p>两项之和 &#x3D; 第三项</p><p>两项之和 * 2 &#x3D; 第三项</p><p>若前后没有相加减关系，则考虑位置关系</p><h2 id="图表分析题"><a href="#图表分析题" class="headerlink" title="图表分析题"></a>图表分析题</h2><p>对称性：前4个图形都是1 2 3 4的对称图形，接下来就是5的对称图形</p><p>去异存同：第一个图形与第二个图形重合，相同部分余下，其它丢掉</p><p>圈外与圈内可以抵消 横着看 竖着看</p><p>顺时针旋转 逆时针旋转 找规律</p><p>异色相加为黑，同色相加为白</p><p>看笔画数 </p><p>交点数 （每个图形都有5个交点）内部图形与外部图形只有一个交点</p><p>求同存异</p><p>外部图形线段数与内部圆圈数量之差为2</p><p>重心位置</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>js深入-ife.baidu.com</title>
      <link href="/2023/09/13/js-shen-ru-ife-baidu-com/"/>
      <url>/2023/09/13/js-shen-ru-ife-baidu-com/</url>
      
        <content type="html"><![CDATA[<h2 id="闭包和IIFE"><a href="#闭包和IIFE" class="headerlink" title="闭包和IIFE"></a>闭包和IIFE</h2><ul><li>高阶函数</li></ul><p>参数或者返回值为函数的函数</p><ul><li>头等函数</li></ul><p>当一门编程语言的函数可以被当作变量一样用时，则称这门语言拥有<strong>头等函数</strong>。在这门语言中，函数可以被当作参数传递给其他函数，可以作为另一个函数的返回值，还可以被赋值给一个变量。也可以将函数理解为编程语言中的一等公民。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/First-class_Function">https://developer.mozilla.org/zh-CN/docs/Glossary/First-class_Function</a></p><ul><li>回调函数</li></ul><p>作为参数传递给另一个函数的函数被称为回调函数</p><p>特点 </p><p>不会立即执行 也要通过()运算符调用才会执行，是个闭包，能够访问到外层定义的变量</p><p>回调函数调用时this的执行上下文并不是回调函数定义时的那个上下文，而是调用它的函数所在的上下文。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 关于回调函数this的指向问题</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    sum<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    add<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">callback</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span> obj<span class="token punctuation">.</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//=>0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//=>3 回调函数add调用是在全局环境下，因此this指向的是window，所以sum的值是赋值给windows的。</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 为上述add函数添加 指向的this对象</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> callbackObj<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    callback<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>callbackObj<span class="token punctuation">,</span> <span class="token punctuation">[</span> num1<span class="token punctuation">,</span> num2 <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span> obj<span class="token punctuation">,</span> obj<span class="token punctuation">.</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//=>3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//=>undefined</span></code></pre><p>数组原型上的一些方法</p><p>Array.prototype.map() 需要进行返回</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> item <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>Array.prototype.filter()</p><p>创建给定数组一部分的浅拷贝，其包含通过所提供函数实现的测试的所有元素</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'spray'</span><span class="token punctuation">,</span> <span class="token string">'limit'</span><span class="token punctuation">,</span> <span class="token string">'elite'</span><span class="token punctuation">,</span> <span class="token string">'exuberant'</span><span class="token punctuation">,</span> <span class="token string">'destruction'</span><span class="token punctuation">,</span> <span class="token string">'present'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> result <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> word<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Array.prototype.forEach()</p><p>对数组的每个元素执行一次给定的函数 </p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array1<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>ps：</p><p>这里插入一下js判断数据类型的8中方式</p><p>typeof 基本数据类型和引用数据类型 能识别number string boolean undefined function NaN（是number类型），array object null都会识别为object</p><p>instanceof 只能判断引用数据 arr instanceof Array</p><p>手写foreach函数</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// foreach函数手写</span><span class="token comment" spellcheck="true">// https://juejin.cn/post/7036318714723041310</span><span class="token comment" spellcheck="true">// 第一步： foreach函数有两个参数 第一个是函数（参数为数组每一项，数组下标，数组本身） 第二个this的指向</span><span class="token comment" spellcheck="true">// 第二步： 判断是否有this指向的改变</span><span class="token comment" spellcheck="true">// 第三步： 判断第一个参数是否为函数 不是报错 </span><span class="token comment" spellcheck="true">// 第四步： 遍历循环数组 使用call改变this的指向 依次传入数组每一项，数组下标，数组本身    </span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myforEach <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> context <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> window  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> fn <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'parameter1 is not a function'</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>使用闭包实现数组之间的合并</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 使用闭包实现非递减数组的合并功能</span><span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// your code here</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>arr2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token punctuation">,</span><span class="token operator">...</span>arr2<span class="token punctuation">]</span>    <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> a<span class="token operator">-</span>b<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//测试用例</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// =>[1,2,4,5,8]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// =>[1,2,6,9]</span></code></pre><h2 id="CSS自定义属性（变量）"><a href="#CSS自定义属性（变量）" class="headerlink" title="CSS自定义属性（变量）"></a>CSS自定义属性（变量）</h2><p>CSS自定义属性（CSS变量）的值可以在整个文档中重复使用，由var来获取值</p><pre><code>element&#123;    --main-bg-color: brown&#125;// 获取时color: var(--mian-bg-color);</code></pre><p>详情见MDN</p><h2 id="笔试题目总结"><a href="#笔试题目总结" class="headerlink" title="笔试题目总结"></a>笔试题目总结</h2><h3 id="提高当前盒子的层级"><a href="#提高当前盒子的层级" class="headerlink" title="提高当前盒子的层级"></a>提高当前盒子的层级</h3><p>z-index：默认值为0，越大层级性越高，负数表示降低层级性</p><p>有定位比没有定位的盒子的层级性更高</p><h3 id="客户端与服务器端渲染区别"><a href="#客户端与服务器端渲染区别" class="headerlink" title="客户端与服务器端渲染区别"></a>客户端与服务器端渲染区别</h3><p><a href="https://juejin.cn/post/7087416028434530318">客户端渲染和服务端渲染的区别 - 掘金 (juejin.cn)</a></p><h3 id="try…-catch捕获错误"><a href="#try…-catch捕获错误" class="headerlink" title="try… catch捕获错误"></a>try… catch捕获错误</h3><p>setTimeout之类的是宏任务，promise是微任务，微任务在宏任务之前执行，因此先执行promise，之后执行setTimeout。</p><p>try catch捕获不到异步任务里面的错误，因为事件循环导致异步代码执行时执行栈与try catch所在的执行栈不一样了，它们的上下文context已经完全不同了。</p><p>同理，对于promise的then中的回调函数try catch也是捕获不到的，因此promise机制自己提供了一个catch方法捕获异步回调中的错误。</p><p>但是对于async await可以使用try catch进行错误捕获，这里如果需要理解可以参考 深刻理解async&#x2F;await</p><h3 id="JS中的几种模块化规范"><a href="#JS中的几种模块化规范" class="headerlink" title="JS中的几种模块化规范"></a>JS中的几种模块化规范</h3><p>CommonJS AMD CMD ESM（ES6 Module）</p><h3 id="JS数据类型"><a href="#JS数据类型" class="headerlink" title="JS数据类型"></a>JS数据类型</h3><p>Map 简单映射 保存一组键值对，键可以是原始值，也可以是引用值</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 使用 </span><span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'zyyy'</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// zyyy</span>map<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span></code></pre><p>Set类型 集合是一组不重复的元素，集合中只有键，没有与键关联的值</p><pre><code>// 使用let set = new Set();set.add(&#39;name&#39;);set.has(&#39;name&#39;); // trueset.delete(&#39;name&#39;);</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs</title>
      <link href="/2023/09/02/nodejs/"/>
      <url>/2023/09/02/nodejs/</url>
      
        <content type="html"><![CDATA[<p> Nodejs内容</p><p>博客笔记：<a href="https://blog.dselegent.cf/back_end/nodeJs/01.html">01 【nodejs简介】 | dselegent-blog</a></p><p>项目：笔记本</p><p>开发过程：</p><h4 id="基本结构搭建"><a href="#基本结构搭建" class="headerlink" title="基本结构搭建"></a>基本结构搭建</h4><p>1、express -e accounts</p><p>2、修改package.json 将node修改成nodemon（可以自动重启）</p><p>3、app.js中修改路由 在indexRouter路由界面中添加</p><pre><code>// routes\index.jsvar express = require(&#39;express&#39;);var router = express.Router();/* 记账本列表 */router.get(&#39;/account&#39;, function(req, res, next) &#123;  res.send(&#39;账本列表&#39;)&#125;);// 添加记录router.get(&#39;/account/create&#39;,function(req, res, next) &#123;  res.send(&#39;添加记录&#39;)&#125;);module.exports = router;</code></pre><h4 id="相应静态网页"><a href="#相应静态网页" class="headerlink" title="相应静态网页"></a>相应静态网页</h4><p>app.js中渲染出index.html页面</p><pre><code>/* 记账本列表 */router.get(&#39;/account&#39;, function(req, res, next) &#123;  // 渲染模板  res.render(&#39;list&#39;)&#125;);</code></pre><p>添加list页面</p><pre class=" language-html"><code class="language-html">// views\list.ejs<span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span>      <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.css<span class="token punctuation">"</span></span>      <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span>    <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">      label &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token property">font-weight</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>      &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>      <span class="token number">.</span>panel-body <span class="token number">.</span>glyphicon-remove&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>      &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>      <span class="token number">.</span><span class="token property">panel-body</span><span class="token punctuation">:</span>hover <span class="token number">.</span>glyphicon-remove&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span> inline-block      &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-xs-12 col-lg-8 col-lg-offset-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>记账本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accounts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel panel-danger<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel-heading<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2023-04-05<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel-body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-xs-6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>抽烟只抽煊赫门，一生只爱一个人<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-xs-2 text-center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>label label-warning<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>支出<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-xs-2 text-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>25 元<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-xs-2 text-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span>                    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>glyphicon glyphicon-remove<span class="token punctuation">"</span></span>                    <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>                  <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel panel-success<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel-heading<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2023-04-15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel-body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-xs-6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3 月份发工资<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-xs-2 text-center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>label label-success<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>收入<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-xs-2 text-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4396 元<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-xs-2 text-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span>                    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>glyphicon glyphicon-remove<span class="token punctuation">"</span></span>                    <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>                  <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>同样添加记录页面也这样渲染出来</p><p>ps：在添加记录页面时bug：css和js文件放置在public文件夹下，但是通过相对路径引入时会收到页面url的影响，路径变化会导致相对路径变化，导致它不确定，所有改成绝对路径，它会与域名进行一个拼接。</p><h4 id="获取表单数据"><a href="#获取表单数据" class="headerlink" title="获取表单数据"></a>获取表单数据</h4><p>在create.js中的表单项中添加name属性，form上添加action属性’&#x2F;account’ 和method属性 post</p><p>同时在index.js中添加新增记录的跳转</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 新增记录</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/account'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 获取请求体数据</span>  <span class="token comment" spellcheck="true">// 这里打印出来是在控制台下打印 而不是在浏览器中打印</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'新增记录'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h4 id="lowdb介绍与使用"><a href="#lowdb介绍与使用" class="headerlink" title="lowdb介绍与使用"></a>lowdb介绍与使用</h4><p>lowdb存储数据</p><p>npm官网：</p><p><a href="https://www.npmjs.com/package/lowdb/v/1.0.0">lowdb - npm (npmjs.com)</a></p><p>主要安装的是<a href="mailto:&#108;&#111;&#119;&#100;&#x62;&#x40;&#49;&#46;&#48;&#46;&#48;">&#108;&#111;&#119;&#100;&#x62;&#x40;&#49;&#46;&#48;&#46;&#48;</a>版本</p><p>对数据的操作</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// test\lowdb.js</span><span class="token comment" spellcheck="true">// 导入lowdb</span><span class="token keyword">const</span> low <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'lowdb'</span><span class="token punctuation">)</span><span class="token keyword">const</span> FileSync <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'lowdb/adapters/FileSync'</span><span class="token punctuation">)</span><span class="token keyword">const</span> adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileSync</span><span class="token punctuation">(</span><span class="token string">'db.json'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 获取db对象</span><span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token function">low</span><span class="token punctuation">(</span>adapter<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 初始化数据</span><span class="token comment" spellcheck="true">// db.defaults(&amp;#123; posts: [], user:&amp;#123;&amp;#125; &amp;#125;).write()</span><span class="token comment" spellcheck="true">// 写入数据</span><span class="token comment" spellcheck="true">// db.get('posts').push(&amp;#123;id:1,title:'nice'&amp;#125;).write()</span><span class="token comment" spellcheck="true">// db.get('posts').push(&amp;#123;id:2,title:'trip'&amp;#125;).write()</span><span class="token comment" spellcheck="true">// 获取数据</span><span class="token comment" spellcheck="true">// console.log(db.get('posts').value())</span><span class="token comment" spellcheck="true">// 删除数据</span><span class="token comment" spellcheck="true">// let res = db.get('posts').remove(&amp;#123;id: 1&amp;#125;).write()</span><span class="token comment" spellcheck="true">// console.log(res);</span><span class="token comment" spellcheck="true">// 更新数据</span><span class="token keyword">let</span> res <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'posts'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>res<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>title<span class="token punctuation">:</span> <span class="token string">'nihao!!'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>执行代码：控制台输入</p><p>PS D:\accounts\test&gt; node lowdb.js</p><h4 id="保存账单信息"><a href="#保存账单信息" class="headerlink" title="保存账单信息"></a>保存账单信息</h4><p>使用lowdb版本</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// routes\index.js</span><span class="token comment" spellcheck="true">// 导入lowdb</span><span class="token keyword">const</span> low <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'lowdb'</span><span class="token punctuation">)</span><span class="token keyword">const</span> FileSync <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'lowdb/adapters/FileSync'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 这里一定要注意生成的db数据的位置 否则容易报错</span><span class="token keyword">const</span> adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileSync</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">'/../data/db.json'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 获取db对象</span><span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token function">low</span><span class="token punctuation">(</span>adapter<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 新增记录</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/account'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 获取请求体数据</span>  <span class="token comment" spellcheck="true">// 这里打印出来是在控制台下打印 而不是在浏览器中打印</span>  <span class="token comment" spellcheck="true">// console.log(req.body);</span>  <span class="token comment" spellcheck="true">// 生成id</span>  <span class="token keyword">let</span> id <span class="token operator">=</span> shortId<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'新增记录'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 将获取到的记录写入到db.json中</span>  db<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'accounts'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>id<span class="token punctuation">:</span>id<span class="token punctuation">,</span><span class="token operator">...</span>req<span class="token punctuation">.</span>body<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>ps: 这里使用了shortid来表示每条账单的id，需要安装第三方库</p><p>npm i shortid</p><h4 id="完善成功提醒"><a href="#完善成功提醒" class="headerlink" title="完善成功提醒"></a>完善成功提醒</h4><p>添加success页面，成功了之后渲染 </p><p>添加跳转到首页的连接</p><pre class=" language-html"><code class="language-html">// views\success.ejs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>h-50<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>alert alert-success<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>alert<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>:) &lt;%= msg %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> url %<span class="token punctuation">></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击跳转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// routes\index.js</span><span class="token comment" spellcheck="true">// 生成提示</span>  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>msg<span class="token punctuation">:</span> <span class="token string">'添加成功哦！！'</span><span class="token punctuation">,</span> url<span class="token punctuation">:</span> <span class="token string">'/account'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h4 id="账单列表"><a href="#账单列表" class="headerlink" title="账单列表"></a>账单列表</h4><p>获取到accounts数据之后主要在页面上进行显示 那么需要在模板上进行forEach展示 </p><pre class=" language-html"><code class="language-html">// views\list.ejs// 注意这里 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>的使用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accounts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&lt;% accounts.forEach(item => <span class="token entity" title="&#123;">&amp;#123;</span> %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel &lt;%<span class="token punctuation">=</span> item.type <span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>-1<span class="token punctuation">'</span> ? <span class="token punctuation">'</span>panel-danger<span class="token punctuation">'</span> : <span class="token punctuation">'</span>panel-success<span class="token punctuation">'</span> %<span class="token punctuation">></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel-heading<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&lt;%= item.time%><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel-body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-xs-6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&lt;%= item.title%><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-xs-2 text-center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>label &lt;%<span class="token punctuation">=</span> item.type <span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>-1<span class="token punctuation">'</span> ? <span class="token punctuation">'</span>label-warning<span class="token punctuation">'</span> : <span class="token punctuation">'</span>label-success<span class="token punctuation">'</span> %<span class="token punctuation">></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span> &lt;%= item.type === '-1' ? '支出' : '收入' %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-xs-2 text-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&lt;%= item.account%>元<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-xs-2 text-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span>        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>glyphicon glyphicon-remove<span class="token punctuation">"</span></span>        <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>      <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">&amp;#125;)</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h4 id="删除账单"><a href="#删除账单" class="headerlink" title="删除账单"></a>删除账单</h4><p>添加删除路由</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// routes\index.js</span><span class="token comment" spellcheck="true">// 删除记录</span><span class="token comment" spellcheck="true">// 使用params的参数写法</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/account/:id'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> id <span class="token operator">=</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">;</span>  db<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'accounts'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>id<span class="token punctuation">:</span>id<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>msg<span class="token punctuation">:</span> <span class="token string">'删除成功哦！！'</span><span class="token punctuation">,</span> url<span class="token punctuation">:</span> <span class="token string">'/account'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>在模板上的x添加跳转按钮 即点击就跳转到删除路由中</p><pre class=" language-html"><code class="language-html">// views\list.ejs// 给span标签包裹上一个a标签即可<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/account/&lt;%<span class="token punctuation">=</span>item.id%<span class="token punctuation">></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span>      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>glyphicon glyphicon-remove<span class="token punctuation">"</span></span>      <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><h4 id="结合数据库"><a href="#结合数据库" class="headerlink" title="结合数据库"></a>结合数据库</h4><p>使用mongoose连接mongodb数据库</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// connectMongodb.js 只是练习使用与正式项目中的连接有差别</span><span class="token comment" spellcheck="true">// 1、安装mongoose</span><span class="token comment" spellcheck="true">// npm i mongoose</span><span class="token comment" spellcheck="true">// 2、导入</span><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongoose'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3、连接mongodb服务</span>mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">'mongodb://127.0.0.1:27017/admin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 4、设置回调 不用on 推荐用once 只执行一次</span>mongoose<span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'连接成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>mongoose<span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'连接失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>mongoose<span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'close'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'连接关闭'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>运行时：node connectMongodb.js </p><p>拿进数据库的基本操作</p><p>在入口文件中连接数据库</p><pre><code>// bin\www// 导入db函数const db = require(&#39;../db/db.js&#39;);// 调用db函数 将原来所有的内容包裹在下方回调函数中// 含义为：连接上了数据库才能进行项目的运行db(()=&gt;&#123; &#125;)</code></pre><h4 id="创建模型文件"><a href="#创建模型文件" class="headerlink" title="创建模型文件"></a>创建模型文件</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// models\AccountModel.js</span><span class="token comment" spellcheck="true">//导入 mongoose</span><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongoose'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建文档的结构对象</span><span class="token comment" spellcheck="true">//设置集合中文档的属性以及属性值的类型</span><span class="token keyword">let</span> AccountSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mongoose<span class="token punctuation">.</span>Schema</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//标题</span>  title<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>    required<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//时间</span>  time<span class="token punctuation">:</span> Date<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//类型</span>  type<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    type<span class="token punctuation">:</span> Number<span class="token punctuation">,</span>    <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//金额</span>  account<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    type<span class="token punctuation">:</span> Number<span class="token punctuation">,</span>    required<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//备注</span>  remarks<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    type<span class="token punctuation">:</span> String   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="插入数据库"><a href="#插入数据库" class="headerlink" title="插入数据库"></a>插入数据库</h4><pre><code>// routes\index.js// 使用moment将string类型转换成Date类型const moment = require(&#39;moment&#39;);const AccountModel = require(&#39;../models/AccountModel&#39;)// 现在要使用promise的写法const result = AccountModel.create(&#123;    ...req.body,    time: moment(req.body.time).toDate()&#125;);result.then((err) &#123;    res.status(500).send(&#39;插入失败&#39;)    return;&#125;)</code></pre><h4 id="读取数据库"><a href="#读取数据库" class="headerlink" title="读取数据库"></a>读取数据库</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// routes\index.js</span><span class="token comment" spellcheck="true">// 通过数据库获取到数据</span><span class="token keyword">const</span> accounts <span class="token operator">=</span> AccountModel<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>time<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>accounts<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 渲染模板 且传递参数</span>res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'list'</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>accounts<span class="token punctuation">:</span> data<span class="token punctuation">,</span> moment<span class="token punctuation">:</span> moment<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><pre class=" language-html"><code class="language-html">// views\list.ejs // 对日期做格式化<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel-heading<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&lt;%= moment(item.time).format('YYYY-MM-DD') %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><pre><code>const result = AccountModel.deleteOne(&#123;id: id&#125;)  result.then((data) =&gt; &#123;    console.log(data);  &#125;)</code></pre><h4 id="结合API"><a href="#结合API" class="headerlink" title="结合API"></a>结合API</h4><p>新建routes\account.js 主要用于api访问，然后在app.js中引入</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> accountRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./routes/account.js'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 使得页面通过api接口可以访问</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/api'</span><span class="token punctuation">,</span> accountRouter<span class="token punctuation">)</span></code></pre><h4 id="获取账单接口"><a href="#获取账单接口" class="headerlink" title="获取账单接口"></a>获取账单接口</h4>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>硅谷甄选平台</title>
      <link href="/2023/08/24/huo-gu-zhen-xuan-ping-tai/"/>
      <url>/2023/08/24/huo-gu-zhen-xuan-ping-tai/</url>
      
        <content type="html"><![CDATA[<h1 id="硅谷甄选运营平台"><a href="#硅谷甄选运营平台" class="headerlink" title="硅谷甄选运营平台"></a>硅谷甄选运营平台</h1><p>此次教学课程为硅谷甄选运营平台项目,包含运营平台项目模板从0到1开发，以及数据大屏幕、权限等业务。</p><p>此次教学课程涉及到技术栈包含***:vue3+TypeScript+vue-router+pinia+element-plus+axios+echarts***等技术栈。</p><h2 id="一、vue3组件通信方式"><a href="#一、vue3组件通信方式" class="headerlink" title="一、vue3组件通信方式"></a>一、vue3组件通信方式</h2><p><strong>通信仓库地址:<a href="https://gitee.com/jch1011/vue3_communication.git">https://gitee.com/jch1011/vue3_communication.git</a></strong></p><p>不管是vue2还是vue3,组件通信方式很重要,不管是项目还是面试都是经常用到的知识点。</p><p><strong>比如:vue2组件通信方式</strong></p><p>**props:**可以实现父子组件、子父组件、甚至兄弟组件通信</p><p><strong>自定义事件</strong>:可以实现子父组件通信</p><p><strong>全局事件总线$bus</strong>:可以实现任意组件通信</p><p>**pubsub:**发布订阅模式实现任意组件通信</p><p><strong>vuex</strong>:集中式状态管理容器，实现任意组件通信</p><p><strong>ref</strong>:父组件获取子组件实例VC,获取子组件的响应式数据以及方法</p><p>**slot:**插槽(默认插槽、具名插槽、作用域插槽)实现父子组件通信……..</p><h3 id="1-1props"><a href="#1-1props" class="headerlink" title="1.1props"></a>1.1props</h3><p>props可以实现父子组件通信,在vue3中我们可以通过defineProps获取父组件传递的数据。且在组件内部不需要引入defineProps方法可以直接使用！</p><p><strong>父组件给子组件传递数据</strong></p><pre><code>&lt;Child info=&quot;我爱祖国&quot; :money=&quot;money&quot;&gt;&lt;/Child&gt;</code></pre><p><strong>子组件获取父组件传递数据:方式1</strong></p><pre><code>let props = defineProps(&#123;  info:&#123;   type:String,//接受的数据类型   default:&#39;默认参数&#39;,//接受默认数据  &#125;,  money:&#123;   type:Number,   default:0&#125;&#125;)</code></pre><p><strong>子组件获取父组件传递数据:方式2</strong></p><pre><code>let props = defineProps([&quot;info&quot;,&#39;money&#39;]);</code></pre><p>子组件获取到props数据就可以在模板中使用了,但是切记props是只读的(只能读取，不能修改)</p><h3 id="1-2自定义事件"><a href="#1-2自定义事件" class="headerlink" title="1.2自定义事件"></a>1.2自定义事件</h3><p>在vue框架中事件分为两种:一种是原生的DOM事件，另外一种自定义事件。</p><p>原生DOM事件可以让用户与网页进行交互，比如click、dbclick、change、mouseenter、mouseleave….</p><p>自定义事件可以实现子组件给父组件传递数据</p><h4 id="1-2-1原生DOM事件"><a href="#1-2-1原生DOM事件" class="headerlink" title="1.2.1原生DOM事件"></a>1.2.1原生DOM事件</h4><p>代码如下:</p><pre><code> &lt;pre @click=&quot;handler&quot;&gt;      我是祖国的老花骨朵 &lt;/pre&gt;</code></pre><p>当前代码级给pre标签绑定原生DOM事件点击事件,默认会给事件回调注入event事件对象。当然点击事件想注入多个参数可以按照下图操作。但是切记注入的事件对象务必叫做$event.</p><pre><code>  &lt;div @click=&quot;handler1(1,2,3,$event)&quot;&gt;我要传递多个参数&lt;/div&gt;</code></pre><p>在vue3框架click、dbclick、change(这类原生DOM事件),不管是在标签、自定义标签上(组件标签)都是原生DOM事件。</p><p><strong><!--vue2中却不是这样的,在vue2中组件标签需要通过native修饰符才能变为原生DOM事件--></strong></p><h4 id="1-2-2自定义事件"><a href="#1-2-2自定义事件" class="headerlink" title="1.2.2自定义事件"></a>1.2.2自定义事件</h4><p>自定义事件可以实现子组件给父组件传递数据.在项目中是比较常用的。</p><p>比如在父组件内部给子组件(Event2)绑定一个自定义事件</p><pre><code>&lt;Event2  @xxx=&quot;handler3&quot;&gt;&lt;/Event2&gt;</code></pre><p>在Event2子组件内部触发这个自定义事件</p><pre><code>&lt;template&gt;  &lt;div&gt;    &lt;h1&gt;我是子组件2&lt;/h1&gt;    &lt;button @click=&quot;handler&quot;&gt;点击我触发xxx自定义事件&lt;/button&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script setup lang=&quot;ts&quot;&gt;let $emit = defineEmits([&quot;xxx&quot;]);const handler = () =&gt; &#123;  $emit(&quot;xxx&quot;, &quot;法拉利&quot;, &quot;茅台&quot;);&#125;;&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;</code></pre><p>我们会发现在script标签内部,使用了defineEmits方法，此方法是vue3提供的方法,不需要引入直接使用。defineEmits方法执行，传递一个数组，数组元素即为将来组件需要触发的自定义事件类型，此方执行会返回一个$emit方法用于触发自定义事件。</p><p>当点击按钮的时候，事件回调内部调用$emit方法去触发自定义事件,第一个参数为触发事件类型，第二个、三个、N个参数即为传递给父组件的数据。</p><p>需要注意的是:代码如下</p><pre><code>&lt;Event2  @xxx=&quot;handler3&quot; @click=&quot;handler&quot;&gt;&lt;/Event2&gt;</code></pre><p>正常说组件标签书写@click应该为原生DOM事件,但是如果子组件内部通过defineEmits定义就变为自定义事件了</p><pre><code>let $emit = defineEmits([&quot;xxx&quot;,&#39;click&#39;]);</code></pre><h3 id="1-3全局事件总线"><a href="#1-3全局事件总线" class="headerlink" title="1.3全局事件总线"></a>1.3全局事件总线</h3><p>全局事件总线可以实现任意组件通信，在vue2中可以根据VM与VC关系推出全局事件总线。</p><p>但是在vue3中没有Vue构造函数，也就没有Vue.prototype.以及组合式API写法没有this，</p><p>那么在Vue3想实现全局事件的总线功能就有点不现实啦，如果想在Vue3中使用全局事件总线功能</p><p>可以使用插件mitt实现。</p><p><strong>mitt:官网地址:<a href="https://www.npmjs.com/package/mitt">https://www.npmjs.com/package/mitt</a></strong></p><h3 id="1-4v-model"><a href="#1-4v-model" class="headerlink" title="1.4v-model"></a>1.4v-model</h3><p>v-model指令可是收集表单数据(数据双向绑定)，除此之外它也可以实现父子组件数据同步。</p><p>而v-model实指利用props[modelValue]与自定义事件[update:modelValue]实现的。</p><p>下方代码:相当于给组件Child传递一个props(modelValue)与绑定一个自定义事件update:modelValue</p><p>实现父子组件数据同步</p><pre><code>&lt;Child v-model=&quot;msg&quot;&gt;&lt;/Child&gt;</code></pre><p>在vue3中一个组件可以通过使用多个v-model,让父子组件多个数据同步,下方代码相当于给组件Child传递两个props分别是pageNo与pageSize，以及绑定两个自定义事件update:pageNo与update:pageSize实现父子数据同步</p><pre><code>&lt;Child v-model:pageNo=&quot;msg&quot; v-model:pageSize=&quot;msg1&quot;&gt;&lt;/Child&gt;</code></pre><h3 id="1-5useAttrs"><a href="#1-5useAttrs" class="headerlink" title="1.5useAttrs"></a>1.5useAttrs</h3><p>在Vue3中可以利用useAttrs方法获取组件的属性与事件(包含:原生DOM事件或者自定义事件),次函数功能类似于Vue2框架中$attrs属性与$listeners方法。</p><p>比如:在父组件内部使用一个子组件my-button</p><pre><code>&lt;my-button type=&quot;success&quot; size=&quot;small&quot; title=&#39;标题&#39; @click=&quot;handler&quot;&gt;&lt;/my-button&gt;</code></pre><p>子组件内部可以通过useAttrs方法获取组件属性与事件.因此你也发现了，它类似于props,可以接受父组件传递过来的属性与属性值。需要注意如果defineProps接受了某一个属性，useAttrs方法返回的对象身上就没有相应属性与属性值。</p><pre><code>&lt;script setup lang=&quot;ts&quot;&gt;import &#123;useAttrs&#125; from &#39;vue&#39;;let $attrs = useAttrs();&lt;/script&gt;</code></pre><h3 id="1-6ref与-parent"><a href="#1-6ref与-parent" class="headerlink" title="1.6ref与$parent"></a>1.6ref与$parent</h3><p>ref,提及到ref可能会想到它可以获取元素的DOM或者获取子组件实例的VC。既然可以在父组件内部通过ref获取子组件实例VC，那么子组件内部的方法与响应式数据父组件可以使用的。</p><p>比如:在父组件挂载完毕获取组件实例</p><p>父组件内部代码:</p><pre><code>&lt;template&gt;  &lt;div&gt;    &lt;h1&gt;ref与$parent&lt;/h1&gt;    &lt;Son ref=&quot;son&quot;&gt;&lt;/Son&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script setup lang=&quot;ts&quot;&gt;import Son from &quot;./Son.vue&quot;;import &#123; onMounted, ref &#125; from &quot;vue&quot;;const son = ref();onMounted(() =&gt; &#123;  console.log(son.value);&#125;);&lt;/script&gt;</code></pre><p>但是需要注意，如果想让父组件获取子组件的数据或者方法需要通过defineExpose对外暴露,因为vue3中组件内部的数据对外“关闭的”，外部不能访问</p><pre><code>&lt;script setup lang=&quot;ts&quot;&gt;import &#123; ref &#125; from &quot;vue&quot;;//数据let money = ref(1000);//方法const handler = ()=&gt;&#123;&#125;defineExpose(&#123;  money,   handler&#125;)&lt;/script&gt;</code></pre><p>$parent可以获取某一个组件的父组件实例VC,因此可以使用父组件内部的数据与方法。必须子组件内部拥有一个按钮点击时候获取父组件实例，当然父组件的数据与方法需要通过defineExpose方法对外暴露</p><pre><code>&lt;button @click=&quot;handler($parent)&quot;&gt;点击我获取父组件实例&lt;/button&gt;</code></pre><h3 id="1-7provide与inject"><a href="#1-7provide与inject" class="headerlink" title="1.7provide与inject"></a>1.7provide与inject</h3><p><strong>provide[提供]</strong></p><p><strong>inject[注入]</strong></p><p>vue3提供两个方法provide与inject,可以实现隔辈组件传递参数</p><p>组件组件提供数据:</p><p>provide方法用于提供数据，此方法执需要传递两个参数,分别提供数据的key与提供数据value</p><pre><code>&lt;script setup lang=&quot;ts&quot;&gt;import &#123;provide&#125; from &#39;vue&#39;provide(&#39;token&#39;,&#39;admin_token&#39;);&lt;/script&gt;</code></pre><p>后代组件可以通过inject方法获取数据,通过key获取存储的数值</p><pre><code>&lt;script setup lang=&quot;ts&quot;&gt;import &#123;inject&#125; from &#39;vue&#39;let token = inject(&#39;token&#39;);&lt;/script&gt;</code></pre><h3 id="1-8pinia"><a href="#1-8pinia" class="headerlink" title="1.8pinia"></a>1.8pinia</h3><p><strong>pinia官网:<a href="https://pinia.web3doc.top/">https://pinia.web3doc.top/</a></strong></p><p>pinia也是集中式管理状态容器,类似于vuex。但是核心概念没有mutation、modules,使用方式参照官网</p><h3 id="1-9slot"><a href="#1-9slot" class="headerlink" title="1.9slot"></a>1.9slot</h3><p>插槽：默认插槽、具名插槽、作用域插槽可以实现父子组件通信.</p><p><strong>默认插槽:</strong></p><p>在子组件内部的模板中书写slot全局组件标签</p><pre><code>&lt;template&gt;  &lt;div&gt;    &lt;slot&gt;&lt;/slot&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script setup lang=&quot;ts&quot;&gt;&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;</code></pre><p>在父组件内部提供结构：Todo即为子组件,在父组件内部使用的时候，在双标签内部书写结构传递给子组件</p><p>注意开发项目的时候默认插槽一般只有一个</p><pre><code>&lt;Todo&gt;  &lt;h1&gt;我是默认插槽填充的结构&lt;/h1&gt;&lt;/Todo&gt;</code></pre><p><strong>具名插槽：</strong></p><p>顾名思义，此插槽带有名字在组件内部留多个指定名字的插槽。</p><p>下面是一个子组件内部,模板中留两个插槽</p><pre><code>&lt;template&gt;  &lt;div&gt;    &lt;h1&gt;todo&lt;/h1&gt;    &lt;slot name=&quot;a&quot;&gt;&lt;/slot&gt;    &lt;slot name=&quot;b&quot;&gt;&lt;/slot&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script setup lang=&quot;ts&quot;&gt;&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;</code></pre><p>父组件内部向指定的具名插槽传递结构。需要注意v-slot：可以替换为#</p><pre><code>&lt;template&gt;  &lt;div&gt;    &lt;h1&gt;slot&lt;/h1&gt;    &lt;Todo&gt;      &lt;template v-slot:a&gt;  //可以用#a替换        &lt;div&gt;填入组件A部分的结构&lt;/div&gt;      &lt;/template&gt;      &lt;template v-slot:b&gt;//可以用#b替换        &lt;div&gt;填入组件B部分的结构&lt;/div&gt;      &lt;/template&gt;    &lt;/Todo&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script setup lang=&quot;ts&quot;&gt;import Todo from &quot;./Todo.vue&quot;;&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;</code></pre><p><strong>作用域插槽</strong></p><p>作用域插槽：可以理解为，子组件数据由父组件提供，但是子组件内部决定不了自身结构与外观(样式)</p><p>子组件Todo代码如下:</p><pre><code>&lt;template&gt;  &lt;div&gt;    &lt;h1&gt;todo&lt;/h1&gt;    &lt;ul&gt;     &lt;!--组件内部遍历数组--&gt;      &lt;li v-for=&quot;(item,index) in todos&quot; :key=&quot;item.id&quot;&gt;         &lt;!--作用域插槽将数据回传给父组件--&gt;         &lt;slot :$row=&quot;item&quot; :$index=&quot;index&quot;&gt;&lt;/slot&gt;      &lt;/li&gt;    &lt;/ul&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script setup lang=&quot;ts&quot;&gt;defineProps([&#39;todos&#39;]);//接受父组件传递过来的数据&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;</code></pre><p>父组件内部代码如下:</p><pre><code>&lt;template&gt;  &lt;div&gt;    &lt;h1&gt;slot&lt;/h1&gt;    &lt;Todo :todos=&quot;todos&quot;&gt;      &lt;template v-slot=&quot;&#123;$row,$index&#125;&quot;&gt;         &lt;!--父组件决定子组件的结构与外观--&gt;         &lt;span :style=&quot;&#123;color:$row.done?&#39;green&#39;:&#39;red&#39;&#125;&quot;&gt;&#123;&#123;$row.title&#125;&#125;&lt;/span&gt;      &lt;/template&gt;    &lt;/Todo&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script setup lang=&quot;ts&quot;&gt;import Todo from &quot;./Todo.vue&quot;;import &#123; ref &#125; from &quot;vue&quot;;//父组件内部数据let todos = ref([  &#123; id: 1, title: &quot;吃饭&quot;, done: true &#125;,  &#123; id: 2, title: &quot;睡觉&quot;, done: false &#125;,  &#123; id: 3, title: &quot;打豆豆&quot;, done: true &#125;,]);&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;</code></pre><h2 id="二、搭建后台管理系统模板"><a href="#二、搭建后台管理系统模板" class="headerlink" title="二、搭建后台管理系统模板"></a>二、搭建后台管理系统模板</h2><h3 id="2-1项目初始化"><a href="#2-1项目初始化" class="headerlink" title="2.1项目初始化"></a>2.1项目初始化</h3><p>今天来带大家从0开始搭建一个vue3版本的后台管理系统。一个项目要有统一的规范，需要使用eslint+stylelint+prettier来对我们的代码质量做检测和修复，需要使用husky来做commit拦截，需要使用commitlint来统一提交规范，需要使用preinstall来统一包管理工具。</p><p>下面我们就用这一套规范来初始化我们的项目，集成一个规范的模版。</p><h4 id="2-1-1环境准备"><a href="#2-1-1环境准备" class="headerlink" title="2.1.1环境准备"></a>2.1.1环境准备</h4><ul><li>node v16.14.2 </li><li>pnpm 8.0.0</li></ul><pre class=" language-cmd"><code class="language-cmd">// 安装pnpm 官网中有不同安装方式 这里使用npmnpm install -g pnpm@8// 创建项目文件夹 位置如下D:\vue3-admin>// 使用pnpm创建vue3项目 选择框架配置pnpm create vite// 进入创建好的项目文件cd vite-project// 安装依赖pnpm install// 运行pnpm run dev</code></pre><h4 id="2-1-2初始化项目"><a href="#2-1-2初始化项目" class="headerlink" title="2.1.2初始化项目"></a>2.1.2初始化项目</h4><p>本项目使用vite进行构建，vite官方中文文档参考：<a href="https://cn.vitejs.dev/guide/">cn.vitejs.dev&#x2F;guide&#x2F;</a></p><p><strong>pnpm:performant npm ，意味“高性能的 npm”。<a href="https://so.csdn.net/so/search?q=pnpm&spm=1001.2101.3001.7020">pnpm</a>由npm&#x2F;yarn衍生而来，解决了npm&#x2F;yarn内部潜在的bug，极大的优化了性能，扩展了使用场景。被誉为“最先进的包管理工具”</strong></p><p>pnpm安装指令</p><pre><code>npm i -g pnpm</code></pre><p>项目初始化命令:</p><pre><code>pnpm create vite</code></pre><p>进入到项目根目录pnpm install安装全部依赖.安装完依赖运行程序:pnpm run dev</p><p>运行完毕项目跑在<a href="http://127.0.0.1:5173/,%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%E4%BD%A0%E5%BE%97%E9%A1%B9%E7%9B%AE%E5%95%A6">http://127.0.0.1:5173/,可以访问你得项目啦</a></p><h3 id="2-2项目配置"><a href="#2-2项目配置" class="headerlink" title="2.2项目配置"></a>2.2项目配置</h3><p>package.json中在</p><pre><code>&quot;scripts&quot;: &#123;    // 加上open 表示运行之后浏览器自动打开    &quot;dev&quot;: &quot;vite --open&quot;,    &quot;build&quot;: &quot;vue-tsc &amp;&amp; vite build&quot;,    &quot;preview&quot;: &quot;vite preview&quot;  &#125;,</code></pre><h4 id="一、eslint配置"><a href="#一、eslint配置" class="headerlink" title="一、eslint配置"></a>一、eslint配置</h4><p><strong>eslint中文官网:<a href="http://eslint.cn/">http://eslint.cn/</a></strong></p><p>ESLint最初是由<a href="http://nczonline.net/">Nicholas C. Zakas</a> 于2013年6月创建的开源项目。它的目标是提供一个插件化的<strong>javascript代码检测工具</strong></p><p>首先安装eslint</p><pre><code>pnpm i eslint -D</code></pre><p>生成配置文件:.eslint.cjs</p><pre><code>npx eslint --init</code></pre><p><strong>.eslint.cjs配置文件</strong></p><pre><code>module.exports = &#123;   //运行环境    &quot;env&quot;: &#123;         &quot;browser&quot;: true,//浏览器端        &quot;es2021&quot;: true,//es2021    &#125;,    //规则继承    &quot;extends&quot;: [        //全部规则默认是关闭的,这个配置项开启推荐规则,推荐规则参照文档       //比如:函数不能重名、对象不能出现重复key        &quot;eslint:recommended&quot;,        //vue3语法规则        &quot;plugin:vue/vue3-essential&quot;,        //ts语法规则        &quot;plugin:@typescript-eslint/recommended&quot;    ],    //要为特定类型的文件指定处理器    &quot;overrides&quot;: [    ],    //指定解析器:解析器    //Esprima 默认解析器    //Babel-ESLint babel解析器    //@typescript-eslint/parser ts解析器    &quot;parser&quot;: &quot;@typescript-eslint/parser&quot;,    //指定解析器选项    &quot;parserOptions&quot;: &#123;        &quot;ecmaVersion&quot;: &quot;latest&quot;,//校验ECMA最新版本        &quot;sourceType&quot;: &quot;module&quot;//设置为&quot;script&quot;（默认），或者&quot;module&quot;代码在ECMAScript模块中    &#125;,    //ESLint支持使用第三方插件。在使用插件之前，您必须使用npm安装它    //该eslint-plugin-前缀可以从插件名称被省略    &quot;plugins&quot;: [        &quot;vue&quot;,        &quot;@typescript-eslint&quot;    ],    //eslint规则    &quot;rules&quot;: &#123;    &#125;&#125;</code></pre><h5 id="1-1vue3环境代码校验插件"><a href="#1-1vue3环境代码校验插件" class="headerlink" title="1.1vue3环境代码校验插件"></a>1.1vue3环境代码校验插件</h5><pre><code># 让所有与prettier规则存在冲突的Eslint rules失效，并使用prettier进行代码检查&quot;eslint-config-prettier&quot;: &quot;^8.6.0&quot;,&quot;eslint-plugin-import&quot;: &quot;^2.27.5&quot;,&quot;eslint-plugin-node&quot;: &quot;^11.1.0&quot;,# 运行更漂亮的Eslint，使prettier规则优先级更高，Eslint优先级低&quot;eslint-plugin-prettier&quot;: &quot;^4.2.1&quot;,# vue.js的Eslint插件（查找vue语法错误，发现错误指令，查找违规风格指南&quot;eslint-plugin-vue&quot;: &quot;^9.9.0&quot;,# 该解析器允许使用Eslint校验所有babel code&quot;@babel/eslint-parser&quot;: &quot;^7.19.1&quot;,</code></pre><p>安装指令</p><pre><code>pnpm install -D eslint-plugin-import eslint-plugin-vue eslint-plugin-node eslint-plugin-prettier eslint-config-prettier eslint-plugin-node @babel/eslint-parser</code></pre><h5 id="1-2修改-eslintrc-cjs配置文件"><a href="#1-2修改-eslintrc-cjs配置文件" class="headerlink" title="1.2修改.eslintrc.cjs配置文件"></a>1.2修改.eslintrc.cjs配置文件</h5><pre><code>// @see https://eslint.bootcss.com/docs/rules/module.exports = &#123;  env: &#123;    browser: true,    es2021: true,    node: true,    jest: true,  &#125;,  /* 指定如何解析语法 */  parser: &#39;vue-eslint-parser&#39;,  /** 优先级低于 parse 的语法解析配置 */  parserOptions: &#123;    ecmaVersion: &#39;latest&#39;,    sourceType: &#39;module&#39;,    parser: &#39;@typescript-eslint/parser&#39;,    jsxPragma: &#39;React&#39;,    ecmaFeatures: &#123;      jsx: true,    &#125;,  &#125;,  /* 继承已有的规则 */  extends: [    &#39;eslint:recommended&#39;,    &#39;plugin:vue/vue3-essential&#39;,    &#39;plugin:@typescript-eslint/recommended&#39;,    &#39;plugin:prettier/recommended&#39;,  ],  plugins: [&#39;vue&#39;, &#39;@typescript-eslint&#39;],  /*   * &quot;off&quot; 或 0    ==&gt;  关闭规则   * &quot;warn&quot; 或 1   ==&gt;  打开的规则作为警告（不影响代码执行）   * &quot;error&quot; 或 2  ==&gt;  规则作为一个错误（代码不能执行，界面报错）   */  rules: &#123;    // eslint（https://eslint.bootcss.com/docs/rules/）    &#39;no-var&#39;: &#39;error&#39;, // 要求使用 let 或 const 而不是 var    &#39;no-multiple-empty-lines&#39;: [&#39;warn&#39;, &#123; max: 1 &#125;], // 不允许多个空行    &#39;no-console&#39;: process.env.NODE_ENV === &#39;production&#39; ? &#39;error&#39; : &#39;off&#39;,    &#39;no-debugger&#39;: process.env.NODE_ENV === &#39;production&#39; ? &#39;error&#39; : &#39;off&#39;,    &#39;no-unexpected-multiline&#39;: &#39;error&#39;, // 禁止空余的多行    &#39;no-useless-escape&#39;: &#39;off&#39;, // 禁止不必要的转义字符    // typeScript (https://typescript-eslint.io/rules)    &#39;@typescript-eslint/no-unused-vars&#39;: &#39;error&#39;, // 禁止定义未使用的变量    &#39;@typescript-eslint/prefer-ts-expect-error&#39;: &#39;error&#39;, // 禁止使用 @ts-ignore    &#39;@typescript-eslint/no-explicit-any&#39;: &#39;off&#39;, // 禁止使用 any 类型    &#39;@typescript-eslint/no-non-null-assertion&#39;: &#39;off&#39;,    &#39;@typescript-eslint/no-namespace&#39;: &#39;off&#39;, // 禁止使用自定义 TypeScript 模块和命名空间。    &#39;@typescript-eslint/semi&#39;: &#39;off&#39;,    // eslint-plugin-vue (https://eslint.vuejs.org/rules/)    &#39;vue/multi-word-component-names&#39;: &#39;off&#39;, // 要求组件名称始终为 “-” 链接的单词    &#39;vue/script-setup-uses-vars&#39;: &#39;error&#39;, // 防止&lt;script setup&gt;使用的变量&lt;template&gt;被标记为未使用    &#39;vue/no-mutating-props&#39;: &#39;off&#39;, // 不允许组件 prop的改变    &#39;vue/attribute-hyphenation&#39;: &#39;off&#39;, // 对模板中的自定义组件强制执行属性命名样式  &#125;,&#125;</code></pre><h5 id="1-3-eslintignore忽略文件"><a href="#1-3-eslintignore忽略文件" class="headerlink" title="1.3.eslintignore忽略文件"></a>1.3.eslintignore忽略文件</h5><pre><code>distnode_modules</code></pre><h5 id="1-4运行脚本"><a href="#1-4运行脚本" class="headerlink" title="1.4运行脚本"></a>1.4运行脚本</h5><p>package.json新增两个运行脚本</p><pre><code>&quot;scripts&quot;: &#123;// 对src中的文件进行校验    &quot;lint&quot;: &quot;eslint src&quot;,    // 对不符合规范的代码进行修补    &quot;fix&quot;: &quot;eslint src --fix&quot;,&#125;</code></pre><h4 id="二、配置prettier"><a href="#二、配置prettier" class="headerlink" title="二、配置prettier"></a>二、配置<strong>prettier</strong></h4><p>有了eslint，为什么还要有prettier？eslint针对的是javascript，他是一个检测工具，包含js语法以及少部分格式问题，在eslint看来，语法对了就能保证代码正常运行，格式问题属于其次；</p><p>而prettier属于格式化工具，它看不惯格式不统一，所以它就把eslint没干好的事接着干，另外，prettier支持</p><p>包含js在内的多种语言。</p><p>总结起来，<strong>eslint和prettier这俩兄弟一个保证js代码质量，一个保证代码美观。</strong></p><h5 id="2-1安装依赖包"><a href="#2-1安装依赖包" class="headerlink" title="2.1安装依赖包"></a>2.1安装依赖包</h5><pre><code>pnpm install -D eslint-plugin-prettier prettier eslint-config-prettier</code></pre><h5 id="2-2-prettierrc-json添加规则"><a href="#2-2-prettierrc-json添加规则" class="headerlink" title="2.2.prettierrc.json添加规则"></a>2.2.prettierrc.json添加规则</h5><pre><code>&#123;// 字符串都是单引号  &quot;singleQuote&quot;: true,  // 语句结尾的分号不要  &quot;semi&quot;: false,  //   &quot;bracketSpacing&quot;: true,  &quot;htmlWhitespaceSensitivity&quot;: &quot;ignore&quot;,  &quot;endOfLine&quot;: &quot;auto&quot;,  &quot;trailingComma&quot;: &quot;all&quot;,  // tab缩进2个位置  &quot;tabWidth&quot;: 2&#125;</code></pre><h5 id="2-3-prettierignore忽略文件"><a href="#2-3-prettierignore忽略文件" class="headerlink" title="2.3.prettierignore忽略文件"></a>2.3.prettierignore忽略文件</h5><pre><code>/dist/*/html/*.local/node_modules/****/*.svg**/*.sh/public/*</code></pre><p><strong>通过pnpm run lint去检测语法，如果出现不规范格式,通过pnpm run fix 修改</strong></p><h4 id="三、配置stylelint"><a href="#三、配置stylelint" class="headerlink" title="三、配置stylelint"></a>三、配置stylelint</h4><p><a href="https://stylelint.io/">stylelint</a>为css的lint工具。可格式化css代码，检查css语法错误与不合理的写法，指定css书写顺序等。</p><p>我们的项目中使用scss作为预处理器，安装以下依赖：</p><pre><code>pnpm add sass sass-loader stylelint postcss postcss-scss postcss-html stylelint-config-prettier stylelint-config-recess-order stylelint-config-recommended-scss stylelint-config-standard stylelint-config-standard-vue stylelint-scss stylelint-order stylelint-config-standard-scss -D</code></pre><h5 id="3-1-stylelintrc-cjs配置文件"><a href="#3-1-stylelintrc-cjs配置文件" class="headerlink" title="3.1.stylelintrc.cjs配置文件"></a>3.1<code>.stylelintrc.cjs</code><strong>配置文件</strong></h5><p><strong>官网:<a href="https://stylelint.bootcss.com/">https://stylelint.bootcss.com/</a></strong></p><pre><code>// @see https://stylelint.bootcss.com/module.exports = &#123;  extends: [    &#39;stylelint-config-standard&#39;, // 配置stylelint拓展插件    &#39;stylelint-config-html/vue&#39;, // 配置 vue 中 template 样式格式化    &#39;stylelint-config-standard-scss&#39;, // 配置stylelint scss插件    &#39;stylelint-config-recommended-vue/scss&#39;, // 配置 vue 中 scss 样式格式化    &#39;stylelint-config-recess-order&#39;, // 配置stylelint css属性书写顺序插件,    &#39;stylelint-config-prettier&#39;, // 配置stylelint和prettier兼容  ],  overrides: [    &#123;      files: [&#39;**/*.(scss|css|vue|html)&#39;],      customSyntax: &#39;postcss-scss&#39;,    &#125;,    &#123;      files: [&#39;**/*.(html|vue)&#39;],      customSyntax: &#39;postcss-html&#39;,    &#125;,  ],  ignoreFiles: [    &#39;**/*.js&#39;,    &#39;**/*.jsx&#39;,    &#39;**/*.tsx&#39;,    &#39;**/*.ts&#39;,    &#39;**/*.json&#39;,    &#39;**/*.md&#39;,    &#39;**/*.yaml&#39;,  ],  /**   * null  =&gt; 关闭该规则   * always =&gt; 必须   */  rules: &#123;    &#39;value-keyword-case&#39;: null, // 在 css 中使用 v-bind，不报错    &#39;no-descending-specificity&#39;: null, // 禁止在具有较高优先级的选择器后出现被其覆盖的较低优先级的选择器    &#39;function-url-quotes&#39;: &#39;always&#39;, // 要求或禁止 URL 的引号 &quot;always(必须加上引号)&quot;|&quot;never(没有引号)&quot;    &#39;no-empty-source&#39;: null, // 关闭禁止空源码    &#39;selector-class-pattern&#39;: null, // 关闭强制选择器类名的格式    &#39;property-no-unknown&#39;: null, // 禁止未知的属性(true 为不允许)    &#39;block-opening-brace-space-before&#39;: &#39;always&#39;, //大括号之前必须有一个空格或不能有空白符    &#39;value-no-vendor-prefix&#39;: null, // 关闭 属性值前缀 --webkit-box    &#39;property-no-vendor-prefix&#39;: null, // 关闭 属性前缀 -webkit-mask    &#39;selector-pseudo-class-no-unknown&#39;: [      // 不允许未知的选择器      true,      &#123;        ignorePseudoClasses: [&#39;global&#39;, &#39;v-deep&#39;, &#39;deep&#39;], // 忽略属性，修改element默认样式的时候能使用到      &#125;,    ],  &#125;,&#125;</code></pre><h5 id="3-2-stylelintignore忽略文件"><a href="#3-2-stylelintignore忽略文件" class="headerlink" title="3.2.stylelintignore忽略文件"></a>3.2.stylelintignore忽略文件</h5><pre><code>/node_modules/*/dist/*/html/*/public/*</code></pre><h5 id="3-3运行脚本"><a href="#3-3运行脚本" class="headerlink" title="3.3运行脚本"></a>3.3运行脚本</h5><pre><code>&quot;scripts&quot;: &#123;    &quot;lint:style&quot;: &quot;stylelint src/**/*.&#123;css,scss,vue&#125; --cache --fix&quot;&#125;</code></pre><p>最后配置统一的prettier来格式化我们的js和css，html代码</p><pre class=" language-json"><code class="language-json"> <span class="token property">"scripts"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>     // open运行之后直接打开浏览器    <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"vite --open"</span><span class="token punctuation">,</span>     // 生产模式打包    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"vue-tsc &amp;&amp; vite build"</span><span class="token punctuation">,</span>    <span class="token property">"preview"</span><span class="token operator">:</span> <span class="token string">"vite preview"</span><span class="token punctuation">,</span>     // 对js进行校验    <span class="token property">"lint"</span><span class="token operator">:</span> <span class="token string">"eslint src"</span><span class="token punctuation">,</span>     // 自动修补格式错误的代码    <span class="token property">"fix"</span><span class="token operator">:</span> <span class="token string">"eslint src --fix"</span><span class="token punctuation">,</span>    // 将代码直接格式化    <span class="token property">"format"</span><span class="token operator">:</span> <span class="token string">"prettier --write \"./**/*.&amp;#123;html,vue,ts,js,json,md&amp;#125;\""</span><span class="token punctuation">,</span>    <span class="token property">"lint:eslint"</span><span class="token operator">:</span> <span class="token string">"eslint src/**/*.&amp;#123;ts,vue&amp;#125; --cache --fix"</span><span class="token punctuation">,</span>    <span class="token property">"lint:style"</span><span class="token operator">:</span> <span class="token string">"stylelint src/**/*.&amp;#123;css,scss,vue&amp;#125; --cache --fix"</span>  &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span></code></pre><p><strong>当我们运行<code>pnpm run format</code>的时候，会把代码直接格式化</strong></p><h4 id="四、配置husky"><a href="#四、配置husky" class="headerlink" title="四、配置husky"></a>四、配置husky</h4><p>在上面我们已经集成好了我们代码校验工具，但是需要每次手动的去执行命令才会格式化我们的代码。如果有人没有格式化就提交了远程仓库中，那这个规范就没什么用。所以我们需要强制让开发人员按照代码规范来提交。</p><p>要做到这件事情，就需要利用husky在代码提交之前触发git hook(git在客户端的钩子)，然后执行<code>pnpm run format</code>来自动的格式化我们的代码。</p><p>安装<code>husky</code></p><pre><code>pnpm install -D husky</code></pre><p>执行</p><pre><code>// ps: 必须已经建立本地仓库才可以 否则会报错npx husky-init</code></pre><p>会在根目录下生成个一个.husky目录，在这个目录下面会有一个pre-commit文件，这个文件里面的命令在我们执行commit的时候就会执行</p><p>在<code>.husky/pre-commit</code>文件添加如下命令：</p><pre><code>#!/usr/bin/env sh. &quot;$(dirname -- &quot;$0&quot;)/_/husky.sh&quot;pnpm run format</code></pre><p>当我们对代码进行commit操作的时候，就会执行命令，对代码进行格式化，然后再提交。</p><h4 id="五、配置commitlint"><a href="#五、配置commitlint" class="headerlink" title="五、配置commitlint"></a>五、配置commitlint</h4><p>对于我们的commit信息，也是有统一规范的，不能随便写,要让每个人都按照统一的标准来执行，我们可以利用<strong>commitlint</strong>来实现。</p><p>安装包</p><pre><code>pnpm add @commitlint/config-conventional @commitlint/cli -D</code></pre><p>添加配置文件，新建<code>commitlint.config.cjs</code>(注意是cjs)，然后添加下面的代码：</p><pre><code>module.exports = &#123;  extends: [&#39;@commitlint/config-conventional&#39;],  // 校验规则  rules: &#123;    &#39;type-enum&#39;: [      2,      &#39;always&#39;,      [        &#39;feat&#39;,        &#39;fix&#39;,        &#39;docs&#39;,        &#39;style&#39;,        &#39;refactor&#39;,        &#39;perf&#39;,        &#39;test&#39;,        &#39;chore&#39;,        &#39;revert&#39;,        &#39;build&#39;,      ],    ],    &#39;type-case&#39;: [0],    &#39;type-empty&#39;: [0],    &#39;scope-empty&#39;: [0],    &#39;scope-case&#39;: [0],    &#39;subject-full-stop&#39;: [0, &#39;never&#39;],    &#39;subject-case&#39;: [0, &#39;never&#39;],    &#39;header-max-length&#39;: [0, &#39;always&#39;, 72],  &#125;,&#125;</code></pre><p>在<code>package.json</code>中配置scripts命令</p><pre><code># 在scrips中添加下面的代码&#123;&quot;scripts&quot;: &#123;    &quot;commitlint&quot;: &quot;commitlint --config commitlint.config.cjs -e -V&quot;  &#125;,&#125;</code></pre><p>配置结束，现在当我们填写<code>commit</code>信息的时候，前面就需要带着下面的<code>subject</code></p><pre><code>&#39;feat&#39;,//新特性、新功能&#39;fix&#39;,//修改bug&#39;docs&#39;,//文档修改&#39;style&#39;,//代码格式修改, 注意不是 css 修改&#39;refactor&#39;,//代码重构&#39;perf&#39;,//优化相关，比如提升性能、体验&#39;test&#39;,//测试用例修改&#39;chore&#39;,//其他修改, 比如改变构建流程、或者增加依赖库、工具等&#39;revert&#39;,//回滚到上一个版本&#39;build&#39;,//编译相关的修改，例如发布版本、对项目构建或者依赖的改动</code></pre><p>配置husky</p><pre><code>npx husky add .husky/commit-msg </code></pre><p>在生成的commit-msg文件中添加下面的命令</p><pre><code>#!/usr/bin/env sh. &quot;$(dirname -- &quot;$0&quot;)/_/husky.sh&quot;pnpm commitlint</code></pre><p>当我们 commit 提交信息时，就不能再随意写了，必须是 <strong>git commit -m ‘fix: xxx’</strong> 符合类型的才可以，<strong>需要注意的是类型的后面需要用英文的 :，并且冒号后面是需要空一格的，这个是不能省略的</strong></p><h4 id="六、强制使用pnpm包管理器工具"><a href="#六、强制使用pnpm包管理器工具" class="headerlink" title="六、强制使用pnpm包管理器工具"></a>六、强制使用pnpm包管理器工具</h4><p>团队开发项目的时候，需要统一包管理器工具,因为不同包管理器工具下载同一个依赖,可能版本不一样,</p><p>导致项目出现bug问题,因此包管理器工具需要统一管理！！！</p><p>在根目录创建<code>scritps/preinstall.js</code>文件，添加下面的内容</p><pre><code>if (!/pnpm/.test(process.env.npm_execpath || &#39;&#39;)) &#123;  console.warn(    `\u001b[33mThis repository must using pnpm as the package manager ` +    ` for scripts to work properly.\u001b[39m\n`,  )  process.exit(1)&#125;</code></pre><p>配置命令</p><pre><code>&quot;scripts&quot;: &#123;    &quot;preinstall&quot;: &quot;node ./scripts/preinstall.js&quot;&#125;</code></pre><p><strong>当我们使用npm或者yarn来安装包的时候，就会报错了。原理就是在install的时候会触发preinstall（npm提供的生命周期钩子）这个文件里面的代码。</strong></p><h2 id="三、项目集成"><a href="#三、项目集成" class="headerlink" title="三、项目集成"></a>三、项目集成</h2><h3 id="3-1集成element-plus"><a href="#3-1集成element-plus" class="headerlink" title="3.1集成element-plus"></a>3.1集成element-plus</h3><p>硅谷甄选运营平台,UI组件库采用的element-plus，因此需要集成element-plus插件！！！</p><p>官网地址:<a href="https://element-plus.gitee.io/zh-CN/">https://element-plus.gitee.io/zh-CN/</a></p><pre><code>pnpm install element-plus @element-plus/icons-vue</code></pre><p><strong>入口文件main.ts全局安装element-plus,element-plus默认支持语言英语设置为中文</strong></p><pre><code>import ElementPlus from &#39;element-plus&#39;;import &#39;element-plus/dist/index.css&#39;//@ts-ignore忽略当前文件ts类型的检测否则有红色提示(打包会失败)import zhCn from &#39;element-plus/dist/locale/zh-cn.mjs&#39;app.use(ElementPlus, &#123;    locale: zhCn&#125;)</code></pre><p><strong>Element Plus全局组件类型声明</strong></p><pre><code>// tsconfig.json&#123;  &quot;compilerOptions&quot;: &#123;    // ...    &quot;types&quot;: [&quot;element-plus/global&quot;]  &#125;&#125;</code></pre><p>配置完毕可以测试element-plus组件与图标的使用.</p><h3 id="3-2src别名的配置"><a href="#3-2src别名的配置" class="headerlink" title="3.2src别名的配置"></a>3.2src别名的配置</h3><p>在开发项目的时候文件与文件关系可能很复杂，因此我们需要给src文件夹配置一个别名！！！</p><p>因为很可能出现..&#x2F;..&#x2F;这样的情况，所以我们配置寻找文件夹的开始路径为src</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// vite.config.ts</span><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>defineConfig<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'vite'</span><span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">'@vitejs/plugin-vue'</span><span class="token comment" spellcheck="true">// nodejs中的一个模块 可以获取到相对路径也可以获取到绝对路径</span><span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">'path'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    resolve<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        alias<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 相对路径别名配置，使用 @ 代替 src</span>            <span class="token string">"@"</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"./src"</span><span class="token punctuation">)</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p><strong>TypeScript 编译配置</strong></p><pre><code>// tsconfig.json&#123;  &quot;compilerOptions&quot;: &#123;    &quot;baseUrl&quot;: &quot;./&quot;, // 解析非相对模块的基地址，默认是当前目录    &quot;paths&quot;: &#123; //路径映射，相对于baseUrl      &quot;@/*&quot;: [&quot;src/*&quot;]     &#125;  &#125;&#125;</code></pre><h3 id="3-3环境变量的配置"><a href="#3-3环境变量的配置" class="headerlink" title="3.3环境变量的配置"></a>3.3环境变量的配置</h3><p><strong>项目开发过程中，至少会经历开发环境、测试环境和生产环境(即正式环境)三个阶段。不同阶段请求的状态(如接口地址等)不尽相同，若手动切换接口地址是相当繁琐且易出错的。于是环境变量配置的需求就应运而生，我们只需做简单的配置，把环境状态切换的工作交给代码。</strong></p><p>开发环境（development）<br>顾名思义，开发使用的环境，每位开发人员在自己的dev分支上干活，开发到一定程度，同事会合并代码，进行联调。</p><p>测试环境（testing）<br>测试同事干活的环境啦，一般会由测试同事自己来部署，然后在此环境进行测试</p><p>生产环境（production）<br>生产环境是指正式提供对外服务的，一般会关掉错误报告，打开错误日志。(正式提供给客户使用的环境。)</p><p>注意:一般情况下，一个环境对应一台服务器,也有的公司开发与测试环境是一台服务器！！！</p><p>项目根目录分别添加 开发、生产和测试环境的文件!</p><pre><code>.env.development.env.production.env.test</code></pre><p>文件内容</p><pre><code># 变量必须以 VITE_ 为前缀才能暴露给外部读取NODE_ENV = &#39;development&#39;VITE_APP_TITLE = &#39;硅谷甄选运营平台&#39;VITE_APP_BASE_API = &#39;/dev-api&#39;</code></pre><pre><code>NODE_ENV = &#39;production&#39;VITE_APP_TITLE = &#39;硅谷甄选运营平台&#39;VITE_APP_BASE_API = &#39;/prod-api&#39;</code></pre><pre><code># 变量必须以 VITE_ 为前缀才能暴露给外部读取NODE_ENV = &#39;test&#39;VITE_APP_TITLE = &#39;硅谷甄选运营平台&#39;VITE_APP_BASE_API = &#39;/test-api&#39;</code></pre><p>配置运行命令：package.json</p><pre><code> &quot;scripts&quot;: &#123;    &quot;dev&quot;: &quot;vite --open&quot;,    &quot;build:test&quot;: &quot;vue-tsc &amp;&amp; vite build --mode test&quot;,    &quot;build:pro&quot;: &quot;vue-tsc &amp;&amp; vite build --mode production&quot;,    &quot;preview&quot;: &quot;vite preview&quot;  &#125;,</code></pre><p>通过import.meta.env获取环境变量</p><h3 id="3-4SVG图标配置"><a href="#3-4SVG图标配置" class="headerlink" title="3.4SVG图标配置"></a>3.4SVG图标配置</h3><p>在开发项目的时候经常会用到svg矢量图,而且我们使用SVG以后，页面上加载的不再是图片资源,</p><p>这对页面性能来说是个很大的提升，而且我们SVG文件比img要小的很多，放在项目中几乎不占用资源。</p><p><strong>安装SVG依赖插件</strong></p><pre><code>pnpm install vite-plugin-svg-icons -D</code></pre><p><strong>在<code>vite.config.ts</code>中配置插件</strong></p><pre><code>import &#123; createSvgIconsPlugin &#125; from &#39;vite-plugin-svg-icons&#39;import path from &#39;path&#39;export default () =&gt; &#123;  return &#123;    plugins: [      createSvgIconsPlugin(&#123;        // Specify the icon folder to be cached        iconDirs: [path.resolve(process.cwd(), &#39;src/assets/icons&#39;)],        // Specify symbolId format        symbolId: &#39;icon-[dir]-[name]&#39;,      &#125;),    ],  &#125;&#125;</code></pre><p><strong>入口文件导入</strong></p><pre><code>import &#39;virtual:svg-icons-register&#39;</code></pre><h4 id="3-4-1svg封装为全局组件"><a href="#3-4-1svg封装为全局组件" class="headerlink" title="3.4.1svg封装为全局组件"></a>3.4.1svg封装为全局组件</h4><p>因为项目很多模块需要使用图标,因此把它封装为全局组件！！！</p><p><strong>在src&#x2F;components目录下创建一个SvgIcon组件:代表如下</strong></p><pre class=" language-vue"><code class="language-vue"><template>  <div>    <svg :style="&#123; width: width, height: height &#125;">      <use :xlink:href="prefix + name" :fill="color"></use>    </svg>  </div></template><script setup lang="ts">defineProps(&#123;  //xlink:href属性值的前缀  prefix: &#123;    type: String,    default: '#icon-'  &#125;,  //svg矢量图的名字  name: String,  //svg图标的颜色  color: &#123;    type: String,    default: ""  &#125;,  //svg宽度  width: &#123;    type: String,    default: '16px'  &#125;,  //svg高度  height: &#123;    type: String,    default: '16px'  &#125;&#125;)</script><style scoped></style></code></pre><p>在components文件夹目录下创建一个index.ts文件：用于注册components文件夹内部全部全局组件！！！</p><pre><code>import SvgIcon from &#39;./SvgIcon/index.vue&#39;;import type &#123; App, Component &#125; from &#39;vue&#39;;const components: &#123; [name: string]: Component &#125; = &#123; SvgIcon &#125;;export default &#123;    install(app: App) &#123;        Object.keys(components).forEach((key: string) =&gt; &#123;            app.component(key, components[key]);        &#125;)    &#125;&#125;</code></pre><p>在入口文件main.ts中引入src&#x2F;index.ts文件,通过app.use方法安装自定义插件</p><pre><code>import gloablComponent from &#39;./components/index&#39;;app.use(gloablComponent);</code></pre><h3 id="3-5集成sass"><a href="#3-5集成sass" class="headerlink" title="3.5集成sass"></a>3.5集成sass</h3><p>我们目前在组件内部已经可以使用scss样式,因为在配置styleLint工具的时候，项目当中已经安装过sass sass-loader,因此我们再组件内可以使用scss语法！！！需要加上lang&#x3D;”scss”</p><pre><code>&lt;style scoped lang=&quot;scss&quot;&gt;&lt;/style&gt;</code></pre><p>这里插入一些scss语法</p><pre class=" language-scss"><code class="language-scss"><span class="token comment" spellcheck="true">//  引入其他 .scss 文件</span><span class="token keyword">@import</span> <span class="token string">'index.scss'</span>  <span class="token comment" spellcheck="true">// 常规变量</span><span class="token property"><span class="token variable">$key</span></span><span class="token punctuation">:</span> value<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 默认变量 默认变量是可以被覆盖的,具体覆盖方法如下</span><span class="token property"><span class="token variable">$font</span></span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span><span class="token property"><span class="token variable">$font</span></span><span class="token punctuation">:</span> <span class="token number">14</span>px!default<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 特殊变量</span><span class="token property"><span class="token variable">$fontSize</span></span><span class="token punctuation">:</span><span class="token number">14</span>px<span class="token punctuation">;</span><span class="token property">font</span><span class="token punctuation">:</span>#&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span><span class="token variable">$fontSize</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 选择器嵌套</span></code></pre><p>接下来我们为项目添加一些全局的样式</p><p>在src&#x2F;styles目录下创建一个index.scss文件，当然项目中需要用到清除默认样式，因此在index.scss引入reset.scss（新建文件src-&gt;reset.scss:内容可以去npm官网上找 在搜索框中输入 reset.scss然后复制代码粘贴到新建的文件中）</p><pre><code>@import reset.scss</code></pre><p>在入口文件引入</p><pre><code>import &#39;@/styles/index.scss&#39;</code></pre><p>但是你会发现在src&#x2F;styles&#x2F;index.scss全局样式文件中没有办法使用$变量.因此需要给项目中引入全局变量$.</p><p>在styles文件夹中创建一个variable.scss文件，这个文件中保存着给项目提供的全局样式变量</p><pre class=" language-scss"><code class="language-scss"><span class="token comment" spellcheck="true">// 类似于这种数据 之后就可以在全部组件中使用了 而不需要引入</span><span class="token property"><span class="token variable">$color</span></span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></code></pre><p>在vite.config.ts文件配置如下:</p><pre><code>export default defineConfig((config) =&gt; &#123;    css: &#123;      preprocessorOptions: &#123;        scss: &#123;          javascriptEnabled: true,          additionalData: &#39;@import &quot;./src/styles/variable.scss&quot;;&#39;,        &#125;,      &#125;,    &#125;,    &#125;&#125;</code></pre><p><strong><code>@import &quot;./src/styles/variable.less&quot;;</code>后面的<code>;</code>不要忘记，不然会报错</strong>!</p><p>配置完毕你会发现scss提供这些全局变量可以在组件样式中使用了！！！</p><h3 id="3-6mock数据"><a href="#3-6mock数据" class="headerlink" title="3.6mock数据"></a>3.6mock数据</h3><p>安装依赖:<a href="https://www.npmjs.com/package/vite-plugin-mock">https://www.npmjs.com/package/vite-plugin-mock</a></p><pre><code>pnpm install -D vite-plugin-mock mockjs</code></pre><p>在 vite.config.js 配置文件启用插件。</p><pre class=" language-diff"><code class="language-diff">// 引入mock<span class="token inserted">+import &amp;#123; viteMockServe &amp;#125; from 'vite-plugin-mock'</span>export default defineConfig((&amp;#123; command &amp;#125;) => &amp;#123;  return &amp;#123;    plugins: [      vue(),<span class="token inserted">+      viteMockServe(&amp;#123;</span><span class="token inserted">+       // command用于获取当前开发环境</span><span class="token inserted">+       // 下面语句保证开发阶段可以使用mock接口</span><span class="token inserted">+          localEnabled: command === 'serve',</span><span class="token inserted">+       &amp;#125;),</span>      createSvgIconsPlugin(&amp;#123;        // Specify the icon folder to be cached        iconDirs: [path.resolve(process.cwd(), 'src/assets/icons')],        // Specify symbolId format        symbolId: 'icon-[dir]-[name]',      &amp;#125;)    ],    resolve: &amp;#123;      alias: &amp;#123;          "@": path.resolve("./src") // 相对路径别名配置，使用 @ 代替 src      &amp;#125;    &amp;#125;,    css: &amp;#123;      preprocessorOptions: &amp;#123;        scss: &amp;#123;          javascriptEnabled: true,          additionalData: '@import "./src/styles/variable.scss";',        &amp;#125;,      &amp;#125;,    &amp;#125;  &amp;#125;&amp;#125;)</code></pre><p>ps：这里将defineConfig的写法从对象格式转变成箭头函数的格式会报错</p><pre><code>file:///Users/Desktop/myapp/node_modules/vite-plugin-mock/dist/index.mjs:128  if (!require.cache) &#123;  ^</code></pre><p>解决：</p><p>在node_modules&#x2F;vite-plugin-mock&#x2F;dist&#x2F;index.mjs这个文件中做如下配置：</p><pre><code>import &#123; createRequire &#125; from &#39;module&#39;;const require = createRequire(import.meta.url);</code></pre><p>在根目录创建mock文件夹:去创建我们需要mock数据与接口！！！</p><p>在mock文件夹内部创建一个user.ts文件</p><pre><code>//用户信息数据function createUserList() &#123;    return [        &#123;            userId: 1,            avatar:                &#39;https://wpimg.wallstcn.com/f778738c-e4f8-4870-b634-56703b4acafe.gif&#39;,            username: &#39;admin&#39;,            password: &#39;111111&#39;,            desc: &#39;平台管理员&#39;,            roles: [&#39;平台管理员&#39;],            buttons: [&#39;cuser.detail&#39;],            routes: [&#39;home&#39;],            token: &#39;Admin Token&#39;,        &#125;,        &#123;            userId: 2,            avatar:                &#39;https://wpimg.wallstcn.com/f778738c-e4f8-4870-b634-56703b4acafe.gif&#39;,            username: &#39;system&#39;,            password: &#39;111111&#39;,            desc: &#39;系统管理员&#39;,            roles: [&#39;系统管理员&#39;],            buttons: [&#39;cuser.detail&#39;, &#39;cuser.user&#39;],            routes: [&#39;home&#39;],            token: &#39;System Token&#39;,        &#125;,    ]&#125;export default [    // 用户登录接口    &#123;        url: &#39;/api/user/login&#39;,//请求地址        method: &#39;post&#39;,//请求方式        response: (&#123; body &#125;) =&gt; &#123;            //获取请求体携带过来的用户名与密码            const &#123; username, password &#125; = body;            //调用获取用户信息函数,用于判断是否有此用户            const checkUser = createUserList().find(                (item) =&gt; item.username === username &amp;&amp; item.password === password,            )            //没有用户返回失败信息            if (!checkUser) &#123;                return &#123; code: 201, data: &#123; message: &#39;账号或者密码不正确&#39; &#125; &#125;            &#125;            //如果有返回成功信息            const &#123; token &#125; = checkUser            return &#123; code: 200, data: &#123; token &#125; &#125;        &#125;,    &#125;,    // 获取用户信息    &#123;        url: &#39;/api/user/info&#39;,        method: &#39;get&#39;,        response: (request) =&gt; &#123;            //获取请求头携带token            const token = request.headers.token;            //查看用户信息是否包含有次token用户            const checkUser = createUserList().find((item) =&gt; item.token === token)            //没有返回失败的信息            if (!checkUser) &#123;                return &#123; code: 201, data: &#123; message: &#39;获取用户信息失败&#39; &#125; &#125;            &#125;            //如果有返回成功信息            return &#123; code: 200, data: &#123;checkUser&#125; &#125;        &#125;,    &#125;,]</code></pre><p><strong>安装axios</strong></p><pre><code>pnpm install axios</code></pre><p>最后通过axios测试接口！！！</p><p>测试代码（在组件中编写一个按钮 绑定点击事件 点击后发送请求）</p><pre><code>&lt;button @click=&quot;sendURL&quot;&gt;发送请求&lt;/button&gt;const sendURL = () =&gt; &#123;    axios(&#123;      url: &#39;/api/user/login&#39;,      method: &#39;post&#39;,      data: &#123;        username: &#39;admin&#39;,        password: &#39;111111&#39;      &#125;    &#125;)  &#125;</code></pre><h3 id="3-7axios二次封装"><a href="#3-7axios二次封装" class="headerlink" title="3.7axios二次封装"></a>3.7axios二次封装</h3><p>在开发项目的时候避免不了与后端进行交互,因此我们需要使用axios插件实现发送网络请求。在开发项目的时候</p><p>我们经常会把axios进行二次封装。</p><p>目的:</p><p>1:使用请求拦截器，可以在请求拦截器中处理一些业务(开始进度条、请求头携带公共参数)</p><p>2:使用响应拦截器，可以在响应拦截器中处理一些业务(进度条结束、简化服务器返回的数据、处理http网络错误)</p><p>在根目录下创建utils&#x2F;request.ts</p><pre><code>import axios from &quot;axios&quot;;import &#123; ElMessage &#125; from &quot;element-plus&quot;;//创建axios实例let request = axios.create(&#123;    baseURL: import.meta.env.VITE_APP_BASE_API,    timeout: 5000&#125;)//请求拦截器request.interceptors.request.use(config =&gt; &#123;    return config;&#125;);//响应拦截器request.interceptors.response.use((response) =&gt; &#123;    return response.data;&#125;, (error) =&gt; &#123;    //处理网络错误    let msg = &#39;&#39;;    let status = error.response.status;    switch (status) &#123;        case 401:            msg = &quot;token过期&quot;;            break;        case 403:            msg = &#39;无权访问&#39;;            break;        case 404:            msg = &quot;请求地址错误&quot;;            break;        case 500:            msg = &quot;服务器出现问题&quot;;            break;        default:            msg = &quot;无网络&quot;;    &#125;    ElMessage(&#123;        type: &#39;error&#39;,        message: msg    &#125;)    return Promise.reject(error);&#125;);export default request;</code></pre><h3 id="3-8API接口统一管理"><a href="#3-8API接口统一管理" class="headerlink" title="3.8API接口统一管理"></a>3.8API接口统一管理</h3><p>在开发项目的时候,接口可能很多需要统一管理。在src目录下去创建api文件夹去统一管理项目的接口；</p><p>比如:下面方式</p><pre><code>//统一管理咱们项目用户相关的接口import request from &#39;@/utils/request&#39;import type &#123; loginFormData, loginResponseData, userInfoReponseData,&#125; from &#39;./type&#39;//项目用户相关的请求地址enum API &#123; LOGIN_URL = &#39;/admin/acl/index/login&#39;, USERINFO_URL = &#39;/admin/acl/index/info&#39;, LOGOUT_URL = &#39;/admin/acl/index/logout&#39;,&#125;//登录接口export const reqLogin = (data: loginFormData) =&gt; request.post&lt;any, loginResponseData&gt;(API.LOGIN_URL, data)//获取用户信息export const reqUserInfo = () =&gt; request.get&lt;any, userInfoReponseData&gt;(API.USERINFO_URL)//退出登录export const reqLogout = () =&gt; request.post&lt;any, any&gt;(API.LOGOUT_URL)</code></pre><h2 id="四、项目的资源地址"><a href="#四、项目的资源地址" class="headerlink" title="四、项目的资源地址"></a>四、项目的资源地址</h2><p>贾成豪老师代码仓库地址:<a href="https://gitee.com/jch1011/vue3_admin_template-bj1.git">https://gitee.com/jch1011/vue3_admin_template-bj1.git</a></p><p>项目在线文档:</p><p>服务器域名:<a href="http://sph-api.atguigu.cn/">http://sph-api.atguigu.cn</a></p><p>swagger文档:</p><p><a href="http://139.198.104.58:8209/swagger-ui.html">http://139.198.104.58:8209/swagger-ui.html</a></p><p><a href="http://139.198.104.58:8212/swagger-ui.html#/">http://139.198.104.58:8212/swagger-ui.html#/</a></p><p>echarts:国内镜像网站</p><p><a href="https://www.isqqw.com/echarts-doc/zh/option.html#title">https://www.isqqw.com/echarts-doc/zh/option.html#title</a></p><p><a href="http://datav.aliyun.com/portal/school/atlas/area_selector">http://datav.aliyun.com/portal/school/atlas/area_selector</a></p><h2 id="五、实际开发过程"><a href="#五、实际开发过程" class="headerlink" title="五、实际开发过程"></a>五、实际开发过程</h2><p>安装路由</p><pre><code>pnpm install vue-router</code></pre><p>分析一级路由应该有4个：login登录页、home首页、404报错、任意路由</p><p>新建src-&gt;views-&gt;Login\Home\404文件夹</p><p>每个都新建index.vue文件</p><p>配置路由</p><h3 id="Edge中安装devtools"><a href="#Edge中安装devtools" class="headerlink" title="Edge中安装devtools"></a>Edge中安装devtools</h3><p><a href="https://www.cnblogs.com/lixuelong/p/14415664.html">Microsoft Edge 浏览器中 Vue.js devtools 插件安装与使用 - lixuelong - 博客园 (cnblogs.com)</a></p><p>1、搜索Vue.js Devtools</p><p>2、安装依赖</p><p>3、重启浏览器生效</p><h3 id="pinia"><a href="#pinia" class="headerlink" title="pinia"></a>pinia</h3><p>pinia是一个状态管理的工具（vue的存储库，类似于vuex），是vuex的升级版</p><p>只有state、getter、action抛弃了mutation</p><p>action支持同步和异步</p><p>支持typescript 分模块管理 体积小 支持插件扩展自身功能</p><p>使用</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 安装</span>pnpm install pinia<span class="token comment" spellcheck="true">// 入口文件引入</span><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>createPinia<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'pinia'</span><span class="token punctuation">;</span><span class="token keyword">const</span> pinia <span class="token operator">=</span> <span class="token function">createPinia</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>pinia<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 创建store（数据仓库） src->store->user.ts 主要用来存放用户相关的store</span><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> defineStore <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'pinia'</span><span class="token comment" spellcheck="true">// 第一个参数是应用程序中 store 的唯一 id</span><span class="token keyword">export</span> <span class="token keyword">const</span> useUsersStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">'users'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 其它配置项 例如store内的数据或者修改数据的方法等</span>    <span class="token comment" spellcheck="true">// state接收的是一个箭头函数的值，不能直接接收一个对象</span>    state<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        name<span class="token punctuation">:</span>         age<span class="token punctuation">:</span>        gender<span class="token punctuation">:</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 可以定义任意数量的store store就是一个函数</span></code></pre><p>使用store</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// App.vue或者其它页面组件中使用</span><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> useUserStore <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'../src/store/user'</span><span class="token punctuation">;</span><span class="token keyword">const</span> store <span class="token operator">=</span> useUserStore<span class="token punctuation">;</span></code></pre><p>我们需要存放的数据就放在options中的state属性内</p><pre><code>state: () =&gt; &#123;        name:         age:        gender:     &#125;</code></pre><p>操作state</p><p>可以将store中的数据与页面中的数据进行绑定，形成响应式的数据</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 获取数据且将其变成响应式数据</span><span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> gender <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token function">storeToRefs</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>修改state中的数据</p><pre><code>// 添加button修改state中的数据&lt;button @click=&quot;changeName&quot;&gt;更改姓名&lt;/button&gt;// 定义方法修改 直接重新赋值即可const changeName = () =&gt; &#123;  store.name = &quot;张三&quot;;  console.log(store);&#125;;</code></pre><p>重置state</p><p>用户填写了一部分表单，突然想重置初始状态</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 定义重置按钮</span><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"reset"</span><span class="token operator">></span>重置store<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token comment" spellcheck="true">// 重置store</span><span class="token keyword">const</span> reset <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用$reset()即可重置表单</span>  store<span class="token punctuation">.</span><span class="token function">$reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><p>批量更改state</p><p>一条一条修改数据很麻烦，进行批量修改 使用store.$patch</p><pre class=" language-ts"><code class="language-ts"><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"patchStore"</span><span class="token operator">></span>批量修改数据<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token comment" spellcheck="true">// 批量修改数据</span><span class="token keyword">const</span> patchStore <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  store<span class="token punctuation">.</span><span class="token function">$patch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  state<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">'shoes'</span><span class="token punctuation">,</span> quantity<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  state<span class="token punctuation">.</span>hasChanged <span class="token operator">=</span> <span class="token keyword">true</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><p>整个替换state</p><pre><code>store.$state = &#123; counter: 666, name: &#39;张三&#39; &#125;</code></pre><p>getter</p><p>对state数据进行处理</p><p>添加getter</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">const</span> useUsersStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span> <span class="token string">'users'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    state<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            name<span class="token punctuation">:</span>             age<span class="token punctuation">:</span>            gender<span class="token punctuation">:</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    getters<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        getAddAge<span class="token punctuation">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> state<span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>使用getter</p><pre><code>&lt;p&gt;新年龄：&#123;&#123; store.getAddAge &#125;&#125;&lt;/p&gt;</code></pre><p>getter传递参数</p><pre class=" language-ts"><code class="language-ts">getAddAge<span class="token punctuation">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>num<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        state<span class="token punctuation">.</span>age <span class="token operator">+</span> num<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 如果getter里面使用了别的getter 则不能使用箭头函数</span><span class="token function">getNameAndAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>getAddAge<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用带有参数的getter</span> <span class="token operator">&lt;</span>p<span class="token operator">></span>新年龄：<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> store<span class="token punctuation">.</span><span class="token function">getAddAge</span><span class="token punctuation">(</span><span class="token number">1100</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span></code></pre><p>actions</p><p>用来处理一些业务逻辑方法，是一个对象，里面存储了各种各样的方法，包括同步方法和异步方法</p><p>添加action</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">const</span> useUserStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">'users'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    store<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           name<span class="token punctuation">:</span>            age<span class="token punctuation">:</span>            gender<span class="token punctuation">:</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    getter<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        getAddAge<span class="token punctuation">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>num<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                state<span class="token punctuation">.</span>age <span class="token operator">+</span> num<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    actions<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 可以是任何逻辑，例如发送请求、存储token等 this指向当前store</span>        <span class="token function">saveName</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>使用action</p><p>在App.vue或者任何一个组件中</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">const</span> saveName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 直接调用store中的方法即可</span>    store<span class="token punctuation">.</span><span class="token function">saveName</span><span class="token punctuation">(</span><span class="token string">'zouzou'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>遇到的问题：</p><p>1、连接不上http 注意url的写法以及自己api地址是否正确</p><p>发现在.env.development当中的默认地址是&#x2F;dev-api为不是api</p><p>所以导致连接不上</p><p>通过在App.vue中写请求发现错误</p><p>2、登录错误的信息显示不争取 Object：object</p><p>发现是在user.ts中写的登录函数错误，返回的new Error（result.data.message)</p><p>需要多写一层，有时需要根据自己浏览器中返回的内容进行更改。</p><p>3、表单校验</p><p>el-form有个model属性，这里一定要注意不要写成v-model，否则不会进行检验，model在elementplus官网上明确表示是表单数据对象</p><p>4、vue3页面</p><p>页面中不能自动补全html中的标签了，以及一些div.class简写方法也不能使用了</p><p>解决：[如何解决Vue3没有代码提示问题？_vscode vue3代码提示_寻梦编码的博客-CSDN博客](<a href="https://blog.csdn.net/weixin_48914380/article/details/127918969#:~:text=%E5%9C%A8%E4%B8%8A%E4%B8%80%E7%AF%87%E7%AC%94%E8%AE%B0%E4%B8%AD%E6%8F%90%E5%88%B0%E4%BA%86Vue3%2Bvite%2BTs%E5%86%99%E4%BB%A3%E7%A0%81%E8%BF%87%E7%A8%8B%E4%B8%AD%EF%BC%8C%E5%87%BA%E7%8E%B0%E7%9A%84%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8%E5%A4%B1%E6%95%88%E5%8A%9F%E8%83%BD%EF%BC%8C%E4%BB%8A%E5%A4%A9%E6%9D%A5%E8%B0%88%E8%B0%88%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E8%BF%99%E4%B8%AA%E9%97%AE%E9%A2%98%E3%80%82">https://blog.csdn.net/weixin_48914380/article/details/127918969#:~:text=在上一篇笔记中提到了Vue3%2Bvite%2BTs写代码过程中，出现的代码自动补全失效功能，今天来谈谈如何解决这个问题。</a> 首先，我们已经很明确的就是安装了volar插件之后，HTML标签片段补全已经失效，即在template中书写HTML标签时，不会再有代码补全，即输入“div”，就是“div”，而不再是“&lt;%2Fdiv&gt;”，为了解决这个问题，我们需要在不删除volar插件的同时，对Vscode做一些配置。 打开设置，进入到如下界面： 选择 文本编辑器,-&gt; 文本 -&gt; ，点击右面第一个，添加项，项输入：“*.vue” ，值输入：”html”，点击保存后回到vue文件中，任何输入HTML标签，发现已经可以自动补全代码了，而且是自闭和的。)</p><p>5、上述修改完成之后有一个问题</p><p>vue中的样式css会报错 因为html文件中不能写css样式。</p><p>6、$router和$route的区别</p><p>$router：是VueRouter的一个对象，包含了所有路由许多关键的对象和属性</p><pre><code>$router.push(&#123;&#125;)$router.replace(&#123;&#125;)</code></pre><p>$route</p><p>是一个跳转的路由对象，每一个路由都会有一个route对象，是一个局部对象，可以获取对应的name，path，params等</p><p>7、v-show和v-if有什么区别？使用场景分别是什么？</p><p>控制手段：<code>v-show</code>隐藏则是为该元素添加<code>css--display:none</code>，<code>dom</code>元素依旧还在。<code>v-if</code>显示隐藏是将<code>dom</code>元素整个添加或删除</p><p>编译过程：<code>v-if</code>切换有一个局部编译&#x2F;卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件；<code>v-show</code>只是简单的基于css切换</p><p>编译条件：<code>v-if</code>是真正的条件渲染，它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。只有渲染条件为假时，并不做操作，直到为真才渲染。</p><ul><li><code>v-show</code> 由<code>false</code>变为<code>true</code>的时候不会触发组件的生命周期</li><li><code>v-if</code>由<code>false</code>变为<code>true</code>的时候，触发组件的<code>beforeCreate</code>、<code>create</code>、<code>beforeMount</code>、<code>mounted</code>钩子，由<code>true</code>变为<code>false</code>的时候触发组件的<code>beforeDestory</code>、<code>destoryed</code>方法</li></ul><p>性能消耗：<code>v-if</code>有更高的切换消耗；<code>v-show</code>有更高的初始渲染消耗；</p><p>8、vue动态组件</p><pre><code>// 实现在指定位置上动态加载不同的组件&lt;component :is=&#39;&#39;&gt;&lt;/component&gt;</code></pre><p>9、刷新中使用nextTick</p><p>在销毁完了组件（v-if&#x3D;’false’)之后使用nextTick回调重新生成组件</p><p>10、响应式数据需要使用.value获取值</p><p>ref接收参数，将其包裹在一个带有.value属性的ref对象中返回，组件模板中访问ref不需要.value，但是在方法中需要使用.value</p><p>11、有时候开发会忘记了在属性前面写: 进行单向绑定 就会导致页面出现问题</p><p>12、图片校验时机：点击确认时校验</p><ul><li><input disabled="" type="checkbox"> 13、分页功能实现为什么要将当前页始终设置为1？</li></ul><p>14、</p><p>最后的参考网址：</p><p><a href="https://www.yuque.com/aosika-j6ubd/kucrsm/sggz6rsnecr0hhlf#DrF6T">硅谷甄选（项目主体） (yuque.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>青训营后期笔记</title>
      <link href="/2023/08/22/qing-xun-ying-hou-qi-bi-ji/"/>
      <url>/2023/08/22/qing-xun-ying-hou-qi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="Vite知识体系"><a href="#Vite知识体系" class="headerlink" title="Vite知识体系"></a>Vite知识体系</h2><p>前端构建工具：</p><p>提供模块化加载方案、兼容不同的模块规范</p><p>高级语法转译+资源加载解析</p><p>输出压缩，TreeShaking（无用代码删除），语法降级</p><p>提升开发效率 HMR 热更新</p><h3 id="Vite定义"><a href="#Vite定义" class="headerlink" title="Vite定义"></a>Vite定义</h3><p>新一代前端构建工具</p><p>组成：</p><ul><li>No-bundle开发服务 源文件无需打包</li><li>生产环境基于Rollup的Bundler</li></ul><p>特征：</p><ul><li>开发环境中，无需打包操作，可快速的冷启动。</li><li>轻量快速的热重载（HMR）。</li><li>真正的按需编译，不再等待整个应用编译完成。</li></ul><p><a href="https://link.juejin.cn/?target=https://tc39.es/ecma262/%23sec-modules">ECMAScript Modules</a> 简称 ESM，也叫 <a href="https://link.juejin.cn/?target=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules">JavaScript modules</a>，是 2015 年 6 月随着 <a href="https://link.juejin.cn/?target=https://262.ecma-international.org/6.0/%23sec-source-text-module-records">ES6(ES2015)</a> 正式发布的模块化解决方案。</p><p>Vite开箱即用的功能等价于——webpack webpack-dev-server css-loader style-loader less-loader sass-loader postcss-loader file-loader 。。。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/af5f8d4493f3423087d6b9e6c5e60fa1~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="在这里插入图片描述"></p><p>传统构建模式：是将所有资源都打包好，再上线</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c57d4d695fe64014b78610ff2a5cd2b6~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="在这里插入图片描述"></p><p>Vite就是按需加载</p><p>使用</p><pre class=" language-cmd"><code class="language-cmd">## 创建工程npm init vite-app yk_vue3## 进入工程目录cd yk_vue3## 安装依赖npm install## 运行npm run dev</code></pre><h2 id="前端开发调试"><a href="#前端开发调试" class="headerlink" title="前端开发调试"></a>前端开发调试</h2><h3 id="前端bug的特点"><a href="#前端bug的特点" class="headerlink" title="前端bug的特点"></a>前端bug的特点</h3><p>1）多平台：浏览器、nodejs、桌面应用</p><p>2）多环境：本地开发 线上开发</p><p>3）多工具：Chrome devTools、Charles、vConsole等</p><p>4）多技巧：Console、BreakPoint、SourceMap等</p><h3 id="Chrome-DevTools"><a href="#Chrome-DevTools" class="headerlink" title="Chrome DevTools"></a>Chrome DevTools</h3><p>动态修改元素和样式</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c8d3dbc960b5433e903505d0de1d168e~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="QQ截图20211011223056.png"></p><p>在Computed中可以看到最终生效的样式，以及对应的CSS文件来源</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/821fc2632c2948478f7ab6070efe56a4~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="QQ截图20211011223414.png"></p><h3 id="Console"><a href="#Console" class="headerlink" title="Console"></a>Console</h3><p>有不同类型</p><p>console.log </p><p>console.warn</p><p>console.error</p><p>console.debug</p><p>console.info</p><p>在调试器中选择不同的分类对日志进行查看</p><p>console.dir：可以展示对象中的属性和对应的值</p><h3 id="Source-Tab"><a href="#Source-Tab" class="headerlink" title="Source Tab"></a>Source Tab</h3><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b85fc56cca6c4a909125c35d490ac2a7~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="QQ截图20211011225505.png"></p><p>Break Point是存放所有调试断点的列表，Watch则是观察变量值的变化</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7980527d5d0a4d1cbdb72e910987f804~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="QQ截图20211011225732.png"></p><p>scope查看作用域列表（包含闭包）</p><h3 id="压缩后的代码调试"><a href="#压缩后的代码调试" class="headerlink" title="压缩后的代码调试"></a>压缩后的代码调试</h3><p>使用sourceMap（webpack中）</p><p>perfomace tab </p><p>主要用来检测性能问题，开发时用的比较少，但遇到页面性能提升瓶颈时，是个很好的利器。</p><p><a href="https://juejin.cn/post/7017993464444878884?searchId=202309201715283CD1C241D20CFB003A0D">【青训营】- 前端必须知道的开发调试知识 - 掘金 (juejin.cn)</a></p><h3 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h3><p>应用面板，主要用来查看本地的一些缓存数据，比如Storage、Cookie、离线缓存、本地数据库等。</p><h3 id="常用调试技巧"><a href="#常用调试技巧" class="headerlink" title="常用调试技巧"></a>常用调试技巧</h3><p>在source中调试了代码，会实时更新效果，但是浏览器刷新就会全部恢复原样，这样调试代码效率很低，因此可以使用Overrides保存线上修改后的文件，能够清晰的看出改动了哪些地方，最后修改代码也很方便。</p><h2 id="前端框架中的设计模式"><a href="#前端框架中的设计模式" class="headerlink" title="前端框架中的设计模式"></a>前端框架中的设计模式</h2><p>MVC模式</p><p>MVVM模式</p><p>Flux模式</p><p>观察者模式</p><p><a href="https://juejin.cn/post/7273026570926555148?searchId=2023092017455992621774615AAB04A65B#heading-3">详解前端框架中的设计模式 | 青训营 - 掘金 (juejin.cn)</a></p><p>操作系统部分内容需要详细的看</p><p>进程 线程 计网 临界区互斥等 数据库 MySQL</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写练手项目时遇见的问题</title>
      <link href="/2023/08/17/xie-lian-shou-xiang-mu-shi-yu-jian-de-wen-ti/"/>
      <url>/2023/08/17/xie-lian-shou-xiang-mu-shi-yu-jian-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="github搜索页面"><a href="#github搜索页面" class="headerlink" title="github搜索页面"></a>github搜索页面</h2><p>1、端口号没有设为3000默认端口 然后axios连接数据时获取不到</p><p>疑问：默认端口转换之后 webpack server中间代理服务器的端口号是否改变</p><p>2、项目第二次启动不起来了</p><p><a href="https://www.cnblogs.com/tddnr/p/15882820.html">react中配置setupProxy.js后localhost拒绝访问的问题</a></p><p>将setupProxy.js版本更换即可</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//新版配置代码</span><span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>createProxyMiddleware<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http-proxy-middleware'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>    <span class="token function">createProxyMiddleware</span><span class="token punctuation">(</span><span class="token string">'/api1'</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      target<span class="token punctuation">:</span><span class="token string">'http://localhost:5000'</span><span class="token punctuation">,</span>      changeOrigin<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>      pathRewrite<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">'^/api1'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="路由传递参数的三种方式"><a href="#路由传递参数的三种方式" class="headerlink" title="路由传递参数的三种方式"></a>路由传递参数的三种方式</h2><p>使用querystring库对urlencoded方式的字符串进行解析时</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//以前</span><span class="token keyword">import</span> qs <span class="token keyword">from</span> <span class="token string">'querystring'</span><span class="token comment" spellcheck="true">// 现在</span><span class="token keyword">import</span> qs <span class="token keyword">from</span> <span class="token string">'qs'</span></code></pre><h2 id="redux求和"><a href="#redux求和" class="headerlink" title="redux求和"></a>redux求和</h2><p>select选框中拿到选择的options中的value值</p><p>原生js写法：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>selectedNum<span class="token punctuation">.</span>selectedIndex    <span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>selectedNum<span class="token punctuation">.</span>options<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span></code></pre><p>需要先拿到index然后拿到对应options的值</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react脚手架配置代理总结</title>
      <link href="/2023/08/17/react-jiao-shou-jia-pei-zhi-dai-li-zong-jie/"/>
      <url>/2023/08/17/react-jiao-shou-jia-pei-zhi-dai-li-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="react脚手架配置代理总结"><a href="#react脚手架配置代理总结" class="headerlink" title="react脚手架配置代理总结"></a>react脚手架配置代理总结</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><blockquote><p>在package.json中追加如下配置</p></blockquote><pre class=" language-json"><code class="language-json"><span class="token property">"proxy"</span><span class="token operator">:</span><span class="token string">"http://localhost:5000"</span></code></pre><p>说明：</p><ol><li>优点：配置简单，前端请求资源时可以不加任何前缀。</li><li>缺点：不能配置多个代理。</li><li>工作方式：上述方式配置代理，当请求了3000不存在的资源时，那么该请求会转发给5000 （优先匹配前端资源）</li></ol><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><ol><li><p>第一步：创建代理配置文件</p><pre><code>在src下创建配置文件：src/setupProxy.js</code></pre></li><li><p>编写setupProxy.js配置具体代理规则：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http-proxy-middleware'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>    <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token string">'/api1'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//api1是需要转发的请求(所有带有/api1前缀的请求都会转发给5000)</span>      target<span class="token punctuation">:</span> <span class="token string">'http://localhost:5000'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//配置转发目标地址(能返回数据的服务器地址)</span>      changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//控制服务器接收到的请求头中host字段的值</span>      <span class="token comment" spellcheck="true">/*          changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000          changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:3000          changeOrigin默认值为false，但我们一般将changeOrigin值设为true      */</span>      pathRewrite<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">'^/api1'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//去除请求前缀，保证交给后台服务器的是正常请求地址(必须配置)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token string">'/api2'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       target<span class="token punctuation">:</span> <span class="token string">'http://localhost:5001'</span><span class="token punctuation">,</span>      changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      pathRewrite<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">'^/api2'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ol><p>说明：</p><ol><li>优点：可以配置多个代理，可以灵活的控制请求是否走代理。</li><li>缺点：配置繁琐，前端请求资源时必须加前缀。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react学习二</title>
      <link href="/2023/08/16/react-xue-xi-er/"/>
      <url>/2023/08/16/react-xue-xi-er/</url>
      
        <content type="html"><![CDATA[<h2 id="React-入门学习（十四）–-redux-基本使用"><a href="#React-入门学习（十四）–-redux-基本使用" class="headerlink" title="React 入门学习（十四）– redux 基本使用"></a>React 入门学习（十四）– redux 基本使用</h2><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在了解了 Antd 组件库之后，我们现在开始学习了 Redux ，在我们之前写的案例当中，例如：todolist 案例，GitHub 搜索案例当中，我们对于状态的管理，都是通过 state 来实现的，比如，我们在给兄弟组件传递数据时，需要先将数据传递给父组件，再由父组件转发 给它的子组件。这个过程十分的复杂，后来我们又学习了<strong>消息的发布订阅</strong>，我们通过 <strong>pubsub</strong> 库，实现了消息的转发，直接将数据发布，由兄弟组件订阅，实现了兄弟组件间的数据传递。但是，随着我们的需求不断地提升，我们需要进行更加复杂的数据传递，更多层次的数据交换。<strong>因此我们为何不可以将所有的数据交给一个中转站，这个中转站独立于所有的组件之外，由这个中转站来进行数据的分发，这样不管哪个组件需要数据，我们都可以很轻易的给他派发。</strong></p><p>而有这么一个库就可以帮助我们来实现，那就是 Redux ，它可以帮助我们实现集中式状态管理</p><h2 id="1-什么情况使用-Redux-？"><a href="#1-什么情况使用-Redux-？" class="headerlink" title="1. 什么情况使用 Redux ？"></a>1. 什么情况使用 Redux ？</h2><p>首先，我们先明晰 <code>Redux</code> 的作用 ，实现集中式状态管理。</p><p> <code>Redux</code>  适用于多交互、多数据源的场景。简单理解就是<strong>复杂</strong></p><p>从组件角度去考虑的话，当我们有以下的应用场景时，我们可以尝试采用 <code>Redux</code> 来实现</p><ol><li>某个组件的状态需要共享时</li><li>一个组件需要改变其他组件的状态时</li><li>一个组件需要改变全局的状态时</li></ol><p>除此之外，还有很多情况都需要使用 Redux 来实现（还没有学  hook，或许还有更好的方法）</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210909194446988.png" alt="image-20210909194446988"></p><p>（从掘友的文章里截的图）</p><p>这张图，非常形象的将纯 React 和 采用 Redux 的区别体现了出来</p><h2 id="2-Redux-的工作流程"><a href="#2-Redux-的工作流程" class="headerlink" title="2. Redux 的工作流程"></a>2. Redux 的工作流程</h2><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210909194900532.png" alt="image-20210909194900532"></p><p> 首先组件会在 Redux 中派发一个 <code>action</code> 方法，通过调用 <code>store.dispatch</code> 方法，将 <code>action</code> 对象派发给 <code>store</code> ，当 <code>store</code> 接收到 <code>action</code> 对象时，会将先前的 <code>state</code> 与传来的 <code>action</code> 一同发送给 <code>reducer</code> ，<code>reducer</code>  在接收到数据后，进行数据的更改，返回一个新的状态给 <code>store</code> ，最后由 <code>store</code> 更改 <code>state</code> </p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/11/12/16e5fd1597faec4d~tplv-t2oaga2asx-watermark.awebp" alt="img"></p><p>（图来自掘金社区，侵删）</p><h2 id="3-Redux-三个核心概念"><a href="#3-Redux-三个核心概念" class="headerlink" title="3. Redux 三个核心概念"></a>3. Redux 三个核心概念</h2><h4 id="1-store"><a href="#1-store" class="headerlink" title="1. store"></a>1. store</h4><p><code>store</code> 是 Redux 的核心，可以理解为是 Redux 的数据中台，我们可以将任何我们想要存放的数据放在 <code>store</code> 中，在我们需要使用这些数据时，我们可以从中取出相应的数据。因此我们需要先创建一个 <code>store</code> ，在 Redux 中可以使用 <code>createStore</code> API 来创建一个 <code>store</code> </p><p>在生产中，我们需要在 <code>src</code> 目录下的 <code>redux</code> 文件夹中新增一个 <code>store.js</code> 文件，在这个文件中，创建一个 <code>store</code> 对象，并暴露它</p><p>因此我们需要从 <code>redux</code> 中暴露两个方法 </p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    createStore<span class="token punctuation">,</span>    applyMiddleware<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'redux'</span></code></pre><p>并引入为 count 组件服务的 reducer</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> countReducer <span class="token keyword">from</span> <span class="token string">'./count_reducer'</span></code></pre><p>最后调用 <code>createStore</code> 方法来暴露 <code>store</code> </p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span>countReducer<span class="token punctuation">,</span> <span class="token function">applyMiddleware</span><span class="token punctuation">(</span>thunk<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>这里采用了中间件，本文应该不会写到~</p><p>在 <code>store</code> 对象下有一些常用的内置方法</p><p>获取当前时刻的 <code>store</code> ，我们可以采用 <code>getStore</code> 方法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> state <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在前面我们的流程图中，我们需要通过 <code>store</code> 中的 <code>dispatch</code> 方法来派生一个 <code>action</code> 对象给 <code>store</code></p><pre class=" language-js"><code class="language-js">store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`action对象`</span></span><span class="token punctuation">)</span></code></pre><p>最后还有一个 <code>subscribe</code> 方法，这个方法可以帮助我们订阅 <code>store</code> 的改变，只要 <code>store</code> 发生改变，这个方法的回调就会执行</p><p>为了监听数据的更新，我们可以将 <code>subscribe</code> 方法绑定在组件挂载完毕生命周期函数上，但是这样，当我们的组件数量很多时，会比较的麻烦，因此我们可以直接将 <code>subscribe</code> 函数用来监听整个 <code>App</code>组件的变化</p><pre class=" language-js"><code class="language-js">store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span> <span class="token operator">&lt;</span> App <span class="token operator">/</span><span class="token operator">></span> <span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h4 id="2-action"><a href="#2-action" class="headerlink" title="2. action"></a>2. action</h4><p><code>action</code> 是 <code>store</code> 中唯一的数据来源，一般来说，我们会通过调用 <code>store.dispatch</code> 将 action 传到 store </p><p>我们需要传递的 <code>action</code> 是一个对象，它必须要有一个 <code>type</code> 值</p><p>例如，这里我们暴露了一个用于返回一个 <code>action</code> 对象的方法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> createIncrementAction <span class="token operator">=</span> data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    type<span class="token punctuation">:</span> INCREMENT<span class="token punctuation">,</span>    data<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>我们调用它时，会返回一个 <code>action</code> 对象</p><h4 id="3-reducer"><a href="#3-reducer" class="headerlink" title="3. reducer"></a>3. reducer</h4><p>在 Reducer 中，我们需要指定状态的操作类型，要做怎样的数据更新，因此这个类型是必要的。</p><p>reducer 会根据 action 的指示，对 state 进行对应的操作，然后返回操作后的 state </p><p>如下，我们对接收的 action 中传来的 type 进行判断</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">countReducer</span><span class="token punctuation">(</span>preState <span class="token operator">=</span> initState<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        type<span class="token punctuation">,</span>        data    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> action<span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> INCREMENT<span class="token punctuation">:</span>            <span class="token keyword">return</span> preState <span class="token operator">+</span> data        <span class="token keyword">case</span> DECREMENT<span class="token punctuation">:</span>            <span class="token keyword">return</span> preState <span class="token operator">-</span> data        <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> preState    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>更改数据，返回新的状态</p><h2 id="4-创建-constant-文件"><a href="#4-创建-constant-文件" class="headerlink" title="4. 创建 constant 文件"></a>4. 创建 constant 文件</h2><p>在我们正常的编码中，有可能会出现拼写错误的情况，但是我们会发现，拼写错误了不一定会报错，因此就会比较难搞。</p><p>我们可以在 <code>redux</code> 目录下，创建一个 <code>constant</code> 文件，这个文件用于定义我们代码中常用的一些变量，例如</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> INCREMENT <span class="token operator">=</span> <span class="token string">'increment'</span><span class="token keyword">export</span> <span class="token keyword">const</span> DECREMENT <span class="token operator">=</span> <span class="token string">'decrement'</span></code></pre><p>将这两个单词写在 <code>constant</code> 文件中，并对外暴露，当我们需要使用时，我们可以引入这个文件，并直接使用它的名称即可</p><p>直接使用 <code>INCREMENT</code> 即可</p><h2 id="5-实现异步-action"><a href="#5-实现异步-action" class="headerlink" title="5. 实现异步 action"></a>5. 实现异步 action</h2><p>一开始，我们直接调用一个异步函数，这虽然没有什么问题，但是难道 redux 就不可以实现了吗？</p><pre class=" language-js"><code class="language-js">incrementAsync <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> value <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>selectNumber    <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> count <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> count<span class="token punctuation">:</span> count <span class="token operator">+</span> value <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>我们可以先尝试将它封装到 <code>action</code> 对象中调用</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> createIncrementAsyncAction <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> time<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 无需引入 store ，在调用的时候是由 store 调用的</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>dispatch<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">createIncrementAction</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>当我们点击异步加操作时，我们会调用这个函数，在这个函数里接收一个延时加的时间，还有action所需的数据，和原先的区别只在于返回的时一个定时器函数</p><p>但是如果仅仅这样，很显然是会报错的，它默认需要接收一个对象</p><p>如果我们需要实现传入函数，那我们就需要告诉：你只需要默默的帮我执行以下这个函数就好！</p><p>这时我们就需要引入中间件，在原生的 <code>redux</code> 中暴露出 <code>applyMiddleware</code> 中间件执行函数，并引入 <code>redux-thunk</code> 中间件（需要手动下载）</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> thunk <span class="token keyword">from</span> <span class="token string">'redux-thunk'</span></code></pre><p>通过第二个参数传递下去就可以了</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span>countReducer<span class="token punctuation">,</span> <span class="token function">applyMiddleware</span><span class="token punctuation">(</span>thunk<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>注意：异步 action 不是必须要写的，完全可以自己等待异步任务的结果后再去分发同步action</p><blockquote><p>采用 <code>react-thunk</code> 能让异步代码像同步代码一样执行，在 <code>redux</code> 中我们也是可以实现异步的，但是这样我们的代码中会有很多异步的细节，这不是我们想看到的，利用 <code>react-thunk</code> 之类的库，就能让我们只关心我们的业务</p></blockquote><h2 id="6-Redux-三大原则"><a href="#6-Redux-三大原则" class="headerlink" title="6. Redux 三大原则"></a>6. Redux 三大原则</h2><p>理解好 Redux 有助于我们更好的理解接下来的 React -Redux</p><h3 id="第一个原则"><a href="#第一个原则" class="headerlink" title="第一个原则"></a>第一个原则</h3><p><strong>单向数据流</strong>：整个 Redux 中，数据流向是单向的</p><p>UI 组件 —&gt;   action  —&gt;  store  —&gt;  reducer —&gt;  store</p><h3 id="第二个原则"><a href="#第二个原则" class="headerlink" title="第二个原则"></a>第二个原则</h3><p><strong>state 只读</strong>：在 Redux 中不能通过直接改变 state ，来控制状态的改变，如果想要改变 state ，则需要触发一次 action。通过 action 执行 reducer</p><h3 id="第三个原则"><a href="#第三个原则" class="headerlink" title="第三个原则"></a>第三个原则</h3><p><strong>纯函数执行</strong>：每一个reducer 都是一个纯函数，不会有任何副作用，返回是一个新的 state，state 改变会触发 store 中的 subscribe</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://juejin.cn/post/6844903998139400200">Redux + React-router 的入门📖和配置👩🏾‍💻教程</a></p><p>小册：<a href="https://juejin.cn/book/6945998773818490884">React 进阶实践指南</a></p><hr><blockquote><p>非常感谢您的阅读，欢迎提出你的意见，有什么问题欢迎指出，谢谢！🎈</p></blockquote><h2 id="React-入门学习（十五）–-React-Redux-基本使用"><a href="#React-入门学习（十五）–-React-Redux-基本使用" class="headerlink" title="React 入门学习（十五）– React-Redux 基本使用"></a>React 入门学习（十五）– React-Redux 基本使用</h2><h2 id="引言-1"><a href="#引言-1" class="headerlink" title="引言"></a>引言</h2><p>在前面我们学习了 Redux ，我们在写案例的时候，也发现了它存在着一些问题，例如组件无法状态无法公用，每一个状态组件都需要通过订阅来监视，状态更新会影响到全部组件更新，面对着这些问题，React 官方在 redux 基础上提出了 React-Redux 库</p><p>在前面的案例中，我们如果把 store 直接写在了 React 应用的顶层 props 中，各个子组件，就能访问到顶层 props</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>顶层组件 store<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>store<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span>  <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>顶层组件<span class="token operator">/</span><span class="token operator">></span></code></pre><p>这就类似于 React-Redux</p><h2 id="容器组件和-UI-组件"><a href="#容器组件和-UI-组件" class="headerlink" title="容器组件和 UI 组件"></a>容器组件和 UI 组件</h2><ol><li>所有的 UI 组件都需要有一个容器组件包裹</li><li>容器组件来负责和 Redux 打交道，可以随意使用 Redux 的API</li><li>UI 组件无任何 Redux API</li><li>容器组件用于处理逻辑，UI 组件只会负责渲染和交互，不处理逻辑</li></ol><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210910094426268.png" alt="image-20210910094426268"></p><p>在我们的生产当中，我们可以直接将 UI 组件写在容器组件的代码文件当中，这样就无需多个文件</p><p>首先，我们在 src 目录下，创建一个 <code>containers</code> 文件夹，用于存放各种容器组件，在该文件夹内创建 <code>Count</code> 文件夹，即表示即将创建 Count 容器组件，再创建 <code>index.jsx</code> 编写代码</p><p>要实现容器组件和 UI 组件的连接，我们需要通过 <code>connect</code> 来实现</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 引入UI组件</span><span class="token keyword">import</span> CountUI <span class="token keyword">from</span> <span class="token string">'../../components/Count'</span><span class="token comment" spellcheck="true">// 引入 connect 连接UI组件</span><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>connect<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'react-redux'</span><span class="token comment" spellcheck="true">// 建立连接</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>CountUI<span class="token punctuation">)</span></code></pre><p>后面还会详细讲到</p><h2 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a>Provider</h2><p>由于我们的状态可能会被很多组件使用，所以 React-Redux 给我们提供了一个 Provider 组件，可以全局注入 redux 中的 store ，只需要把 Provider 注册在根部组件即可</p><p>例如，当以下组件都需要使用 store 时，我们需要这么做，但是这样徒增了工作量，很不便利</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>Count store<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>store<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 示例 */</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>Demo1 store<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>store<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>Demo1 store<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>store<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>Demo1 store<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>store<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>Demo1 store<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>store<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>Demo1 store<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>store<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">></span></code></pre><p>我们可以这么做：在 src 目录下的 <code>index.js</code> 文件中，引入 <code>Provider</code> ，直接用 <code>Provider</code> 标签包裹 <code>App</code> 组件，将 <code>store</code> 写在 <code>Provider</code> 中即可</p><pre class=" language-js"><code class="language-js">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>Provider store<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>store<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span>    <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这样我们在 <code>App.jsx</code> 文件中，组件无需手写指定 <code>store</code> ，即可使用 <code>store</code> </p><h2 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h2><p>在前面我们看到的 react-redux 原理图时，我们会发现容器组件需要给 UI 组件传递状态和方法，并且是通过 <code>props</code> 来传递，看起来很简单。但是，我们会发现容器组件中似乎没有我们平常传递 <code>props</code> 的情形</p><p>这时候就需要继续研究一下容器组件中的唯一一个函数 <code>connect</code> </p><p>connect 方法是一个连接器，用于连接容器组件和 UI 组件，它第一次执行时，接收4个参数，这些参数都是<strong>可选的</strong>，它执行的执行的结果还是一个函数，第二次执行接收一个 UI 组件</p><p>第一次执行时的四个参数：<code>mapStateToProps</code> 、<code>mapDispatchToProps</code> 、<code>mergeProps</code>、<code>options</code></p><h3 id="mapStateToProps"><a href="#mapStateToProps" class="headerlink" title="mapStateToProps"></a>mapStateToProps</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> mapStateToProps <span class="token operator">=</span> state <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> count<span class="token punctuation">:</span> state <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>它接收  <code>state</code> 作为参数，并且返回一个对象，这个对象标识着 UI 组件的同名参数，</p><p>返回的对象中的 key 就作为传递给 UI 组件 props 的 key，value 就作为 props 的 value</p><p>如上面的代码，我们可以在 UI 组件中直接通过 props 来读取 <code>count</code> 值</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>h1<span class="token operator">></span>当前求和为：<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>count<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span></code></pre><p>这样我们就打通了 UI 组件和容器组件间的状态传递，那如何传递方法呢？</p><h3 id="mapDispatchToProps"><a href="#mapDispatchToProps" class="headerlink" title="mapDispatchToProps"></a>mapDispatchToProps</h3><p>connect 接受的第二个参数是 <code>mapDispatchToProps</code> 它是用于建立 UI 组件的参数到 <code>store.dispacth</code> 方法的映射</p><p>我们可以把参数写成对象形式，在这里面定义 action 执行的方法，例如 <code>jia</code> 执行什么函数，<code>jian</code> 执行什么函数？</p><p>我们都可以在这个参数中定义，如下定义了几个方法对应的操作函数</p><pre class=" language-js"><code class="language-js"><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    jia<span class="token punctuation">:</span> createIncrementAction<span class="token punctuation">,</span>    jian<span class="token punctuation">:</span> createDecrementAction<span class="token punctuation">,</span>    jiaAsync<span class="token punctuation">:</span> createIncrementAsyncAction<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>写到这里其实 <code>connect</code> 已经比较完善了，但是你可以仔细想想 <code>redux</code> 的工作流程</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210909194900532.png" alt="image-20210909194900532"></p><p>似乎少了点什么，我们在这里调用了函数，创建了 <code>action</code> 对象，但是好像 <code>store</code> 并没有执行 <code>dispatch</code> ，那是不是断了呢？执行不了呢？</p><p>其实这里 <code>react-redux</code> 已经帮我们做了优化，当调用 <code>actionCreator</code> 的时候，会立即发送 <code>action</code> 给 <code>store</code> 而不用手动的 <code>dispatch</code></p><ul><li>自动调用 dispatch</li></ul><h2 id="完整开发"><a href="#完整开发" class="headerlink" title="完整开发"></a>完整开发</h2><p>首先我们在 <code>containers</code> 文件夹中，直接编写我们的容器组件，无需编写 UI 组件</p><p>先打 <code>rcc</code> 打出指定代码段，然后暴露出 <code>connect</code> 方法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> connect <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'react-redux'</span></code></pre><p>从 <code>action</code> 文件中暴露创建 <code>action</code> 的方法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>createIncrementAction<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'../../redux/count_action'</span></code></pre><p>编写 UI 组件，简单写个 demo，绑定 props 和方法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>h2<span class="token operator">></span>当前求和为：<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>count<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>add<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span>点我加<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p> 调用 <code>connect</code> 包装暴露 UI 组件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>    state <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> count<span class="token punctuation">:</span> state <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 状态</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> jia<span class="token punctuation">:</span> createIncrementAction <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 方法</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>第一次执行的参数就直接传递 <code>state</code> 和一个指定 <code>action</code> 的对象</p><hr><blockquote><p>非常感谢您的阅读，欢迎提出你的意见，有什么问题欢迎指出，谢谢！🎈</p></blockquote><h2 id="React-入门学习（十六）–-数据共享"><a href="#React-入门学习（十六）–-数据共享" class="headerlink" title="React 入门学习（十六）– 数据共享"></a>React 入门学习（十六）– 数据共享</h2><h2 id="引言-2"><a href="#引言-2" class="headerlink" title="引言"></a>引言</h2><p>在写完了基本的 Redux 案例之后，我们可以尝试一些更实战性的操作，比如我们可以试试多组件间的状态传递，相互之间的交互</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/react-redux-demo.gif" alt="react-redux-demo"></p><p>如上动图所示，我们想要实现上面的案例，采用纯 React 来实现是比较困难的，我们需要<strong>很多层的数据交换</strong>才能实现，但是我们如果采用 Redux 来实现会变得非常简单</p><p>因为 Redux <strong>打通了组件间的隔阂</strong>，我们可以自由的进行数据交换，所有存放在 <code>store</code> 中的数据都可以实现共享，那我们接下来看看如何实现的吧~</p><h2 id="1-编写-Person-组件"><a href="#1-编写-Person-组件" class="headerlink" title="1. 编写 Person 组件"></a>1. 编写 Person 组件</h2><blockquote><p>上面的 Count 组件，已经在前面几篇写过了，但是我没有记录详细的实现过程，只是做了一些小小的总结（我摸鱼了）</p></blockquote><p>不管如何，我们先来实现一个 Person 组件吧</p><p>首先我们需要在 <code>containers</code> 文件夹下编写 Person 组件的<strong>容器组件</strong></p><p>如何编写一个容器组件呢？（上一篇也讲过了）</p><p>首先我们需要编写 <code>index.jsx</code> 文件，在这个文件里面编写 Person 组件的 <strong>UI 组件</strong>，并使用 <code>connect</code> 函数将它包装，<strong>映射它的状态和方法</strong></p><h4 id="编写-UI-组件架构"><a href="#编写-UI-组件架构" class="headerlink" title="编写 UI 组件架构"></a><strong>编写 UI 组件架构</strong></h4><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>h2<span class="token operator">></span>我是 Person 组件<span class="token punctuation">,</span>上方组件求和为<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>countAll<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>    <span class="token operator">&lt;</span>input ref<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>c <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>nameNode <span class="token operator">=</span> c<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> type<span class="token operator">=</span><span class="token string">"text"</span> placeholder<span class="token operator">=</span><span class="token string">"输入名字"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input ref<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>c <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>ageNode <span class="token operator">=</span> c<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> type<span class="token operator">=</span><span class="token string">"text"</span> placeholder<span class="token operator">=</span><span class="token string">"输入年龄"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>addPerson<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span>添加<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span>ul<span class="token operator">></span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>persons<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>id<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>name<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>age<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre><p>我们可以看到这里采用了 <code>ref</code> 来获取到当前事件触发的节点，并通过 <code>this.addPerson</code> 的方式给按钮绑定了一个点击事件</p><h4 id="编写点击事件回调"><a href="#编写点击事件回调" class="headerlink" title="编写点击事件回调"></a><strong>编写点击事件回调</strong></h4><pre class=" language-js"><code class="language-js">addPerson <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nameNode<span class="token punctuation">.</span>value    <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ageNode<span class="token punctuation">.</span>value    <span class="token keyword">const</span> personObj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> id<span class="token punctuation">:</span> <span class="token function">nanoid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>personObj<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>nameNode<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>ageNode<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>在这里我们需要处理输入框中的数据，并且将这些数据用于创建一个 <code>action</code> 对象，传递给 <code>store</code> 进行状态的更新</p><p>在这里我们需要回顾的是，这里我们使用了一个 <code>nanoid</code> 库，这个库我们之前也有使用过</p><h5 id="下载，引入，暴露"><a href="#下载，引入，暴露" class="headerlink" title="下载，引入，暴露"></a><strong>下载，引入，暴露</strong></h5><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> nanoid <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'nanoid'</span></code></pre><p>暴露的 <code>nanoid</code> 是一个函数，我们每一次调用时，都会返回一个不重复的数，用于确保 <code>id</code> 的唯一性，同时在后面的 <code>map</code> 遍历的过程中，我们将 <code>id</code> 作为了 <code>key</code> 值，这样也确保了 <code>key</code> 的唯一性，关于 <code>key</code> 的作用，可以看看 <code>diffing</code> 算法的文章</p><h4 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a><strong>状态管理</strong></h4><p>在这里我们需要非常熟练的采用 <code>this.props.add</code> 的方式来更新状态</p><p>那么它是如何实现状态更新的呢？我们来看看</p><p>在我们调用 <code>connect</code> 函数时，我们第一次调用时传入的第二个参数，就是用于传递方法的，我们传递了一个 <code>add</code> 方法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>    state <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> persons<span class="token punctuation">:</span> state<span class="token punctuation">.</span>person<span class="token punctuation">,</span> countAll<span class="token punctuation">:</span> state<span class="token punctuation">.</span>count <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//映射状态</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> add<span class="token punctuation">:</span> createAddPersonAction <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>它的原词是：<strong>mapDispatchToProps</strong></p><p>我的理解是，传入的东西会被映射映射成 <code>props</code> 对象下的方法，这也是我们能够在 <code>props</code> 下访问到 <code>add</code> 方法的原因</p><blockquote><p>对于这一块 <code>connect</code> ，我们必须要能够形成自己的理解，这里非常的重要，它实现了数据的交互，不至于一个组件，而是全部组件</p></blockquote><h4 id="我是如何理解的呢？"><a href="#我是如何理解的呢？" class="headerlink" title="我是如何理解的呢？"></a><strong>我是如何理解的呢？</strong></h4><blockquote><p>想象一个 store 仓库，在我们这个案例当中，Count 组件需要存放 count 值在 store 中，Person 组件需要存放新增用户对象在 store 中，我们要把这两个数据存放在一个对象当中。当某个组件需要使用 store 中的值时，可以通过 connect 中的两个参数来获取，例如这里我们需要使用到 Count 组件的值，可以通过 <code>.count</code> 来从 store 中取值。</p></blockquote><p>也就是说，所有的值都存放在 store 当中，通过点运算符来获取，所有的操作 store 的方法都需要通过 action 来实现。<strong>当前组件需要使用的数据都需要在 <code>connect</code> 中暴露</strong></p><h2 id="2-编写-reducer"><a href="#2-编写-reducer" class="headerlink" title="2. 编写 reducer"></a>2. 编写 reducer</h2><p>首先，我们需要明确 reducer 的作用，它是用来干什么的？</p><p><strong>根据操作类型来指定状态的更新</strong></p><p>也就是说当我们点击了<strong>添加按钮</strong>后，会将输入框中的数据整合成一个对象，作为当前 action 对象的 data 传递给 reducer</p><p>我们可以看看我们编写的 action 文件，和我们想的一样</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> ADD_PERSON <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">"../constant"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建一个人的action 对象</span><span class="token keyword">export</span> <span class="token keyword">const</span> createAddPersonAction <span class="token operator">=</span> <span class="token punctuation">(</span>personObj<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  type<span class="token punctuation">:</span> ADD_PERSON<span class="token punctuation">,</span>  data<span class="token punctuation">:</span> personObj<span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当 reducer 接收到 action 对象时，会对 type 进行判断</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">personReducer</span><span class="token punctuation">(</span>preState <span class="token operator">=</span> initState<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> type<span class="token punctuation">,</span> data <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> action<span class="token punctuation">;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> ADD_PERSON<span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span>data<span class="token punctuation">,</span><span class="token operator">...</span>preState<span class="token punctuation">]</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> preState  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>一般都采用 <code>switch</code> 来编写</p><p><strong>这里有个值得注意的地方是</strong>，这个 <code>personReducer</code> 函数是一个纯函数，什么是纯函数呢？这个是高阶函数部分的知识了，纯<strong>函数是一个不改变参数的函数，也就是说，传入的参数是不能被改变的。</strong></p><p>为什么要提这个呢？在我们 return 时，有时候会想通过<strong>数组的 API</strong> 来在数组前面塞一个值，不也可以吗？</p><p>但是我们要采用 <code>unshirt</code> 方法，这个方法是会改变原数组的，也就是我们传入的参数会被改变，因此这样的方法是不可行的！</p><h2 id="3-打通数据共享"><a href="#3-打通数据共享" class="headerlink" title="3. 打通数据共享"></a>3. 打通数据共享</h2><p>写到这里，或许已经写完了，但是有些细节还是需要注意一下</p><p>采用 Redux 来进行组件的数据交互真的挺方便。</p><p>我们可以在 Count 组件中引入 Person 组件存在 store 中的状态。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>state <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> count<span class="token punctuation">:</span> state<span class="token punctuation">.</span>count<span class="token punctuation">,</span> personNum<span class="token punctuation">:</span> state<span class="token punctuation">.</span>person<span class="token punctuation">.</span>length <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token operator">...</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Count<span class="token punctuation">)</span></code></pre><p>在这里我们将 store 中的 person 数组的长度暴露出来这样 Count 组件就可以直接通过 props 来使用了</p><p>同样的我们也可以在 Person 组件中使用 Count 组件的值</p><p>从而实现了我们的这个 Demo</p><h2 id="4-最终优化"><a href="#4-最终优化" class="headerlink" title="4. 最终优化"></a>4. 最终优化</h2><ol><li>利用对象的简写方法，将键名和键值同名，从而只写一个名即可</li><li>合并 reducer ，我们可以将多个 reducer文件 写在一个 index 文件当中，需要采用 <code>combineReducers</code> 来合并</li></ol><h2 id="5-项目打包"><a href="#5-项目打包" class="headerlink" title="5. 项目打包"></a>5. 项目打包</h2><p>执行 <code>npm run build</code> 命令，即可打包项目，打包完成后，会生成一个 <code>build</code> 文件，这个文件我们需要部署到服务器上才能运行</p><p>我们可以放在自己的服务器上即可</p><p>但是我遇到了一个问题</p><p>打包后的文件路径少了一个 <code>.</code> 导致文件无法找到，报错无法执行，我通过手动添加的方式解决了，不知道还有没有什么其他方法解决</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/react-redux-demo.gif" alt="react-redux-demo"></p><blockquote><p>也可以采用 <code>npm i serve -g</code> 安装，如何通过 serve ‘指定文件夹’ 来执行</p></blockquote><hr><blockquote><p>非常感谢您的阅读，欢迎提出你的意见，有什么问题欢迎指出，谢谢！🎈</p></blockquote><h2 id="React-入门学习（十七）–-React-扩展"><a href="#React-入门学习（十七）–-React-扩展" class="headerlink" title="React 入门学习（十七）– React 扩展"></a>React 入门学习（十七）– React 扩展</h2><h2 id="引言-3"><a href="#引言-3" class="headerlink" title="引言"></a>引言</h2><p>学到这里 React 已经学的差不多了，接下来就学习一些 React 扩展内容，可以帮助我们更好的开发和理解，这部分的知识还有很多的东西可以探寻，比如：网红 React-Hook，就是我们需要注意的地方，打了 100 多集的类式组件，出来一个 hooks ，现在用函数式组件偏多了………….</p><p>所以 Hooks 就需要我们深入的学习一下了，下面我们就一起来看看扩展部分有哪些内容吧</p><h2 id="1-setState"><a href="#1-setState" class="headerlink" title="1. setState"></a>1. setState</h2><h3 id="对象式-setState"><a href="#对象式-setState" class="headerlink" title="对象式 setState"></a>对象式 setState</h3><p>首先在我们以前的认知中，<code>setState</code> 是用来更新状态的，我们一般给它传递一个对象，就像这样</p><pre class=" language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    count<span class="token punctuation">:</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>这样每次更新都会让 <code>count</code> 的值加 1。这也是我们最常做的东西</p><p>这里我们做一个案例，点我加 1，一个按钮一个值，我要在控制台输出每次的 <code>count</code> 的值</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/react-extension-demo1.gif" alt="react-extension-demo1"></p><p>那我们需要在控制台输出，要如何实现呢？</p><p>我们会考虑在 <code>setState</code> 更新之后 <code>log</code> 一下</p><pre class=" language-js"><code class="language-js">add <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> count <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        count<span class="token punctuation">:</span> count <span class="token operator">+</span> <span class="token number">1</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>因此可能会写出这样的代码，看起来很合理，在调用完 <code>setState</code> 之后，输出 <code>count</code> </p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/react-extension-demo1-2.gif" alt="react-extension-demo1-2"></p><p>我们发现显示的 <code>count</code> 和我们控制台输出的 <code>count</code> 值是不一样的</p><p>这是因为，我们调用的 <code>setState</code> 是同步事件，但是它的作用是让 React 去更新数据，而 React 不会立即的去更新数据，这是一个异步的任务，因此我们输出的 <code>count</code> 值会是状态更新之前的数据。“React <strong>状态更新是异步的</strong>”</p><p>那我们要如何实现同步呢？</p><p>其实在 <code>setState</code> 调用的第二个参数，我们可以接收一个函数，这个函数会在状态更新完毕并且界面更新之后调用，我们可以试试</p><pre class=" language-js"><code class="language-js">add <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> count <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        count<span class="token punctuation">:</span> count <span class="token operator">+</span> <span class="token number">1</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>我们将 <code>setState</code> 填上第二个参数，输出更新后的 <code>count</code> 值</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/react-extension-demo1-3.gif" alt="react-extension-demo1-3"></p><p>这样我们就能成功的获取到最新的数据了，如果有这个需求我们可以在第二个参数输出噢~</p><h3 id="函数式-setState"><a href="#函数式-setState" class="headerlink" title="函数式 setState"></a>函数式 setState</h3><p>这种用法我也是第一次见，函数式的 <code>setState</code> 也是接收两个参数</p><p>第一个参数是 <code>updater</code>  ，它是一个能够返回 <code>stateChange</code> 对象的函数</p><p>第二个参数是一个回调函数，用于在状态更新完毕，界面也更新之后调用</p><p>与对象式 <code>setState</code> 不同的是，我们传递的第一个参数 <code>updater</code> 可以接收到2个参数 <code>state</code> 和 <code>props</code> </p><p>我们尝试一下</p><pre class=" language-js"><code class="language-js">add <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> count<span class="token punctuation">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/react-extension-demo2-1.gif" alt="react-extension-demo2-1"></p><p>我们也成功的实现了</p><p>我们在第一个参数中传入了一个函数，这个函数可以接收到 <code>state</code> ，我们通过更新 <code>state</code> 中的 <code>count</code> 值，来驱动页面的更新</p><p>利用函数式 <code>setState</code> 的优势还是很不错的，可以直接获得 <code>state</code> 和 <code>props</code> </p><blockquote><p>可以理解为对象式的 <code>setState</code> 是函数式 <code>setState</code> 的语法糖</p></blockquote><h2 id="2-LazyLoad"><a href="#2-LazyLoad" class="headerlink" title="2. LazyLoad"></a>2. LazyLoad</h2><p>懒加载在 React 中用的最多的就是路由组件了，页面刷新时，所有的页面都会重新加载，这并不是我们想要的，我们想要实现点击哪个路由链接再加载即可，这样避免了不必要的加载</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/react-extension-demo2-2.gif" alt="react-extension-demo2-2"></p><p>我们可以发现，我们页面一加载时，所有的路由组件都会被加载</p><p>如果我们有 100 个路由组件，但是用户只点击了几个，这就会有很大的消耗，因此我们需要做懒加载处理，<strong>我们点击哪个时，才去加载哪一个</strong></p><p>首先我们需要从 <code>react</code> 库中暴露一个 <code>lazy</code> 函数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> Component <span class="token punctuation">,</span>lazy<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span></code></pre><p>然后我们需要更改引入组件的方式</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> Home <span class="token operator">=</span> <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./Home'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">const</span> About <span class="token operator">=</span> <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./About'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>采用 <code>lazy</code> 函数包裹</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210911114307684.png" alt="image-20210911114307684"></p><p>我们会遇到这样的错误，提示我们用一个标签包裹</p><p>这里是因为，当我们网速慢的时候，路由组件就会有可能加载不出来，页面就会白屏，它需要我们来指定一个路由组件加载的东西，相对于 loading</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>Suspense fallback<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>h1<span class="token operator">></span>loading<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/home"</span> component<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Home<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>    <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/about"</span> component<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>About<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Suspense<span class="token operator">></span></code></pre><blockquote><p>在做这个案例的时候，一定不要设置重定向的东西，所有的路由我们要点击再加载</p></blockquote><p>初次登录页面的时候</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210911115542647.png" alt="image-20210911115542647"></p><p>注意噢，这些文件都不是路由组件，当我们点击了对应组件之后才会加载</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/react-extension-lazyload-2.gif" alt="react-extension-lazyload-2"></p><p>从上图我们可以看出，每次点击时，才会去请求 <code>chunk</code> 文件</p><p>那我们更改写的 <code>fallback</code> 有什么用呢？它会在页面还没有加载出来的时候显示</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/react-extension-lazyload-3.gif" alt="react-extension-lazyload-3"></p><blockquote><p>注意：因为 loading 是作为一个兜底的存在，因此 loading 是 必须提前引入的，不能懒加载</p></blockquote><h2 id="3-Hooks"><a href="#3-Hooks" class="headerlink" title="3. Hooks"></a>3. Hooks</h2><h3 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h3><p><code>hooks</code> 解决了函数式组件和类式组件的差异，让函数式组件拥有了类式组件所拥有的 <code>state</code> ，同时新增了一些 API ，让函数式组件，变得更加的灵活</p><p>首先我们需要明确一点，函数式组件<strong>没有</strong>自己的 <code>this</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>h2<span class="token operator">></span>当前求和为：<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>count<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>            <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>add<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span>点我加<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Demo</code></pre><p>利用函数式组件完成的 <strong>点我加1</strong> 案例</p><p>这里利用了一个 Hook ：<code>useState</code> </p><p>它让函数式组件能够维护自己的 <code>state</code> ，它<strong>接收一个参数</strong>，作为<strong>初始化</strong> <code>state</code> 的值，赋值给 <code>count</code>，因此 <code>useState</code> 的初始值只有<strong>第一次有效</strong>，它所映射出的两个变量 <code>count</code> 和 <code>setCount</code> 我们可以理解为 <code>setState</code> 来使用</p><blockquote><p><strong>useState 能够返回一个数组，第一个元素是 state ，第二个是更新 state 的函数</strong></p></blockquote><p>我们先看看控制台输出的什么</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210911123011304.png" alt="image-20210911123011304"></p><p><code>count</code> 是初始化的值，而 <code>setCount</code> 就像是一个 <code>action</code> 对象驱动状态更新</p><p>我们可以通过 <code>setCount</code> 来更新 <code>count</code> 的值</p><pre class=" language-js"><code class="language-js"><span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></code></pre><h3 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h3><p> 在类式组件中，提供了一些声明周期钩子给我们使用，我们可以在组件的特殊时期执行特定的事情，例如 <code>componentDidMount</code> ，能够在组件挂载完成后执行一些东西</p><p>在函数式组件中也可以实现，它采用的是 <code>effectHook</code> ，它的语法更加的简单，同时融合了 <code>componentDidUpdata</code> 生命周期，极大的方便了我们的开发</p><pre class=" language-js"><code class="language-js">React<span class="token punctuation">.</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'被调用了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>由于函数的特性，我们可以在函数中随意的编写函数，这里我们调用了 <code>useEffect</code> 函数，这个函数有多个功能</p><p>当我们像上面代码那样使用时，它相当于 <code>componentDidUpdata</code> 和 <code>componentDidMount</code> 一同使用，也就是在<strong>组件挂载和组件更新</strong>的时候都会调用这个函数</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/react-extension-hook-1.gif" alt="react-extension-hook-1"></p><p>它还可以接收第二个参数，这个参数表示它要<strong>监测的数据</strong>，也就是他要监视哪个数据的变化</p><p>当我们不需要监听任何状态变化的时候，我们可以就<strong>传递一个空数组</strong>，这样它就能当作 <code>componentMidMount</code> 来使用</p><pre class=" language-js"><code class="language-js">React<span class="token punctuation">.</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'被调用了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>这样我们只有在组件第一次挂载的时候触发</p><p>当然当页面中有多个数据源时，我们也可以选择个别的数据进行监测以达到我们想要的效果</p><pre class=" language-js"><code class="language-js">React<span class="token punctuation">.</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'被调用了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>这样，我们就只<strong>监视 count 数据的变化</strong></p><p>当我们想要在卸载一个组件之前进行一些<strong>清除定时器</strong>的操作，在类式组件中，我们会调用生命周期钩子 <code>componentDidUnmount</code> 来实现，在函数式组件中，我们的写法更为简单，我们直接在 <code>useEffect</code> 的第一个参数的返回值中实现即可<br>也就是说，第一个参数的函数体相当于 <code>componentDidMount</code> 返回体相当于 <code>componentDidUnmount</code> ，这样我们就能实现在组件即将被卸载时输出一些东西了</p><p><strong>实现卸载</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">unmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    ReactDOM<span class="token punctuation">.</span><span class="token function">unmountComponentAtNode</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>卸载前输出</strong></p><pre class=" language-js"><code class="language-js">React<span class="token punctuation">.</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'被调用了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我要被卸载了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/react-extension-hook-2.gif" alt="react-extension-hook-2"></p><p>实现了在组件即将被卸载的时候输出</p><p>因此 <code>useEffect</code> 相当于三个生命周期钩子，<code>componentDidMount</code> 、<code>componentDidUpdata</code> 、<code>componentDidUnmount</code></p><h3 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h3><p>当我们想要获取组件内的信息时，在类式组件中，我们会采用 <code>ref</code> 的方式来获取。在函数式组件中，我们可以采用也可以采用 <code>ref</code> 但是，我们需要采用 <code>useRef</code> 函数来创建一个 ref 容器，这和 <code>createRef</code> 很类似。</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> ref<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>myRef<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><p>获取 ref 值</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>myRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>即可成功的获取到 input 框中的值</p><h2 id="4-Fragment"><a href="#4-Fragment" class="headerlink" title="4. Fragment"></a>4. Fragment</h2><p>我们编写组件的时候每次都需要采用一个 <code>div</code> 标签包裹，才能让它正常的编译，但是这样会引发什么问题呢？我们打开控制台看看它的层级</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210911151643934.png" alt="image-20210911151643934"></p><p>它包裹了几层无意义的 div 标签，我们可以采用 <code>Fragment</code> 来解决这个问题</p><p>首先，我们需要从 react 中暴露出 <code>Fragment</code> ，将我们所写的内容采用 <code>Fragment</code> 标签进行包裹，当它解析到 <code>Fragment</code> 标签的时候，就会把它去掉</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210911152037120.png" alt="image-20210911152037120"></p><p>这样我们的内容就直接挂在了 <code>root</code> 标签下</p><blockquote><p>同时采用空标签，也能实现，但是它不能接收任何值，而 <code>Fragment</code> 能够接收 1 个值<code>key</code> </p></blockquote><h2 id="5-Context"><a href="#5-Context" class="headerlink" title="5. Context"></a>5. Context</h2><h4 id="仅适用于类式组件"><a href="#仅适用于类式组件" class="headerlink" title="仅适用于类式组件"></a>仅适用于类式组件</h4><p>当我们想要给子类的子类传递数据时，前面我们讲过了 redux 的做法，这里介绍的 Context 我觉得也类似于 Redux</p><p>首先我们需要引入一个 <code>MyContext</code> 组件，我们需要引用<code>MyContext</code> 下的 <code>Provider</code> </p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> MyContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> Provider <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> MyContext<span class="token punctuation">;</span></code></pre><p>用 <code>Provider</code> 标签包裹 A组件内的 B 组件，并通过 <code>value</code> 值，将数据传递给子组件，这样以 A 组件为父代组件的所有子组件都能够接受到数据</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>Provider value<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> username<span class="token punctuation">,</span> age <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span>    <span class="token operator">&lt;</span>B <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">></span></code></pre><p>但是我们需要在使用数据的组件中引入 <code>MyContext</code> </p><pre class=" language-js"><code class="language-js"><span class="token keyword">static</span> contextType <span class="token operator">=</span> MyContext<span class="token punctuation">;</span></code></pre><p>在使用时，直接从 <code>this.context</code> 上取值即可</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>username<span class="token punctuation">,</span>age<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context</code></pre><h4 id="适用于函数和类式组件"><a href="#适用于函数和类式组件" class="headerlink" title="适用于函数和类式组件"></a>适用于函数和类式组件</h4><p>由于函数式组件没有自己 <code>this</code> ，所以我们不能通过 <code>this.context</code> 来获取数据</p><p>这里我们需要从 <code>Context</code> 身上暴露出一个 <code>Consumer</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> Provider <span class="token punctuation">,</span>Consumer<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> MyContext<span class="token punctuation">;</span></code></pre><p>然后通过 <code>value</code> 取值即可</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>h3<span class="token operator">></span>我是C组件，我从A接收到的数据 <span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>      <span class="token operator">&lt;</span>Consumer<span class="token operator">></span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`$&amp;#123;value.username&amp;#125;,年龄是$&amp;#123;value.age&amp;#125;`</span></span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>Consumer<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210911161103300.png" alt="image-20210911161103300"></p><blockquote><p>因此想要在函数式组件中使用，需要引入 <code>Consumer</code></p></blockquote><h2 id="6-PureComponent"><a href="#6-PureComponent" class="headerlink" title="6. PureComponent"></a>6. PureComponent</h2><p>在我们之前一直写的代码中，我们一直使用的<code>Component</code> 是有问题存在的</p><ol><li>只要执行 <code>setState</code> ，即使不改变状态数据，组件也会调用 <code>render</code></li><li>当前组件状态更新，也会引起子组件 <code>render</code></li></ol><p>而我们想要的是只有组件的 <code>state</code> 或者 <code>props</code> 数据发生改变的时候，再调用 <code>render</code></p><p>我们可以采用重写 <code>shouldComponentUpdate</code> 的方法，但是这个方法不能根治这个问题，当状态很多时，我们没有办法增加判断</p><p>我们可以采用 <code>PureComponent</code> </p><p>我们可以从 <code>react</code> 身上暴露出 <code>PureComponent</code> 而不使用 <code>Component</code> </p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> PureComponent <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'react'</span></code></pre><p>就这~听了半天结果就只一个 <code>PureComponent</code> </p><p><code>PureComponent</code> 会对比当前对象和下一个状态的 <code>prop</code> 和 <code>state</code> ，而这个比较属于浅比较，比较基本数据类型是否相同，而对于引用数据类型，<strong>比较的是它的引用地址是否相同，这个比较与内容无关</strong></p><h2 id="7-render-props"><a href="#7-render-props" class="headerlink" title="7. render props"></a>7. render props</h2><p>采用 render props 技术，我们可以像组件内部动态传入带有内容的结构</p><blockquote><p>当我们在一个组件标签中填写内容时，这个内容会被定义为 children props，我们可以通过 <code>this.props.children</code> 来获取</p></blockquote><p>例如：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>A<span class="token operator">></span>hello<span class="token operator">&lt;</span><span class="token operator">/</span>A<span class="token operator">></span></code></pre><p>这个 hello 我们就可以通过 children 来获取</p><p>而我们所说的 render props 就是在组件标签中传入一个 render 方法，又因为属于 props ，因而被叫做了 render props</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>A render<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>C name<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><p>你可以把 <code>render</code> 看作是 <code>props</code>，只是它有特殊作用，当然它也可以用其他名字来命名</p><p>在上面的代码中，我们需要在 A 组件中预留出 C 组件渲染的位置 在需要的位置上加上<code>&#123;this.props.render(name)&#125;</code></p><p>那我们在 C 组件中，如何接收 A 组件传递的 <code>name</code> 值呢？通过 <code>this.props.name</code> 的方式</p><h2 id="8-ErrorBoundary"><a href="#8-ErrorBoundary" class="headerlink" title="8. ErrorBoundary"></a>8. ErrorBoundary</h2><p>当不可控因素导致数据不正常时，我们不能直接将报错页面呈现在用户的面前，由于我们没有办法给每一个组件、每一个文件添加判断，来确保正常运行，这样很不现实，因此我们要用到<strong>错误边界</strong>技术</p><p><strong>错误边界就是让这块组件报错的影响降到最小，不要影响到其他组件或者全局的正常运行</strong></p><blockquote><p>例如 A 组件报错了，我们可以在 A 组件内添加一小段的提示，并把错误控制在 A 组件内，不影响其他组件</p></blockquote><ul><li>我们要对容易出错的组件的父组件做手脚，而不是组件本身</li></ul><p>我们在父组件中通过 <code> getDerivedStateFromError</code> 来配置<strong>子组件</strong>出错时的处理函数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">static</span> <span class="token function">getDerivedStateFromError</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> hasError<span class="token punctuation">:</span> error <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>我们可以将 <code>hasError</code> 配置到状态当中，当 <code>hasError</code> 状态改变成 <code>error</code> 时，表明有错误发生，我们需要在组件中通过判断 <code>hasError</code> 值，来指定是否显示子组件</p><pre class=" language-js"><code class="language-js"><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>hasError <span class="token operator">?</span> <span class="token operator">&lt;</span>h2<span class="token operator">></span>出错啦<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span> <span class="token punctuation">:</span> <span class="token operator">&lt;</span>Child <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>在服务器中启动，才能正常看到效果</p></blockquote><p>可以在 <code>componentDidCatch</code> 中统计错误次数，通知编码人员进行 bug 解决</p><h2 id="9-组件通信方式总结"><a href="#9-组件通信方式总结" class="headerlink" title="9. 组件通信方式总结"></a>9. 组件通信方式总结</h2><ol><li>props<ul><li>children props</li><li>render props</li></ul></li><li>消息发布订阅<ul><li>利用 pubsub 库来实现</li></ul></li><li>集中式状态管理<ul><li>redux</li></ul></li><li>conText<ul><li>生成者-消费者</li></ul></li></ol><p><strong>选择方式</strong></p><p>父子组件采用：<code>props</code></p><p>兄弟组件采用：消息的发布订阅、redux</p><p>祖孙组件：消息发布订阅、redux、context</p><h2 id="React核心-–-React-Hooks"><a href="#React核心-–-React-Hooks" class="headerlink" title="React核心 – React-Hooks"></a>React核心 – React-Hooks</h2><h2 id="hooks-存在的意义"><a href="#hooks-存在的意义" class="headerlink" title="hooks 存在的意义"></a>hooks 存在的意义</h2><ol><li><p>hooks 之间的状态是独立的，有自己独立的上下文，不会出现混淆状态的情况</p></li><li><p>让函数有了状态管理</p></li><li><p>解决了 组件树不直观、类组件难维护、逻辑不易复用的问题</p></li><li><p>避免函数重复执行的副作用</p></li></ol><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li>利用 hooks 取代生命周期函数</li><li>让组件有了状态</li><li>组件辅助函数</li><li>处理发送请求</li><li>存取数据</li><li>做好性能优化</li></ol><h2 id="hooks-API"><a href="#hooks-API" class="headerlink" title="hooks API"></a>hooks API</h2><p>从 <code>react</code> 中引入</p><h3 id="1-useState"><a href="#1-useState" class="headerlink" title="1. useState"></a>1. useState</h3><p>给函数组件添加状态</p><ul><li>初始化以及更新组件状态</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><p>接收一个参数作为初始值，返回一个数组：第一个是状态变量，第二个是修改变量的函数</p><h3 id="2-useEffect"><a href="#2-useEffect" class="headerlink" title="2. useEffect"></a>2. useEffect</h3><p>副作用 hooks</p><ul><li>给没有生命周期的组件，添加结束渲染的信号</li></ul><p>注意：</p><ul><li>render 之后执行的 hooks</li></ul><p>第一个参数接收一个函数，在组件更新的时候执行</p><p>第二个参数接收一个数组，用来表示需要追踪的变量，依赖列表，只有依赖更新的时候才会更新内容</p><p>第一个参数的返回值，返回一个函数，在 <code>useEffect</code> 执行之前，都会先执行里面返回的函数</p><p>一般用于添加销毁事件，这样就能保证只添加一个</p><pre class=" language-js"><code class="language-js">React<span class="token punctuation">.</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'被调用了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我要被卸载了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>打印</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210914172936843.png" alt="image-20210914172936843"></p><h3 id="3-useLayoutEffect"><a href="#3-useLayoutEffect" class="headerlink" title="3. useLayoutEffect"></a>3. useLayoutEffect</h3><p>和 <code>useEffect</code> 很类似</p><p>它的作用是：在 DOM 更新完成之后执行某个操作</p><p>注意：</p><ul><li>有 DOM 操作的副作用 hooks</li><li>在 DOM 更新之后执行</li></ul><blockquote><p>执行时机在 <code>useEffect</code> 之前，其他都和 <code>useEffect</code> 都相同</p></blockquote><p><code>useEffect</code> 执行时机在 <strong>render 之后</strong></p><p><code>useLayoutEffect</code> 执行时机在 <strong>DOM 更新之后</strong></p><h3 id="4-useMemo"><a href="#4-useMemo" class="headerlink" title="4. useMemo"></a>4. useMemo</h3><p>作用：让组件中的函数跟随状态更新</p><p>注意：优化函数组件中的功能函数</p><p><strong>为了避免由于其他状态更新导致的当前函数的被迫执行</strong></p><p>第一个参数接收一个函数，第二个参数为数组的依赖列表，返回一个值</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> getDoubleNum <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ddd'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> num<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h4 id="5-useCallback"><a href="#5-useCallback" class="headerlink" title="5. useCallback"></a>5. useCallback</h4><p>作用：跟随状态更新执行</p><p>注意：</p><ul><li>只有依赖项改变时才执行</li><li><code>useMemo( () =&gt; fn, deps)</code> 相当于 <code>useCallback(fn, deps)</code></li></ul><p>不同点：</p><ol><li><code>useCallback</code> <strong>返回的是一个函数，不再是值</strong></li><li><code>useCallback</code> 缓存的是一个函数，<code>useMemo</code> 缓存的是一个值，<strong>如果依赖不更新，返回的永远是缓存的那个函数</strong></li><li>给子组件中传递  <code>props</code>  的时候，如果当前组件不更新，不会触发子组件的重新渲染</li></ol><h3 id="6-useRef"><a href="#6-useRef" class="headerlink" title="6. useRef"></a>6. useRef</h3><p>作用：长久保存数据</p><p>注意事项：</p><ul><li>返回一个子元素索引，这个索引在整个生命周期中保持不变</li><li>对象发生改变时，不通知，属性变更不重新渲染</li></ul><ol><li>保存一个值，在整个生命周期中维持不变</li><li>重新赋值 <code>ref.current</code> 不会触发重新渲染</li><li>相当于<strong>创建一个额外的容器来存储数据</strong>，我们可以在外部拿到这个值</li></ol><p>当我们通过正常的方式去获取计时器的 <code>id</code> 是无法获取的，需要通过 <code>ref</code> </p><pre class=" language-js"><code class="language-js"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    ref<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">setNum</span><span class="token punctuation">(</span>num <span class="token operator">=</span><span class="token operator">></span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'到十了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">clearInterval</span><span class="token punctuation">(</span>ref<span class="token punctuation">.</span>current<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h3 id="7-useContext"><a href="#7-useContext" class="headerlink" title="7. useContext"></a>7. useContext</h3><p>作用：带着子组件渲染</p><p>注意：</p><ul><li>上层数据发生改变，肯定会触发重新渲染</li></ul><ol><li>我们需要引入 <code>useContext</code> 和 <code>createContext</code> 两个内容</li><li>通过 <code>createContext</code> 创建一个 <code>Context</code> 句柄</li><li>通过 <code>Provider</code> 确定数据共享范围</li><li>通过 <code>value</code> 来分发数据</li><li>在子组件中，通过 <code>useContext</code> 来获取数据</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> useContext<span class="token punctuation">,</span> createContext <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">const</span> Context <span class="token operator">=</span> <span class="token function">createContext</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Hook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>num<span class="token punctuation">,</span> setNum<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>h1<span class="token operator">></span>            这是一个函数组件 <span class="token operator">-</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>num<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 确定范围</span>            <span class="token operator">&lt;</span>Context<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>num<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span>                <span class="token operator">&lt;</span>Item1 num<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>num<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span>Item2 num<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>num<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>Context<span class="token punctuation">.</span>Provider<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Item1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>Context<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>子组件<span class="token number">1</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>num<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Item2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>Context<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>子组件<span class="token number">2</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>num<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="8-useReducer"><a href="#8-useReducer" class="headerlink" title="8. useReducer"></a>8. useReducer</h3><p>作用：去其他地方借资源</p><p>注意：函数组件的 Redux 的操作</p><ol><li>创建数据仓库 <code>store</code> 和管理者 <code>reducer</code></li><li>通过 <code>useReducer(store,dispatch)</code> 来获取 <code>state</code> 和 <code>dispatch</code></li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    num<span class="token punctuation">:</span> <span class="token number">10</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">const</span> reducer <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">""</span><span class="token punctuation">:</span>            <span class="token keyword">return</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useReducer</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> store<span class="token punctuation">)</span></code></pre><p>通过 <code>dispatch</code> 去派发 <code>action</code></p><h3 id="9-自定义-hooks"><a href="#9-自定义-hooks" class="headerlink" title="9. 自定义 hooks"></a>9. 自定义 hooks</h3><p>放在 <code>utils</code> 文件夹中，以 <code>use</code> 开头命名</p><p>例如：模拟数据请求的 Hooks</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> useState<span class="token punctuation">,</span> useEffect <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">useLoadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>num<span class="token punctuation">,</span> setNum<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token function">setNum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span>num<span class="token punctuation">,</span> setNum<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> useLoadData<span class="token punctuation">;</span></code></pre><p>减少代码耦合</p><p>我们希望 reducer 能让每个组件来使用，我们自己写一个 hooks</p><p>自定义一个自己的 LocalReducer</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> useReducer <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> num<span class="token punctuation">:</span> <span class="token number">1210</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">const</span> reducer <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">"num"</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> num<span class="token punctuation">:</span> action<span class="token punctuation">.</span>num <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">...</span>state <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">useLocalReducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useReducer</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> store<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> useLocalReducer<span class="token punctuation">;</span></code></pre><ol><li>引入 react 和自己需要的 hook</li><li>创建自己的hook函数</li><li>返回一个数组，数组中第一个内容是数据，第二个是修改数据的函数</li><li>暴露自定义 hook 函数出去</li><li>引入自己的业务组件</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react学习</title>
      <link href="/2023/08/16/react-xue-xi/"/>
      <url>/2023/08/16/react-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="react学习路径"><a href="#react学习路径" class="headerlink" title="react学习路径"></a>react学习路径</h1><p>一份很好的前后端学习笔记：个人博客，react笔记是尚硅谷中的笔记 但不是很详细</p><p><a href="https://bright-boy.gitee.io/technical-notes/#/react/React%E5%BA%94%E7%94%A8(%E5%9F%BA%E4%BA%8EReact%E8%84%9A%E6%89%8B%E6%9E%B6)">React应用(基于React脚手架) (gitee.io)</a></p><p>一份很全的react学习路径</p><p><a href="https://github.com/linjunc/react-study">linjunc&#x2F;react-study: 🎉 Here are all the high-quality React articles, a React repository worth learning (github.com)</a></p><p>里面的笔记也都是尚硅谷里的，这里整理一下用作日常复习</p><h2 id="React-从入门到入土（一）–-基础知识以及-jsx-语法"><a href="#React-从入门到入土（一）–-基础知识以及-jsx-语法" class="headerlink" title="React 从入门到入土（一）– 基础知识以及 jsx 语法"></a>React 从入门到入土（一）– 基础知识以及 jsx 语法</h2><p>先附上<a href="https://zh-hans.reactjs.org/">React官网</a> ，有很多问题都要通过查询官方文档来解决，要学会查文档~</p><h2 id="一、React-简介"><a href="#一、React-简介" class="headerlink" title="一、React 简介"></a>一、React 简介</h2><h3 id="1-关于-React"><a href="#1-关于-React" class="headerlink" title="1. 关于 React"></a>1. 关于 React</h3><p>整几个面试题来认识一下~~</p><blockquote><p>什么是 React ？</p></blockquote><p><strong>React</strong> 是一个用于构建用户界面的 JavaScript 库。</p><ul><li>是一个将数据渲染为 HTML 视图的开源 JS 库</li><li>它遵循基于组件的方法，有助于构建可重用的 UI 组件</li><li>它用于开发复杂的交互式的 web 和移动 UI</li></ul><blockquote><p>React 有什么特点？</p></blockquote><ol><li>使用虚拟 DOM 而不是真正的 DOM</li><li>它可以用服务器渲染</li><li>它遵循单向数据流或数据绑定</li><li>高效</li><li>声明式编码，组件化编码</li></ol><blockquote><p>React 的一些主要优点？</p></blockquote><ol><li>它提高了应用的性能</li><li>可以方便在客户端和服务器端使用</li><li>由于使用 JSX，代码的可读性更好</li><li>使用React，编写 UI 测试用例变得非常容易</li></ol><h3 id="2-Hello-React"><a href="#2-Hello-React" class="headerlink" title="2. Hello React"></a>2. Hello React</h3><p>首先需要引入几个 react 包，我直接用的是老师下载好的</p><ul><li>React 核心库、操作 DOM 的 react 扩展库、将 jsx 转为 js 的 babel 库</li></ul><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/react1.png" alt="react1"></p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> VDOM <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span>React<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>VDOM<span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="3-虚拟-DOM-和真实-DOM-的两种创建方法"><a href="#3-虚拟-DOM-和真实-DOM-的两种创建方法" class="headerlink" title="3. 虚拟 DOM 和真实 DOM 的两种创建方法"></a>3. 虚拟 DOM 和真实 DOM 的两种创建方法</h3><h4 id="3-1-JS-创建虚拟-DOM"><a href="#3-1-JS-创建虚拟-DOM" class="headerlink" title="3.1 JS 创建虚拟 DOM"></a>3.1 JS 创建虚拟 DOM</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//1.创建虚拟DOM,创建嵌套格式的dom</span><span class="token keyword">const</span> VDOM<span class="token operator">=</span>React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>id<span class="token punctuation">:</span><span class="token string">'title'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token string">'hello,React'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//2.渲染虚拟DOM到页面</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>VDOM<span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="3-2-Jsx-创建虚拟DOM"><a href="#3-2-Jsx-创建虚拟DOM" class="headerlink" title="3.2 Jsx 创建虚拟DOM"></a>3.2 Jsx 创建虚拟DOM</h4><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">//1.创建虚拟DOM</span>    <span class="token keyword">const</span> VDOM <span class="token operator">=</span> <span class="token punctuation">(</span>  <span class="token comment" spellcheck="true">/* 此处一定不要写引号，因为不是字符串 */</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span>React<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//2.渲染虚拟DOM到页面</span>    ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>VDOM<span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p>js 的写法并不是常用的，常用jsx来写，毕竟JSX更符合书写的习惯</p></blockquote><h2 id="二、jsx-语法"><a href="#二、jsx-语法" class="headerlink" title="二、jsx 语法"></a>二、jsx 语法</h2><ol><li><p>定义虚拟DOM，不能使用<code>“”</code></p></li><li><p>标签中混入JS表达式的时候使用<code>&#123;&#125;</code></p></li></ol><pre class=" language-jsx"><code class="language-jsx">id <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span>myId<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span></code></pre><ol start="3"><li><p>样式的类名指定不能使用class，使用<code>className</code></p></li><li><p>内敛样式要使用<code>&#123;&#123;&#125;&#125;</code>包裹</p></li></ol><pre class=" language-jsx"><code class="language-jsx">style<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span>color<span class="token punctuation">:</span><span class="token string">'skyblue'</span><span class="token punctuation">,</span>fontSize<span class="token punctuation">:</span><span class="token string">'24px'</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span></code></pre><ol start="5"><li><p>不能有多个根标签，只能有一个根标签</p></li><li><p>标签必须闭合，自闭合也行</p></li><li><p>如果小写字母开头，就将标签转化为 html 同名元素，如果 html 中无该标签对应的元素，就报错；如果是大写字母开头，react 就去渲染对应的组件，如果没有就报错</p></li></ol><blockquote><p>记几个</p></blockquote><h4 id="1-注释"><a href="#1-注释" class="headerlink" title="1. 注释"></a>1. 注释</h4><p>写在花括号里</p><pre class=" language-jsx"><code class="language-jsx">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>小丞<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token entity" title="&#123;">&amp;#123;</span><span class="token comment" spellcheck="true">/*注释...*/</span><span class="token entity" title="&#125;">&amp;#125;</span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">,</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'example'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-数组"><a href="#2-数组" class="headerlink" title="2. 数组"></a>2. 数组</h4><p>JSX 允许在模板中插入数组，数组自动展开全部成员</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>小丞<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">,</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>同学<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span>arr<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'example'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="tip-JSX-小练习"><a href="#tip-JSX-小练习" class="headerlink" title="tip: JSX 小练习"></a>tip: JSX 小练习</h3><p>根据动态数据生成 <code>li</code></p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token keyword">const</span> VDOM <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token entity" title="&#123;">&amp;#123;</span>                data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token entity" title="&#123;">&amp;#123;</span>                    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;index&amp;#125;</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span>item<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span>            <span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>VDOM<span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="React-从入门到入土（二）–-面向组件编程"><a href="#React-从入门到入土（二）–-面向组件编程" class="headerlink" title="React 从入门到入土（二）– 面向组件编程"></a>React 从入门到入土（二）– 面向组件编程</h2><h2 id="一、组件的使用"><a href="#一、组件的使用" class="headerlink" title="一、组件的使用"></a>一、组件的使用</h2><p>当应用是以多组件的方式实现，这个应用就是一个组件化的应用</p><blockquote><p><strong>注意：</strong> </p><ol><li><p>组件名必须是首字母大写</p></li><li><p>虚拟DOM元素只能有一个根元素</p></li><li><p>虚拟DOM元素必须有结束标签 <code>&lt; /&gt;</code></p></li></ol></blockquote><p><strong>渲染类组件标签的基本流程</strong></p><ol><li><p>React 内部会创建组件实例对象</p></li><li><p>调用<code>render()</code>得到虚拟 DOM ,并解析为真实 DOM</p></li><li><p>插入到指定的页面元素内部</p></li></ol><h3 id="1-函数式组件"><a href="#1-函数式组件" class="headerlink" title="1. 函数式组件"></a>1. 函数式组件</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//1.先创建函数，函数可以有参数，也可以没有，但是必须要有返回值 返回一个虚拟DOM</span><span class="token keyword">function</span> <span class="token function">Welcome</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>props<span class="token punctuation">.</span>name<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.进行渲染</span>ReactDOM<span class="token punctuation">.</span><span class="token function">Render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Welcom name <span class="token operator">=</span> <span class="token string">"ljc"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面的代码经历了以下几步</p><ol><li>我们调用 <code>ReactDOM.render()</code> 函数，并传入 <code>&lt;Welcome name=&quot;ljc&quot; /&gt;</code> 作为参数。</li><li>React 调用 <code>Welcome</code> 组件，并将 <code>&#123;name: &#39;ljc&#39;&#125;</code> 作为 props 传入。</li><li><code>Welcome</code> 组件将 <code>Hello, ljc</code> 元素作为返回值。</li><li>React DOM 将 DOM 高效地更新为 <code>Hello,ljc</code>。</li></ol><h3 id="2-类式组件"><a href="#2-类式组件" class="headerlink" title="2. 类式组件"></a>2. 类式组件</h3><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/weather.gif" alt="weather"></p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    state <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>isHot<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>isHot<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state        <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1 onClick<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeWeather<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span>今天天气很<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>isHot<span class="token operator">?</span><span class="token string">'炎热'</span><span class="token punctuation">:</span><span class="token string">'凉爽'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    changeWeather <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> isHot <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isHot        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>isHot<span class="token punctuation">:</span><span class="token operator">!</span>isHot<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>MyComponent<span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>这玩意底层不简单，<code>this</code>的指向真的需要好好学习</p><p><strong>在优化过程中遇到的问题</strong></p><ol><li>组件中的 render 方法中的 this 为组件实例对象</li><li>组件自定义方法中由于开启了严格模式，this 指向 <code>undefined</code> 如何解决<ol><li>通过 bind 改变 this 指向</li><li>推荐采用箭头函数，箭头函数的 <code>this</code> 指向</li></ol></li><li>state 数据不能直接修改或者更新</li></ol><h3 id="3-其他知识"><a href="#3-其他知识" class="headerlink" title="3. 其他知识"></a>3. 其他知识</h3><p>包含表单元素的组件分为非受控租价与受控组件</p><ul><li><strong>受控组件</strong>：表单组件的输入组件随着输入并将内容存储到状态中（随时更新）</li><li><strong>非受控组件</strong>：表单组件的输入组件的内容在有需求的时候才存储到状态中（即用即取）</li></ul><h2 id="二、组件实例三大属性"><a href="#二、组件实例三大属性" class="headerlink" title="二、组件实例三大属性"></a>二、组件实例三大属性</h2><h3 id="1-state"><a href="#1-state" class="headerlink" title="1. state"></a>1. state</h3><blockquote><p>React 把组件看成是一个状态机（State Machines）。通过与用户的交互，实现不同状态，然后渲染 UI，让用户界面和数据保持一致。</p><p>React 里，只需更新组件的 state，然后根据新的 state 重新渲染用户界面（不要操作 DOM）。</p></blockquote><p>简单的说就是组件的状态，也就是该组件所存储的数据</p><p><strong>类式组件中的使用</strong></p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210720203721926.png" alt="image-20210720203721926"></p><p>使用的时候通过<code>this.state</code>调用<code>state</code>里的值</p><p>在类式组件中定义<code>state</code></p><ul><li>在构造器中初始化<code>state</code></li><li>在类中添加属性<code>state</code>来初始化</li></ul><p><strong>修改 state</strong></p><p>在<strong>类式组件</strong>的函数中，直接修改<code>state</code>值</p><pre class=" language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>weather <span class="token operator">=</span> <span class="token string">'凉爽'</span></code></pre><blockquote><p>页面的渲染靠的是<code>render</code>函数</p></blockquote><p>这时候会发现页面内容不会改变，原因是 React 中不建议 <code>state</code>不允许直接修改，而是通过类的原型对象上的方法 <code>setState()</code></p><p><strong>setState()</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>partialState<span class="token punctuation">,</span> <span class="token punctuation">[</span>callback<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><code>partialState</code>: 需要更新的状态的部分对象</li><li><code>callback</code>: 更新完状态后的回调函数</li></ul><p>有两种写法：写法1</p><pre class=" language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    weather<span class="token punctuation">:</span> <span class="token string">"凉爽"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>写法2：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 传入一个函数，返回x需要修改成的对象，参数为当前的 state</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>state <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>count<span class="token punctuation">:</span> state<span class="token punctuation">.</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>setState</code>是一种合并操作，不是替换操作</p><hr><ul><li>在执行 <code>setState</code>操作后，React 会自动调用一次 <code>render()</code></li><li><code>render()</code> 的执行次数是 1+n (1 为初始化时的自动调用，n 为状态更新的次数)</li></ul><h3 id="2-props"><a href="#2-props" class="headerlink" title="2. props"></a>2. props</h3><p>与<code>state</code>不同，<code>state</code>是组件自身的状态，而<code>props</code>则是外部传入的数据</p><p><strong>类式组件中使用</strong></p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210720211554914.png" alt="image-20210720211554914"></p><p>在使用的时候可以通过 <code>this.props</code>来获取值 类式组件的 <code>props</code>:</p><ol><li>通过在组件标签上传递值，在组件中就可以获取到所传递的值</li><li>在构造器里的<code>props</code>参数里可以获取到 <code>props</code></li><li>可以分别设置 <code>propTypes</code> 和 <code>defaultProps</code> 两个属性来分别操作 <code>props</code>的规范和默认值，两者都是直接添加在类式组件的<strong>原型对象</strong>上的（所以需要添加 <code>static</code>）</li><li>同时可以通过<code>...</code>运算符来简化</li></ol><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210720212505232.png" alt="image-20210720212505232"></p><p><strong>函数式组件中的使用</strong></p><blockquote><p>函数在使用props的时候，是作为参数进行使用的(props)</p></blockquote><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210720213304037.png" alt="image-20210720213304037"></p><p>函数组件的 <code>props</code>定义:</p><ol><li>在组件标签中传递 <code>props</code>的值</li><li>组件函数的参数为 <code>props</code></li><li>对 <code>props</code>的限制和默认值同样设置在原型对象上</li></ol><h3 id="3-refs"><a href="#3-refs" class="headerlink" title="3. refs"></a>3. refs</h3><p>Refs 提供了一种方式，允许我们访问 DOM 节点或在 <code>render</code> 方法中创建的 React 元素。</p><blockquote><p>在我们正常的操作节点时，需要采用DOM API 来查找元素，但是这样违背了 React 的理念，因此有了<code>refs</code></p></blockquote><p>有三种操作<code>refs</code>的方法，分别为：</p><ul><li>字符串形式</li><li>回调形式</li><li><code>createRef</code>形式</li></ul><p><strong>字符串形式</strong><code>refs</code></p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210720215332387.png" alt="image-20210720215332387"></p><p>虽然这个方法废弃了，但是还能用，还很好用hhh~</p><p><strong>回调形式的</strong><code>refs</code></p><p>组件实例的<code>ref</code>属性传递一个回调函数<code>c =&gt; this.input1 = c </code>（箭头函数简写），这样会在实例的属性中存储对DOM节点的引用，使用时可通过<code>this.input1</code>来使用</p><p><strong>使用方法</strong></p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>input ref<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>c <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>input1 <span class="token operator">=</span> c <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> type<span class="token operator">=</span><span class="token string">"text"</span> placeholder<span class="token operator">=</span><span class="token string">"点击按钮提示数据"</span><span class="token operator">/</span><span class="token operator">></span></code></pre><p><strong>我的理解</strong></p><p><code>c</code>会接收到当前节点作为参数，<code>ref</code>的值为函数的返回值，也就是<code>this.input1 = c</code>，因此是给实例下的<code>input1</code>赋值</p><p><strong>createRef 形式</strong>（推荐写法）</p><p>React 给我们提供了一个相应的API，它会自动的将该 DOM 元素放入实例对象中</p><p>我们先给DOM元素添加ref属性</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.MyRef&amp;#125;</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>点击弹出<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.MyRef1&amp;#125;</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>点击弹出<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>通过API，创建React的容器，会将DOM元素赋值给实例对象的名称为容器的属性的<code>current</code>，好烦..</p><pre class=" language-js"><code class="language-js">MyRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>MyRef1 <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意：专人专用，好烦，一个节点创建一个容器</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//调用</span>btnOnClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建之后，将自身节点，传入current中</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>MyRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>注意：我们不要过度的使用 ref，如果发生时间的元素刚好是需要操作的元素，就可以使用事件对象去替代。过度使用有什么问题我也不清楚，可能有 bug 吧</p><h3 id="4-事件处理"><a href="#4-事件处理" class="headerlink" title="4. 事件处理"></a>4. 事件处理</h3><ol><li><p>React 使用的是自定义事件，而不是原生的 DOM 事件</p></li><li><p>React 的事件是通过事件委托方式处理的（为了更加的高效）</p></li><li><p>可以通过事件的 <code>event.target</code>获取发生的 DOM 元素对象，可以尽量减少 <code>refs</code>的使用</p></li></ol><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210720222147149.png" alt="image-20210720222147149"></p><h2 id="三、高阶函数"><a href="#三、高阶函数" class="headerlink" title="三、高阶函数"></a>三、高阶函数</h2><p>关于这部分的知识，之前的笔记有记过了，我真是太棒了</p><p>链接<a href="https://linjc.blog.csdn.net/article/details/116765732">高阶函数</a>，关于AOP，偏函数，柯里化都有不错的记录，感觉还是不错的</p><h2 id="React-入门（三）-–-生命周期-LifeCycle"><a href="#React-入门（三）-–-生命周期-LifeCycle" class="headerlink" title="React 入门（三） – 生命周期 LifeCycle"></a>React 入门（三） – 生命周期 LifeCycle</h2><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在 React 中为我们提供了一些生命周期钩子函数，让我们能在 React 执行的重要阶段，在钩子函数中做一些事情。那么在 React 的生命周期中，有哪些钩子函数呢，我们来总结一下</p><h2 id="React-生命周期"><a href="#React-生命周期" class="headerlink" title="React 生命周期"></a>React 生命周期</h2><p>React 生命周期主要包括三个阶段：初始化阶段，更新阶段，销毁阶段</p><h3 id="初始化阶段"><a href="#初始化阶段" class="headerlink" title="初始化阶段"></a>初始化阶段</h3><h4 id="1-constructor-执行"><a href="#1-constructor-执行" class="headerlink" title="1. constructor 执行"></a>1. constructor 执行</h4><p><code>constructor</code> 在组件初始化的时候只会执行一次</p><p>通常它用于做这两件事</p><ol><li>初始化函数内部 <code>state</code></li><li>绑定函数</li></ol><pre class=" language-js"><code class="language-js"><span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'进入构造器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> count<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>现在我们通常不会使用 <code>constructor</code> 属性，而是改用类加箭头函数的方法，来替代 <code>constructor</code> </p><p>例如，我们可以这样初始化 <code>state</code></p><pre class=" language-js"><code class="language-js">state <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><h4 id="2-static-getDerivedStateFromProps-执行-（新钩子）"><a href="#2-static-getDerivedStateFromProps-执行-（新钩子）" class="headerlink" title="2. static getDerivedStateFromProps 执行 （新钩子）"></a>2. static getDerivedStateFromProps 执行 （新钩子）</h4><p>这个是 React 新版本中新增的2个钩子之一，据说很少用。</p><p><code>getDerivedStateFromProps</code> 在初始化和更新中都会被调用，并且在 <code>render</code> 方法之前调用，它返回一个对象用来更新 <code>state</code></p><p><code>getDerivedStateFromProps</code> 是类上直接绑定的静态（<code>static</code>）方法，它接收两个参数 <code>props</code> 和 <code>state</code></p><p><code>props</code> 是即将要替代 <code>state</code> 的值，而 <code>state</code> 是当前未替代前的值</p><blockquote><p>注意：<code>state</code> 的值在任何时候都取决于传入的 <code>props</code> ，不会再改变</p></blockquote><p>如下</p><pre class=" language-js"><code class="language-js"><span class="token keyword">static</span> <span class="token function">getDerivedStateFromProps</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> props<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Count count<span class="token operator">=</span><span class="token string">"109"</span><span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><code>count</code> 的值不会改变，一直是 109</p><h4 id="2-componentWillMount-执行（即将废弃）"><a href="#2-componentWillMount-执行（即将废弃）" class="headerlink" title="2. componentWillMount 执行（即将废弃）"></a>2. componentWillMount 执行（即将废弃）</h4><blockquote><p>如果存在 <code>getDerivedStateFromProps</code> 和 <code>getSnapshotBeforeUpdate</code> 就不会执行生命周期<code>componentWillMount</code>。</p></blockquote><p>该方法只在挂载的时候调用一次，表示组件将要被挂载，并且在 <code>render</code> 方法之前调用。</p><p>这个方法在 React 18版本中将要被废弃，官方解释是在 React 异步机制下，如果滥用这个钩子可能会有 Bug</p><h4 id="3-render-执行"><a href="#3-render-执行" class="headerlink" title="3. render 执行"></a>3. render 执行</h4><p><code>render()</code> 方法是组件中必须实现的方法，用于渲染 DOM ，但是它不会真正的操作 DOM，它的作用是把需要的东西返回出去。</p><p>实现渲染 DOM 操作的是 <code>ReactDOM.render()</code></p><blockquote><p>注意：避免在 <code>render</code> 中使用 <code>setState</code> ，否则会死循环</p></blockquote><h4 id="4-componentDidMount-执行"><a href="#4-componentDidMount-执行" class="headerlink" title="4. componentDidMount 执行"></a>4. componentDidMount 执行</h4><p><code>componentDidMount</code> 的执行意味着初始化挂载操作已经基本完成，它主要用于组件挂载完成后做某些操作</p><p>这个挂载完成指的是：组件插入 DOM tree </p><h4 id="初始化阶段总结"><a href="#初始化阶段总结" class="headerlink" title="初始化阶段总结"></a>初始化阶段总结</h4><p>执行顺序 <code>constructor</code> -&gt; <code>getDerivedStateFromProps</code> 或者 <code>componentWillMount</code> -&gt; <code>render</code> -&gt; <code>componentDidMount</code></p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210821102153009.png" alt="image-20210821102153009"></p><h3 id="更新阶段"><a href="#更新阶段" class="headerlink" title="更新阶段"></a>更新阶段</h3><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210821102622645.png" alt="image-20210821102622645"></p><p>这里记录新生命周期的流程</p><h4 id="1-getDerivedStateFromProps-执行"><a href="#1-getDerivedStateFromProps-执行" class="headerlink" title="1. getDerivedStateFromProps 执行"></a>1. getDerivedStateFromProps 执行</h4><p>执行生命周期<code>getDerivedStateFromProps</code>， 返回的值用于合并 <code>state</code>，生成新的<code>state</code>。</p><h4 id="2-shouldComponentUpdat-执行"><a href="#2-shouldComponentUpdat-执行" class="headerlink" title="2. shouldComponentUpdat 执行"></a>2. shouldComponentUpdat 执行</h4><p><code>shouldComponentUpdate()</code> 在组件更新之前调用，可以通过返回值来控制组件是否更新，允许更新返回 <code>true</code> ，反之不更新</p><h4 id="3-render-执行-1"><a href="#3-render-执行-1" class="headerlink" title="3. render 执行"></a>3. render 执行</h4><p>在控制是否更新的函数中，如果返回 <code>true</code> 才会执行 <code>render</code> ,得到最新的 <code>React element</code></p><h4 id="4-getSnapshotBeforeUpdate-执行"><a href="#4-getSnapshotBeforeUpdate-执行" class="headerlink" title="4. getSnapshotBeforeUpdate 执行"></a>4. getSnapshotBeforeUpdate 执行</h4><p>在最近一次的渲染输出之前被提交之前调用，也就是即将挂载时调用</p><p>相当于淘宝购物的快照，会保留下单前的商品内容，在 React 中就相当于是 即将更新前的状态</p><blockquote><p>它可以使组件在 DOM 真正更新之前捕获一些信息（例如滚动位置），此生命周期返回的任何值都会作为参数传递给 <code>componentDidUpdate()</code>。如不需要传递任何值，那么请返回 null</p></blockquote><h4 id="5-componentDidUpdate-执行"><a href="#5-componentDidUpdate-执行" class="headerlink" title="5. componentDidUpdate 执行"></a>5. componentDidUpdate 执行</h4><p>组件在更新完毕后会立即被调用，首次渲染不会调用</p><hr><p>到此更新阶段就结束了，在 React 旧版本中有两个与更新有关的钩子函数 <code>componentWillReceiveProps</code> 和 <code>componentWillUpdate</code> 都即将废弃</p><p><code>componentWillReceiveProps</code> 我不太懂</p><p><code>componentWillUpdate</code> 在 <code>render</code> 之前执行，表示组件将要更新</p><h3 id="销毁阶段"><a href="#销毁阶段" class="headerlink" title="销毁阶段"></a>销毁阶段</h3><h4 id="componentWillUnmount-执行"><a href="#componentWillUnmount-执行" class="headerlink" title="componentWillUnmount  执行"></a>componentWillUnmount  执行</h4><p>在组件即将被卸载或销毁时进行调用。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>初始化</strong></p><ul><li>constructor()</li><li>static getDerivedStateFromProps()</li><li>render()</li><li>componentDidMount()</li></ul><p><strong>更新</strong></p><ul><li>static getDerivedStateFromProps()</li><li>shouldComponentUpdate()</li><li>render()</li><li>getSnapshotBeforeUpdate()</li><li>componentDidUpdate()</li></ul><p><strong>销毁</strong></p><ul><li>componentWillUnmount()</li></ul><hr><blockquote><p>初学 React ，对生命周期还没有深入的理解，只能大概知道在什么时候触发哪个钩子，希望各位大佬多多指教，有什么建议可以提一提 🙏</p></blockquote><h2 id="React入门学习（四）–-diffing-算法"><a href="#React入门学习（四）–-diffing-算法" class="headerlink" title="React入门学习（四）– diffing 算法"></a>React入门学习（四）– diffing 算法</h2><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>diff 算法是 React 提升渲染性能的一种优化算法，在 React 中有着很重要的地位，也不止于 React ，在 Vue 中也有 diff 算法，似乎没有差别。在最近的 React 学习中，学到了 diff 算法，感觉视频中的内容有点浅，对 diff 算法不够深入，因此想要深入的了解以下 diff 算法。于是在掘金，知乎，CSDN 等平台上，看了大量的博客，都非常地不错，可惜看不明白，wwww。所以这篇文章只是自己对于 diff 算法的一点理解，有什么问题或者错误的地方，大家<strong>一定要指出</strong>！</p><h2 id="什么是虚拟-DOM-？"><a href="#什么是虚拟-DOM-？" class="headerlink" title="什么是虚拟 DOM ？"></a>什么是虚拟 DOM ？</h2><p>在谈 diff 算法之前，我们需要先了解虚拟 DOM 。它是一种编程概念，在这个概念里，以一种虚拟的表现形式被保存在内存中。在 React 中，render 执行的结果得到的并不是真正的 DOM 节点，而是 JavaScript 对象</p><blockquote><p>虚拟 DOM 只保留了真实 DOM 节点的一些<strong>基本属性，和节点之间的层次关系</strong>，它相当于建立在 JavaScript 和 DOM 之间的一层“缓存”</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>hello world!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>上面的这段代码会转化可以转化为虚拟 DOM 结构</p><pre class=" language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span>    tag<span class="token operator">:</span> <span class="token string">"div"</span><span class="token punctuation">,</span>    props<span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        class<span class="token operator">:</span> <span class="token string">"hello"</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    children<span class="token operator">:</span> <span class="token punctuation">[</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>        tag<span class="token operator">:</span> <span class="token string">"span"</span><span class="token punctuation">,</span>        props<span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"hello world!"</span><span class="token punctuation">]</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>其中对于一个节点必备的三个属性 <code>tag，props，children</code></p><ul><li>tag 指定元素的<strong>标签</strong>类型，如“<code>li</code>，<code>div</code>”</li><li>props 指定元素身上的属性，如 <code>class</code> ，<code>style</code>，自定义属性</li><li>children 指定元素是否有<strong>子节点</strong>，参数以<strong>数组</strong>形式传入</li></ul><p>而我们在 render 中编写的 JSX 代码就是一种虚拟 DOM 结构。</p><h2 id="什么是-diff-算法？"><a href="#什么是-diff-算法？" class="headerlink" title="什么是 diff 算法？"></a>什么是 diff 算法？</h2><p>其实刚开始学习 React 的时候，很多人可能都听说过 React 很高效，性能很好这类的话语，这其实就是得益于 diff 算法和 Virturl DOM 的完美结合。</p><p>单纯的我刚开始会认为</p><blockquote><p>React 也只不过是引入了别人的 diff 算法而已，能有多厉害，又不是原创 ？</p></blockquote><p>但当我查阅了众多资料后，发现被提及最多的是一个 “传统 diff 算法”</p><p>其实 React 针对 diff  算法做出的优化，才是我们应当学习的</p><p>React 将原先时间复杂度为 O($n^3$) 的传统算法，优化到了 O(n)</p><p><strong>大致执行过程图</strong></p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210824173128172.png" alt="image-20210824173128172"></p><p>那 React 是如何实现的呢？</p><h2 id="三个策略"><a href="#三个策略" class="headerlink" title="三个策略"></a>三个策略</h2><p>为了将复杂度降到 O(n)，React 基于这三个策略进行了算法优化</p><ol><li>Web UI 中 DOM 节点跨层级的<strong>移动操作特别少</strong>，可以忽略不计。</li><li>拥有相同类的两个组件将会生成<strong>相似</strong>的树形结构，拥有不同类的两个组件将会生成<strong>不同</strong>的树形结构。</li><li>对于同一层级的一组子节点，它们可以通过唯一 id 进行区分。</li></ol><p>针对这三个策略，React 分别对 <code>tree diff</code>、<code>component diff</code> 以及 <code>element diff</code> 进行算法优化</p><h3 id="tree-diff-分层求异"><a href="#tree-diff-分层求异" class="headerlink" title="tree diff 分层求异"></a>tree diff 分层求异</h3><p>首先会将新旧两个 DOM 树，进行比较，这个比较指的是分层比较。又由于 DOM 节点跨层级的移动操作很少，忽略不计。React 通过 updataDepth 对 虚拟 DOM 树进行层级控制，只会对同层节点进行比较，也就是图中只会对相同颜色方框内的 DOM 节点进行比较。例如：</p><p>当对比发现节点消失时，则该节点及其子节点都会被完全删除，不会进行更深层次的比较，这样只需要对树进行一次遍历，便能完成整颗 DOM 树的比较</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210824131810813.png" alt="image-20210824131810813"></p><p>这里还有一个值得关注的地方：<strong>DOM 节点跨层级移动</strong></p><p>为什么会提出这样的问题呢，在上面的删除原则中，我们发现当节点不存在了就会删除，那我只是给它换位了，它也会删除整个节点及其子节点吗？</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210824155347956.png" alt="image-20210824155347956"></p><p>如图，我们需要实现这样的移动，你可能会以为它会直接这样移动</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/%E7%AD%96%E7%95%A51.gif" alt="策略1"></p><p>但是实际情况，并不是这样的。由于 React 只会简单的进行同层级节点位置变化，对于不同层级的节点，只有创建和删除操作，当发现 B 节点消失时，就会销毁 B，当发现 C 节点上多了 B 节点，就会创建 B 以及它的子节点。</p><p>因此这样会非常的复杂，所以 React 官方并不建议我们进行 DOM 节点跨级操作</p><h3 id="component-diff"><a href="#component-diff" class="headerlink" title="component diff"></a>component diff</h3><p>在组件层面上，也进行了优化</p><ul><li>如果是同一类型的组件，则按照原策略继续比较 虚拟 DOM tree</li><li>如果不是，则将这个组件记为 <code>dirty component</code> ，从而替换整个组件下的所有子节点</li></ul><p>同时对于同一类型的组件，有可能其 <code>Virtual DOM</code> 没有任何变化，如果能够确切的知道这点就可以节省大量的 <code>diff</code> 运算的时间，因此 <code>React</code> 允许用户通过 <code>shouldComponentUpdate()</code> 判断该组件是否需要进行 <code>diff</code> 算法分析</p><p>总的来说，如果两个组件结构相似，但被认定为了不同类型的组件，则不会比较二者的结构，而是直接删除</p><h3 id="element-diff"><a href="#element-diff" class="headerlink" title="element diff"></a>element diff</h3><p>element diff 是专门针对同一层级的所有节点的策略。当节点在同一层级时，diff 提供了 3个节点操作方法：插入，移动，删除</p><p>当我们要完成如图所示操作转化时，会有很大的困难，因为在新老节点比较的过程中，发现每个节点都要<strong>删除再重新创建</strong>，但是这只是重新排序了而已，对性能极大的不友好。因此 React 中提出了优化策略：</p><p>允许添加<strong>唯一值 key 来区分节点</strong></p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210824163240354.png" alt="image-20210824163240354"></p><p>引入 key 的优化策略，让性能上有了翻天覆地的变化</p><p><strong>那 key 有什么作用呢？</strong></p><p>当同一层级的节点添加了 key 属性后，当位置发生变化时。react diff 进行新旧节点比较，如果发现有相同的 key 就会进行移动操作，而不会删除再创建</p><p><strong>那 key 具体是如何起作用的呢？</strong></p><p>首先在 React 中只允许<strong>节点右移</strong></p><p>因此对于上图中的转化，只会进行 A，C 的移动</p><p>则只需要对移动的节点进行更新渲染，不移动的则不需要更新渲染</p><p><strong>为什么不能用 index 作为 key 值呢？</strong></p><p><code>index</code> 作为 <code>key</code> ，如果我们删除了一个节点，那么数组的后一项可能会前移，这个时候移动的节点和删除的节点就是相同的 <code>key</code>  ，在<code>react</code>中，如果 <code>key</code> 相同，就会视为<strong>相同的组件</strong>，但这两个组件是不同的，这样就会出现很麻烦的事情，例如：序号和文本不对应等问题</p><p>所以一定要保证 <code>key</code> 的唯一性</p><h2 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h2><p>React 已经帮我们做了很多了，剩下的需要我们多加注意，才能有更好的性能</p><p>基于三个策略我们需要注意</p><p><strong>tree diff 建议</strong>：开发组件时，需要注意保持 DOM 结构稳定</p><p><strong>component diff 建议</strong>：使用 <code>shouldComponentUpdate()</code> 来减少不要的更新</p><p><strong>element diff 建议</strong>：减少最后一个节点移动到头部的操作，这样前面的节点都需要移动</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://segmentfault.com/a/1190000016539430">谈谈React中Diff算法的策略及实现</a></p><p><a href="https://segmentfault.com/a/1190000011492275">React diff算法</a></p><p><a href="https://juejin.cn/post/6967626390380216334#heading-1">浅谈react 虚拟dom，diff算法与key机制</a></p><hr><p>关于手写实现 diff 算法，还有点难度，这事等学完 React 后再说吧</p><blockquote><p>非常感谢您的阅读，欢迎提出你的意见，有什么问题欢迎指出，谢谢！🎈</p></blockquote><h2 id="React-入门学习（五）–-认识脚手架"><a href="#React-入门学习（五）–-认识脚手架" class="headerlink" title="React 入门学习（五）– 认识脚手架"></a>React 入门学习（五）– 认识脚手架</h2><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>这篇文章主要围绕 React 中的脚手架，来解决一下几个问题</p><p><strong>灵魂三问：是什么？为什么？怎么办？</strong></p><ol><li>什么是脚手架？</li><li>为什么要用脚手架？</li><li>怎么用脚手架？</li></ol><h2 id="🍕-1-什么是-React-脚手架？"><a href="#🍕-1-什么是-React-脚手架？" class="headerlink" title="🍕 1. 什么是 React 脚手架？"></a>🍕 1. 什么是 React 脚手架？</h2><p>在我们的现实生活中，脚手架最常用的使用场景是在工地，它是为了保证施工顺利的、方便的进行而搭建的，在工地上搭建的脚手架可以帮助工人们高校的去完成工作，同时在大楼建设完成后，拆除脚手架并不会有任何的影响。</p><p>在我们的 React 项目中，脚手架的作用与之有异曲同工之妙</p><p>React 脚手架其实是一个工具帮我们快速的生成项目的工程化结构，每个项目的结构其实大致都是相同的，所以 React 给我提前的搭建好了，这也是脚手架强大之处之一，也是用 React 创建 SPA 应用的最佳方式</p><h2 id="🍔-2-为什么要用脚手架？"><a href="#🍔-2-为什么要用脚手架？" class="headerlink" title="🍔 2. 为什么要用脚手架？"></a>🍔 2. 为什么要用脚手架？</h2><p>在前面的介绍中，我们也有了一定的认知，脚手架可以帮助我们快速的搭建一个项目结构</p><p>在我之前学习 <code>webpack</code> 的过程中，每次都需要配置 <code>webpack.config.js</code> 文件，用于配置我们项目的相关 <code>loader</code> 、<code>plugin</code>，这些操作比较复杂，但是它的重复性很高，而且在项目打包时又很有必要，那 React 脚手架就帮助我们做了这些，它不需要我们人为的去编写 <code>webpack</code> 配置文件，它将这些配置文件全部都已经提前的配置好了。</p><p>据我猜测是直接输入一行命令就能打包完成。</p><blockquote><p>目前还没有学习到哪，本文主要讲<strong>脚手架的项目目录结构以及安装</strong></p></blockquote><h2 id="🍟-3-怎么用-React-脚手架？"><a href="#🍟-3-怎么用-React-脚手架？" class="headerlink" title="🍟 3. 怎么用 React 脚手架？"></a>🍟 3. 怎么用 React 脚手架？</h2><p>这也是这篇文章的重点，如何去安装 React 脚手架，并且理解它其中的相关文件作用</p><p>首先介绍如何安装脚手架</p><h3 id="1-安装-React-脚手架"><a href="#1-安装-React-脚手架" class="headerlink" title="1. 安装 React 脚手架"></a>1. 安装 React 脚手架</h3><p>首先确保安装了 <code>npm</code> 和<code>Node</code>，版本不要太古老，具体是多少不大清楚，建议还是用  <code>npm update</code> 更新一下</p><p>然后打开 cmd 命令行工具，全局安装 <code>create-react-app</code></p><pre class=" language-shell"><code class="language-shell">npm i create-react-app -g</code></pre><p>然后可以<strong>新建</strong>一个文件夹用于存放项目</p><p>在当前的文件夹下执行</p><pre class=" language-shell"><code class="language-shell">create-react-app hello-react</code></pre><p><strong>快速搭建项目</strong></p><p>再在生成好的 <code>hello-react</code> 文件夹中执行</p><pre class=" language-shell"><code class="language-shell">npm start</code></pre><p><strong>启动项目</strong></p><p>接下来我们看看这些文件都有什么作用</p><h3 id="2-脚手架项目结构"><a href="#2-脚手架项目结构" class="headerlink" title="2. 脚手架项目结构"></a>2. 脚手架项目结构</h3><pre><code>hello-react├─ .gitignore               // 自动创建本地仓库├─ package.json             // 相关配置文件├─ public                   // 公共资源│  ├─ favicon.ico           // 浏览器顶部的icon图标│  ├─ index.html            // 应用的 index.html入口│  ├─ logo192.png           // 在 manifest 中使用的logo图│  ├─ logo512.png           // 同上│  ├─ manifest.json         // 应用加壳的配置文件│  └─ robots.txt            // 爬虫给协议文件├─ src                      // 源码文件夹│  ├─ App.css               // App组件的样式│  ├─ App.js                // App组件│  ├─ App.test.js           // 用于给APP做测试│  ├─ index.css             // 样式│  ├─ index.js              // 入口文件│  ├─ logo.svg              // logo图│  ├─ reportWebVitals.js    // 页面性能分析文件│  └─ setupTests.js         // 组件单元测试文件└─ yarn.lock</code></pre><p>再介绍一下public目录下的 <code>index.html</code> 文件中的代码意思</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>%PUBLIC_URL%/favicon.ico<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>theme-color<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span>      <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span>      <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Web site created using create-react-app<span class="token punctuation">"</span></span>    <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>%PUBLIC_URL%/logo192.png<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>manifest<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>%PUBLIC_URL%/manifest.json<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>React App<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>noscript</span><span class="token punctuation">></span></span>You need to enable JavaScript to run this app.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>noscript</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>以上是删除代码注释后的全部代码</p><p><strong>第5行</strong></p><p>指定浏览器图标的路径，这里直接采用 <code>%PUBLIC_URL%</code> 原因是 <code>webpack</code> 配置好了，它代表的意思就是 <code>public</code> 文件夹</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>%PUBLIC_URL%/favicon.ico<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p><strong>第6行</strong></p><p>用于做移动端网页适配</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p><strong>第七行</strong></p><p>用于配置安卓手机浏览器顶部颜色，兼容性不大好</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>theme-color<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p><strong>8到11行</strong></p><p>用于描述网站信息</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span>    <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span>    <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Web site created using create-react-app<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p><strong>第12行</strong></p><p>苹果手机触摸版应用图标</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>%PUBLIC_URL%/logo192.png<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p><strong>第13行</strong></p><p>应用加壳时的配置文件</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>manifest<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>%PUBLIC_URL%/manifest.json<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><blockquote><p>以上就是关于 React 脚手架的全部内容了，非常感谢你的阅读💕</p></blockquote><h2 id="React-入门学习（六）–-TodoList-案例"><a href="#React-入门学习（六）–-TodoList-案例" class="headerlink" title="React 入门学习（六）– TodoList 案例"></a>React 入门学习（六）– TodoList 案例</h2><h2 id="引言-1"><a href="#引言-1" class="headerlink" title="引言"></a>引言</h2><p>TodoList 案例在前端学习中挺重要的，从原生 JavaScript 的增删查改，到现在 React 的组件通信，都是一个不错的案例，这篇文章主要记录，还原一下通过 React 实现 TodoList 的全过程</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210826091013929.png" alt="image-20210826091013929"></p><h2 id="一、拆分组件"><a href="#一、拆分组件" class="headerlink" title="一、拆分组件"></a>一、拆分组件</h2><p>首先第一步需要做的是将这个页面拆分成几个组件</p><p>首先顶部的输入框，可以完成添加项目的功能，可以拆分成一个 <strong>Header 组件</strong></p><p>中间部分可以实现一个渲染列表的功能，可以拆分成一个 <strong>List 组件</strong></p><p>在这部分里面，每一个待办事项都可以拆分成一个 <strong>Item 组件</strong></p><p>最后底部显示当前完成状态的部分，可以拆分成一个 <strong>Footer 组件</strong></p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210826092737826.png" alt="image-20210826092737826"></p><p>在拆分完组件后，我们下一步要做的就是去实现这些组件的静态效果</p><h2 id="二、实现静态组件"><a href="#二、实现静态组件" class="headerlink" title="二、实现静态组件"></a>二、实现静态组件</h2><p>首先，我们可以先写好这个页面的静态页面，然后再分离组件，所以这就要求我们</p><p>以后写静态页面的时候，一定要有明确的规范</p><ol><li>打好注释</li><li>每个部分的 CSS 要写在一个地方，不要随意写</li><li>命名一定要规范</li><li>CSS 选择器不要关联太多层级</li><li>在写 HTML 时就要划分好布局</li></ol><p>这样有利于我们分离组件</p><p>首先，我们在 <code>src</code> 目录下，新建一个 <code>Components</code> 文件夹，用于存放我们的组件，然后在文件夹下，新建 <code>Header</code> 、<code>Item</code>、<code>List</code> 、<code>Footer</code> 组件文件夹，再创建其下的 <code>index.jsx</code>，<code>index.css</code> 文件，用于创建对应组件及其样式文件</p><pre class=" language-markdown"><code class="language-markdown">todolist├─ package.json├─ public│  ├─ favicon.ico│  └─ index.html├─ src│  ├─ App.css│  ├─ App.jsx│  ├─ Components│  │  ├─ Footer│  │  │  ├─ index.css│  │  │  └─ index.jsx│  │  ├─ Header│  │  │  ├─ index.css│  │  │  └─ index.jsx│  │  ├─ item│  │  │  ├─ index.css│  │  │  └─ index.jsx│  │  └─ List│  │     ├─ index.css│  │     └─ index.jsx│  └─ index.js└─ yarn.lock</code></pre><p>最终目录结构如上</p><p>然后我们将每个组件，对应的 HTML 结构 CV 到对应组件的 <code>index.jsx</code> 文件中 <code>return</code> 出来，再将 CSS 样式添加到 <code>index.css</code> 文件中</p><p><strong>记得</strong>，在 <code>index.jsx</code> 中一定要引入 <code>index.css</code> 文件</p><p>实现了静态组件后，我们需要添加事件等，来实现动态组件</p><h2 id="三、实现动态组件"><a href="#三、实现动态组件" class="headerlink" title="三、实现动态组件"></a>三、实现动态组件</h2><h3 id="🍎-1-动态展示列表"><a href="#🍎-1-动态展示列表" class="headerlink" title="🍎 1. 动态展示列表"></a>🍎 1. 动态展示列表</h3><p>我们目前实现的列表项是固定的，我们需要它通过<strong>状态</strong>来维护，而不是通过<strong>组件标签</strong>来维护</p><p>首先我们知道，父子之间传递参数，可以通过 <code>state</code> 和 <code>props</code> 实现</p><p>我们通过在父组件也就是 <code>App.jsx</code> 中设置状态</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210826103418053.png" alt="image-20210826103418053"></p><p>再将它传递给对应的渲染组件 <code>List</code> </p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token entity" title="&#123;">&amp;#123;</span> todos <span class="token entity" title="&#125;">&amp;#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>List</span> <span class="token attr-name">todos</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;todos&amp;#125;/</span><span class="token punctuation">></span></span></code></pre><p>这样在 <code>List</code> 组件中就能通过 <code>props</code> 来获取到 <code>todos</code> </p><p>我们通过解构取出 <code>todos</code></p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token entity" title="&#123;">&amp;#123;</span> todos<span class="token punctuation">,</span> updateTodo <span class="token entity" title="&#125;">&amp;#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props</code></pre><p>再通过 <code>map</code> 遍历渲染 <code>Item</code> 数量</p><pre class=" language-js"><code class="language-js"><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  todos<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>todo <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>Item key<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>todo<span class="token punctuation">.</span>id<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">...</span>todo<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>同时由于我们的数据渲染最终是在 <code>Item</code> 组件中完成的，所以我们需要将数据传递给 <code>Item</code> 组件</p><p>这里有两个注意点</p><ol><li>关于 <code>key</code> 的作用在 diff 算法的文章中已经有讲过了，需要满足<strong>唯一性</strong></li><li>这里采用了简写形式 <code>&#123;...todo&#125;</code> ，这使得代码更加简洁，它代表的意思是</li></ol><pre class=" language-js"><code class="language-js">id <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>todo<span class="token punctuation">.</span>id<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> name <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>todo<span class="token punctuation">.</span>name<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> done <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>todo<span class="token punctuation">.</span>done<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>在 <code>Item</code> 组件中取出 <code>props</code> 即可使用</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> done <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props</code></pre><p>这样我们更改 <code>APP.jsx</code> 文件中的 <code>state</code> 就能驱动着 <code>Item</code> 组件的更新，如图</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/react-todolist-1.gif" alt="react-todolist-1"></p><p>同时这里需要注意的是</p><p>对于复选框的选中状态，这里采用的是 <code>defaultChecked = &#123;done&#125;</code>，相比于 <code>checked</code> 属性，这个设定的是默认值，能够更改</p><h3 id="🍍-2-添加事项功能"><a href="#🍍-2-添加事项功能" class="headerlink" title="🍍 2. 添加事项功能"></a>🍍 2. 添加事项功能</h3><p>首先我们需要在 Header 组件中，绑定键盘事件，判断按下的是否为回车，如果为回车，则将当前输入框中的内容传递给 APP 组件</p><blockquote><p>因为，在目前的学习知识中，Header 组件和渲染组件 List 属于兄弟组件，没有办法进行直接的数据传递，因此可以将数据传递给 APP 再由 APP 转发给 List。</p></blockquote><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// Header/index.jsx</span>handleKeyUp <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token comment" spellcheck="true">// 结构赋值获取 keyCode,target</span>  <span class="token keyword">const</span> <span class="token entity" title="&#123;">&amp;#123;</span> keyCode<span class="token punctuation">,</span> target <span class="token entity" title="&#125;">&amp;#125;</span> <span class="token operator">=</span> event  <span class="token comment" spellcheck="true">// 判断是不是回车</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>keyCode <span class="token operator">!==</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token keyword">return</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'输入不能为空'</span><span class="token punctuation">)</span>  <span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token comment" spellcheck="true">// 准备一个todo对象</span>  <span class="token keyword">const</span> todoObj <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span> id<span class="token punctuation">:</span> <span class="token function">nanoid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> target<span class="token punctuation">.</span>value<span class="token punctuation">,</span> done<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token entity" title="&#125;">&amp;#125;</span>  <span class="token comment" spellcheck="true">// 传递给app</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">addTodo</span><span class="token punctuation">(</span>todoObj<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 清空</span>  target<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token entity" title="&#125;">&amp;#125;</span></code></pre><p>我们在 <code>App.jsx</code> 中添加了事件 <code>addTodo</code> ，这样可以将 Header 组件传递的参数，维护到 <code>App</code> 的状态中</p><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// App.jsx</span>addTodo <span class="token operator">=</span> <span class="token punctuation">(</span>todoObj<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token keyword">const</span> <span class="token entity" title="&#123;">&amp;#123;</span> todos <span class="token entity" title="&#125;">&amp;#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state  <span class="token comment" spellcheck="true">// 追加一个 todo</span>  <span class="token keyword">const</span> newTodos <span class="token operator">=</span> <span class="token punctuation">[</span>todoObj<span class="token punctuation">,</span> <span class="token operator">...</span>todos<span class="token punctuation">]</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span> todos<span class="token punctuation">:</span> newTodos <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span></code></pre><p>在这小部分中，需要我们注意的是，我们新建的 <code>todo</code>  对象，一定要保证它的 <code>id</code> 的唯一性</p><p>这里采用的 <code>nanoid</code> 库，这个库的每一次调用都会返回一个唯一的值</p><pre class=" language-shell"><code class="language-shell">npm i nanoid</code></pre><p>安装这个库，然后引入</p><p>通过 <code>nanoid()</code> 即可生成唯一值</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/react-todolist-addtodo.gif" alt="react-todolist-addtodo"></p><h3 id="🍋-3-实现鼠标悬浮效果"><a href="#🍋-3-实现鼠标悬浮效果" class="headerlink" title="🍋 3. 实现鼠标悬浮效果"></a>🍋 3. 实现鼠标悬浮效果</h3><p>接下来我们需要实现每个 <code>Item</code> 中的小功能</p><p>首先是鼠标移入时的变色效果</p><p>我的逻辑是，通过一个状态来维护是否鼠标移入，比如用一个 <code>mouse</code> 变量，值给 <code>false</code> 当鼠标移入时，重新设定状态为 <code>true</code> 当鼠标移出时设为 <code>false</code> ，然后我们只需要在 <code>style</code> 中用<code>mouse</code> 去设定样式即可</p><p>下面我们来代码实现</p><p>在 <code>Item</code> 组件中，先设定状态</p><pre class=" language-jsx"><code class="language-jsx">state <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span> mouse<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token entity" title="&#125;">&amp;#125;</span> <span class="token comment" spellcheck="true">// 标识鼠标移入，移出</span></code></pre><p>给元素绑定上鼠标移入，移出事件</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>li onMouseEnter<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleMouse</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> onMouseLeave<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleMouse</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">></span><span class="token operator">&lt;</span>li<span class="token operator">/</span><span class="token operator">></span></code></pre><p>当鼠标移入时，会触发 <code>onMouseEnter</code> 事件，调用 <code>handleMouse</code> 事件传入参数 <code>true</code> 表示鼠标进入，更新组件状态</p><pre class=" language-js"><code class="language-js">handleMouse <span class="token operator">=</span> flag <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> mouse<span class="token punctuation">:</span> flag <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>再在 <code>li</code> 身上添加由 <code>mouse</code> 控制的背景颜色</p><pre class=" language-js"><code class="language-js">style<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> backgroundColor<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>mouse <span class="token operator">?</span> <span class="token string">'#ddd'</span> <span class="token punctuation">:</span> <span class="token string">'white'</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>同时通过 <code>mouse</code> 来控制删除按钮的显示和隐藏，做法和上面一样</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/react-todolist-mouse.gif" alt="react-todolist-mouse"></p><p>观察 mouse 的变化</p><h3 id="🍉-4-复选框状态维护"><a href="#🍉-4-复选框状态维护" class="headerlink" title="🍉 4. 复选框状态维护"></a>🍉 4. 复选框状态维护</h3><p>我们需要将当前复选框的状态，维护到 <code>state</code>  当中</p><p>我们的思路是</p><p>在复选框中添加一个 <code>onChange</code>  事件来进行数据的传递，当事件触发时我们执行 <code>handleCheck</code> 函数，这个函数可以向 App 组件中传递参数，这样再在 App 中改变状态即可</p><p>首先绑定事件</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Item/index.jsx</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> defaultChecked<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>done<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> onChange<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleCheck</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><p>事件回调</p><pre class=" language-jsx"><code class="language-jsx">handleCheck <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">updateTodo</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>checked<span class="token punctuation">)</span>    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span></code></pre><p>由于我们需要传递 <code>id</code> 来记录状态更新的对象，因此我们需要采用高阶函数的写法，不然函数会直接执行而报错，复选框的状态我们可以通过 <code>event.target.checked</code> 来获取</p><p>这样我们将我们需要改变状态的 <code>Item</code> 的 <code>id</code> 和改变后的状态，传递给了 App</p><p>内定义的<code>updateTodo</code> 事件，这样我们可以在 App 组件中操作改变状态</p><p>我们传递了两个参数 <code>id</code> 和 <code>done</code></p><p>通过遍历找出该 <code>id</code> 对应的 <code>todo</code> 对象，更改它的 <code>done</code> 即可</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// App.jsx</span>updateTodo <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> done<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> todos <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state  <span class="token comment" spellcheck="true">// 处理</span>  <span class="token keyword">const</span> newTodos <span class="token operator">=</span> todos<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>todoObj <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>todoObj<span class="token punctuation">.</span>id <span class="token operator">===</span> id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">...</span>todoObj<span class="token punctuation">,</span> done <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> todoObj    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> todos<span class="token punctuation">:</span> newTodos <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>这里更改的方式是 <code>&#123; ...todoObj, done &#125;</code>，首先会展开 <code>todoObj</code> 的每一项，再对 <code>done</code> 属性做覆盖</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/react-todolist-update.gif" alt="react-todolist-update"></p><h3 id="🍏-5-限制参数类型"><a href="#🍏-5-限制参数类型" class="headerlink" title="🍏 5. 限制参数类型"></a>🍏 5. 限制参数类型</h3><p>在我们前面写的东西中，我们并没有对参数的<strong>类型以及必要性</strong>进行限制</p><p>在前面我们也学过这个，我们需要借助 <code>propTypes</code> 这个库</p><p>首先我们需要引入这个库，然后对 <code>props</code> 进行限制</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Header</span><span class="token keyword">static</span> propTypes <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  addTodo<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">.</span>isRequired<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>在Header 组件中需要接收一个 <code>addTodo</code> 函数，所以我们进行一下限制</p><p>同时在 List 组件中也需要进行对 <code>todos</code> 以及 <code>updateTodo</code> 的限制</p><p>如果传入的参数不符合限制，则会报 <strong>warning</strong></p><h3 id="🍒-6-删除按钮"><a href="#🍒-6-删除按钮" class="headerlink" title="🍒 6. 删除按钮"></a>🍒 6. 删除按钮</h3><p>现在我们需要实现删除按钮的效果</p><p>这个和前面的挺像的，首先我们分析一下，我们需要在 <code>Item</code> 组件上的按钮绑定点击事件，然后传入被点击事项的 <code>id</code> 值，通过 <code>props</code> 将它传递给父元素 <code>List</code> ，再通过在 <code>List</code> 中绑定一个 <code>App</code> 组件中的删除回调，将 <code>id</code> 传递给 <code>App</code> 来改变 <code>state</code></p><p>首先我们先编写 点击事件</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Item/index.jsx</span>handleDelete <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">deleteTodo</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>绑定在点击事件的回调上</p><p>子组件想影响父组件的状态，需要父组件传递一个函数，因此我们在 <code>App</code> 中添加一个 <code>deleteTodo</code> 函数</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// app.jsx</span>deleteTodo <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> todos <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state  <span class="token keyword">const</span> newTodos <span class="token operator">=</span> todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>todoObj <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> todoObj<span class="token punctuation">.</span>id <span class="token operator">!==</span> id  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> todos<span class="token punctuation">:</span> newTodos <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>然后将这个函数传递给 List 组件，再传递给 Item</p><p>增加一个判断</p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">'确认删除'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">deleteTodo</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/react-todolist-detele.gif" alt="react-todolist-detele"></p><h3 id="🍓-7-获取完成数量"><a href="#🍓-7-获取完成数量" class="headerlink" title="🍓 7. 获取完成数量"></a>🍓 7. 获取完成数量</h3><p>我们在 App 中向 <code>Footer</code> 组件传递 <code>todos</code> 数据，再去统计数据</p><p>统计 <code>done </code>为 <code>true</code> 的个数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> doneCount <span class="token operator">=</span> todos<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> todo<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> pre <span class="token operator">+</span> <span class="token punctuation">(</span>todo<span class="token punctuation">.</span>done <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></code></pre><p>再渲染数据即可</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210826160505813.png" alt="image-20210826160505813"></p><h3 id="🍊-8-全选按钮"><a href="#🍊-8-全选按钮" class="headerlink" title="🍊 8. 全选按钮"></a>🍊 8. 全选按钮</h3><p>首先我们需要在按钮上绑定事件，由于子组件需要改变父组件的状态，所以我们的操作和之前的一样，先绑定事件，再在 App 中传一个函数个 Footer ，再在 Footer 中调用这个函数并传入参数即可</p><p>这里需要特别注意的是</p><p><code>defaulChecked</code> 只有第一次会起作用，所以我们需要将前面写的改成 <code>checked</code> 添加 <code>onChange</code> 事件即可</p><p>首先我们先在 App 中给 Footer 传入一个函数 <code>checkAllTodo</code> </p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// App.jsx</span>checkAllTodo <span class="token operator">=</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> todos <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state  <span class="token keyword">const</span> newTodos <span class="token operator">=</span> todos<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>todoObj <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">...</span>todoObj<span class="token punctuation">,</span> done<span class="token punctuation">:</span> done <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> todos<span class="token punctuation">:</span> newTodos <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// render</span> <span class="token operator">&lt;</span>Footer todos<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>todos<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> checkAllTodo<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>checkAllTodo<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">></span></code></pre><p>然后我们需要在 Footer 中调用一下</p><pre class=" language-js"><code class="language-js">handleCheckAll <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">checkAllTodo</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>checked<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>这里我们传入了一个参数：当前按钮的状态，用于全选和取消全选</p><p>同时我们需要排除总数为0 时的干扰</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> checked<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>doneCount <span class="token operator">===</span> total <span class="token operator">&amp;&amp;</span> total <span class="token operator">!==</span> <span class="token number">0</span><span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> onChange<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleCheckAll<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/react-todolist-all.gif" alt="react-todolist-all"></p><h3 id="🥭-9-删除已完成"><a href="#🥭-9-删除已完成" class="headerlink" title="🥭 9. 删除已完成"></a>🥭 9. 删除已完成</h3><p>给删除按钮添加一个点击事件，回调中调用 App 中添加的删除已完成的函数，全都一个套路</p><p><strong>强烈建议这个自己打</strong></p><p>首先在 Footer 组件中调用传来的函数，在 App 中定义函数，过滤掉  <code>done</code> 为 <code>true</code> 的，再更新状态即可</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// App.jsx</span>clearAllDone <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> todos <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state  <span class="token keyword">const</span> newTodos <span class="token operator">=</span> todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>todoObj<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> todoObj<span class="token punctuation">.</span>done <span class="token operator">!==</span> <span class="token boolean">true</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> todos<span class="token punctuation">:</span> newTodos <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/react-todolist-clear.gif" alt="react-todolist-clear"></p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><ol><li>注意：className、style 写法</li><li>父组件给子组件传递数据，采用 <code>props</code></li><li>子组件给父组件传递数据，通过 <code>props</code>，同时提前给子组件传递一个函数</li><li>注意 <code>defaultChecked</code> 和 <code>checked</code> 的区别</li><li>一定要自己敲一下，好好理解数据传递</li></ol><blockquote><p>非常感谢您的阅读，欢迎提出你的意见，有什么问题欢迎指出，谢谢！🎈</p></blockquote><h2 id="React-入门学习（七）–-脚手架配置代理"><a href="#React-入门学习（七）–-脚手架配置代理" class="headerlink" title="React 入门学习（七）– 脚手架配置代理"></a>React 入门学习（七）– 脚手架配置代理</h2><h1 id="引言-2"><a href="#引言-2" class="headerlink" title="引言"></a>引言</h1><p>React 本身只关注于页面，并不包含发送 Ajax 请求的代码，所以一般都是集成第三方的包，或者自己封装的</p><p>自己封装的话，比较麻烦，而且也可能考虑不全</p><p>常用的有两个库，一个是JQuery，一个是 axios</p><ol><li>JQuery 这个比较重，因为 Ajax 服务也只是它这个库里的一小块功能，它主要做的还是 DOM 操作，而这不利于 React ，不推荐使用</li><li>axios 这个就比较轻，而且采用 Promise 风格，代码的逻辑会相对清晰，<strong>推荐使用</strong></li></ol><p>因此我们这里采用 axios 来发送客户端请求</p><p>以前，我们在发送请求的时候，经常会遇到一个很重要的问题：跨域！</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210827091119837.png" alt="image-20210827091119837"></p><p>在我以前的学习中，基本上都需要操作后端服务器代码才能解决跨域的问题，配置请求头，利用 script，这些都需要后端服务器的配合，因此我们前端需要自己解决这个问题的话，就需要这个技术了：<strong>代理</strong>。</p><p>在说代理之前，先谈谈为什么会出现跨域？</p><p>这个应该是源于浏览器的同源策略。所谓同源（即指在同一个域）就是两个页面具有相同的协议，主机和端口号， 当一个请求 URL 的<strong>协议、域名、端口</strong>三者之间任意一个与当前页面 URL 不同即为跨域 。</p><p>也就是说 <code>xxx:3000</code>和 <code>xxx:4000</code> 会有跨域问题，<code>xxx:3000</code> 与 <code>abc:3000</code> 有跨域问题</p><p>那接下来我们采用<strong>配置代理</strong>的方式去解决这个问题</p><blockquote><p>关于跨域的问题解决方案，在之后的文章会有总结 ~</p></blockquote><h2 id="1-全局代理"><a href="#1-全局代理" class="headerlink" title="1. 全局代理"></a>1. 全局代理</h2><p>第一种方法，我把它叫做全局代理，因为它直接将代理配置在了配置文件 <code>package.json</code> 中</p><pre class=" language-json"><code class="language-json"><span class="token property">"proxy"</span><span class="token operator">:</span><span class="token string">"http://localhost:5000"</span>  // <span class="token property">"proxy"</span><span class="token operator">:</span><span class="token string">"请求的地址"</span></code></pre><p>这样配置代理时，首先会在抓原请求地址上访问，如果访问不到文件，就会转发到这里配置的地址上去请求</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/%E8%BD%AC%E5%8F%91.png" alt="转发"></p><p>我们需要做的就是在我们的请求代码中，将请求的地址改到转发的地址，即可</p><p>但是这样会有一些问题，它会先向我们请求的地址，也就是这里的 <code>3000</code> 端口下请求数据，如果在 <code>3000</code> 端口中存在我们需要访问的文件，会直接返回，<strong>不会再去转发</strong></p><p>因此这就会出现问题，同时因为这种方式采用的是全局配置的关系，导致<strong>只能转发到一个地址</strong>，不能配置多个代理</p><h2 id="2-单独配置"><a href="#2-单独配置" class="headerlink" title="2. 单独配置"></a>2. 单独配置</h2><p>这也是我自己起的名字，这种配置方式，可以给多个请求配置代理，非常不错</p><p>它的工作原理和全局配置是一样的，但是写法不同</p><p><strong>首先</strong>我们需要在 <code>src</code> 目录下，创建代理配置文件 <code>setupProxy.js</code> </p><p>注意：这个文件只能叫这个名字，脚手架在启动的时候，会自动执行这些文件</p><p><strong>第二步</strong></p><p>配置具体的代理规则，我们大致讲讲这些是什么意思</p><ol><li><p>首先我们需要引入这个 <code>http-proxy-middleware</code> 中间件，然后需要导出一个对象，这里建议使用函数，使用对象的话兼容性不大好</p></li><li><p>然后我们需要在 <code>app.use</code> 中配置，我们的代理规则，首先 <code>proxy</code>  接收的第一个参数是需要转发的请求，我的理解是一个标志的作用，当有这个标志的时候，预示着我们需要采用代理，例如 <code>/api1</code> ，我们就需要在我们 <code>axios</code> 的请求路径中，加上 <code>/api1</code> ，这样所有添加了 <code>/api1</code> 前缀的请求都会转发到这</p></li><li><p>第二个参数接受的是一个对象，用于配置代理。</p><ul><li><code>target</code> 属性用于配置转发目标地址，也就是我们数据的地址</li><li><code>changeOrigin</code> 属性用于控制服务器收到的请求头中 <code>host</code> 字段，可以理解为一个伪装效果，为 <code>true</code> 时，收到的 <code>host</code> 就为请求数据的地址</li><li><code>pathRewrite</code> 属性用于去除请求前缀，因为我们通过代理请求时，需要在请求地址前添加一个标志，但是实际的地址是不存在这个标志的，所以我们<strong>一定要去除</strong>这个前缀，这里采用的有点类似于正则替换的方式</li></ul></li></ol><p>配置一个代理的完整代码如下</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http-proxy-middleware'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>    <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token string">'/api1'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       target<span class="token punctuation">:</span> <span class="token string">'http://localhost:5000'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//配置转发目标地址</span>      changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//控制服务器接收到的请求头中host字段的值</span>      pathRewrite<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">'^/api1'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//去除请求前缀址(必须配置)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><hr><p>关于脚手架配置代理的内容就到这里啦！</p><blockquote><p>非常感谢您的阅读，欢迎提出你的意见，有什么问题欢迎指出，谢谢！🎈</p></blockquote><h2 id="React-入门学习（八）–-GitHub-搜索案例"><a href="#React-入门学习（八）–-GitHub-搜索案例" class="headerlink" title="React 入门学习（八）– GitHub 搜索案例"></a>React 入门学习（八）– GitHub 搜索案例</h2><h2 id="引言-3"><a href="#引言-3" class="headerlink" title="引言"></a>引言</h2><p>本文主要介绍 React 学习中 Github 搜索案例，这个案例主要涉及到了 Axios 发送请求，数据渲染以及一些中间交替效果的实现</p><p>个人感觉在做完 TodoList 案例之后，这个案例会很轻松，只是多加了一个 Loading 效果的实现思路，以及一些小细节的完善，感觉练练手还是很不错的</p><h2 id="一、实现静态组件"><a href="#一、实现静态组件" class="headerlink" title="一、实现静态组件"></a>一、实现静态组件</h2><p>和之前的 TodoList 案例一样，我们需要先实现静态组件，在实现静态组件之前，我们还需要拆分组件，这个页面的组件，我们可以将它拆成以下两个组件，第一个组件是 <code>Search</code>，第二个是 <code>List</code> </p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210828065604542.png" alt="image-20210828065604542"></p><p>接下来我们需要将提前写好的静态页面，对应拆分到组件当中</p><p>注意：</p><ol><li>class 需要改成 className</li><li>style 的值需要使用双花括号的形式</li></ol><p>最重要的一点就是，<code>img</code> 标签，一定要<strong>添加</strong> <code>alt</code> 属性表示图片加载失败时的提示。</p><p>同时，<code>a</code> 标签要添加 <code>rel=&quot;noreferrer&quot;</code>属性，不然会有大量的警告出现</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210828070148865.png" alt="image-20210828070148865"></p><h2 id="二、axios-发送请求"><a href="#二、axios-发送请求" class="headerlink" title="二、axios 发送请求"></a>二、axios 发送请求</h2><p>在实现静态组件之后，我们需要通过向 <code>github</code> 发送请求，来获取相应的用户信息</p><p>但是由于短时间内多次请求，可能会导致请求不返回结果等情况发生，因此我们采用了一个事先搭建好的本地服务器</p><p>我们启动服务器，向这个地址发送请求即可</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210828071053508.png" alt="image-20210828071053508"></p><p>这个请求类型是 GET 请求，我们需要传递一个搜索的关键字，去请求数据</p><p>我们首先要获取到用户点击搜索按钮后<strong>输入框中的值</strong></p><p>在需要触发事件的 <code>input</code> 标签中，添加 <code>ref</code> 属性</p><pre class=" language-js"><code class="language-js"> <span class="token operator">&lt;</span>input ref<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>c <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>keyWordElement <span class="token operator">=</span> c<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> type<span class="token operator">=</span><span class="token string">"text"</span> placeholder<span class="token operator">=</span><span class="token string">"输入关键词点击搜索"</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><p>我们可以通过 <code>this.keyWordElement</code> 属性来获取到这个当前节点，也就是这个 <code>input</code> 框</p><p>我们再通过 <code>value</code> 值，即可获取到当前 <code>input</code> 框中的值</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// search 回调</span><span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> keyWordElement<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> value<span class="token punctuation">:</span> keyWord <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token keyword">this</span></code></pre><p>这里采用的是连续的解构赋值，最后将 <code>value</code> 改为 <code>keyWord</code> ，这样好辨别</p><p>获取到了 <code>keyWord</code> 值，接下来我们就需要发送请求了</p><pre class=" language-js"><code class="language-js">axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`http://localhost:3000/api1/search/users?q=$&amp;#123;keyWord&amp;#125;`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>    response <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">updateAppState</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> isLoading<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> users<span class="token punctuation">:</span> response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>items <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    error <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">updateAppState</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> isLoading<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> err<span class="token punctuation">:</span> error<span class="token punctuation">.</span>message <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p> 我们将 <code>keyWord</code> 接在请求地址的后面，来传递参数，以获得相关数据</p><p>这里会存在跨域的问题，因我我们是站在 3000 端口向 5000 端口发送请求的</p><p>因此我们需要配置代理来解决跨域的问题，我们需要在请求地址前，加上启用代理的标志 <code>/api1</code></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// setupProxy.js</span><span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http-proxy-middleware'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>app<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>        <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token string">'/api1'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            target<span class="token punctuation">:</span> <span class="token string">'http://localhost:5000'</span><span class="token punctuation">,</span>            changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            pathRewrite<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token string">'^/api1'</span><span class="token punctuation">:</span> <span class="token string">''</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>这样我们就能成功的获取到了数据</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210828072705747.png" alt="image-20210828072705747"></p><h2 id="三、渲染数据"><a href="#三、渲染数据" class="headerlink" title="三、渲染数据"></a>三、渲染数据</h2><p>在获取到了数据之后，我们需要对数据进行分析，并将这些数据渲染到页面上</p><p>比较重要的一点是，我们获取到的用户个数是动态的，因此我们需要通过遍历的方式去实现</p><p>同时我们的数据当前存在于 <code>Search</code> 组件当中，我们需要在 <code>List</code> 组件中使用，所以我们需要个 <code>Search</code> 组件传递一个函数，来实现子向父传递数据，再通过 <code>App</code> 组件，向<code>List</code> 组件传递数据即可得到 <code>data</code></p><pre class=" language-js"><code class="language-js">users<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>userObj<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div key<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>userObj<span class="token punctuation">.</span>id<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> className<span class="token operator">=</span><span class="token string">"card"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>a rel<span class="token operator">=</span><span class="token string">"noreferrer"</span> href<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>userObj<span class="token punctuation">.</span>html_url<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> target<span class="token operator">=</span><span class="token string">"_blank"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>img alt<span class="token operator">=</span><span class="token string">"avatar"</span> src<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>userObj<span class="token punctuation">.</span>avatar_url<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> style<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> width<span class="token punctuation">:</span> <span class="token string">'100px'</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>      <span class="token operator">&lt;</span>p className<span class="token operator">=</span><span class="token string">"card-text"</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>userObj<span class="token punctuation">.</span>login<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>这里我们通过 <code>map</code> 遍历整个返回的数据，来循环的添加 <code>card</code> 的个数</p><p>同时将一些用户信息添加到其中</p><h2 id="四、增加交互"><a href="#四、增加交互" class="headerlink" title="四、增加交互"></a>四、增加交互</h2><p>做到这里其实已经完成了一大半了，但是似乎少了点交互</p><ul><li>加载时的 loading 效果</li><li>第一次进入页面时 List 组件中的<strong>欢迎使用字样</strong></li><li>在报错时应该提示错误信息</li></ul><p>这一些都预示着我们不能单纯的将用户数据直接渲染，我们需要添加一些判断，什么时候该渲染数据，什么时候渲染 loading，什么时候渲染 err </p><p>首先我们需要增加一些状态，来指示我们该渲染什么，比如</p><ul><li>采用 <code>isFrist</code> 来判断页面是否第一次启动，初始值给 <code>true</code>，点击搜索后改为 <code>false</code></li><li>采用 <code>isLoading</code> 来判断是否应该显示 Loading 动画，初始值给 <code>false</code>，在点击搜索后改为 <code>true</code>，在拿到数据后改为 <code>false</code></li><li>采用 <code>err</code> 来判断是否渲染错误信息，当报错时填入报错信息，初始值<strong>给空</strong></li></ul><pre class=" language-js"><code class="language-js">state <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> users<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> isFirst<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> isLoading<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> err<span class="token punctuation">:</span> <span class="token string">''</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>这样我们就需要改变我先前采用的数据传递方式，采用更新状态的方式，接收一个状态对象来<strong>更新数据</strong>，这样就不用去指定什么时候更新什么，就可以减少很多<strong>不必要</strong>的函数声明</p><p>同时在 App 组件给 List 组件传递数据时，我们可以采用解构赋值的方式，这样可以减少代码量</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// App.jsx</span><span class="token comment" spellcheck="true">// 接收一个状态对象</span>updateAppState <span class="token operator">=</span> <span class="token punctuation">(</span>stateObj<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>stateObj<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>Search updateAppState<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>updateAppState<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>List <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><p>这样我们只需要在 List 组件中，判断这些状态的值，来显示即可</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// List/index.jsx</span><span class="token comment" spellcheck="true">// 对象解构</span><span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> users<span class="token punctuation">,</span> isFirst<span class="token punctuation">,</span> isLoading<span class="token punctuation">,</span> err <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token comment" spellcheck="true">// 判断</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  isFirst <span class="token operator">?</span> <span class="token operator">&lt;</span>h2<span class="token operator">></span>欢迎使用，输入关键字，点击搜索<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span> <span class="token punctuation">:</span>    isLoading <span class="token operator">?</span> <span class="token operator">&lt;</span>h2<span class="token operator">></span>Loading<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span> <span class="token punctuation">:</span>      err <span class="token operator">?</span> <span class="token operator">&lt;</span>h2 style<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> color<span class="token punctuation">:</span> <span class="token string">'red'</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>err<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span> <span class="token punctuation">:</span>        users<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>userObj<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token punctuation">(</span>           <span class="token comment" spellcheck="true">// 渲染数据块</span>           <span class="token comment" spellcheck="true">//为了减少代码量，就不贴了</span>          <span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>我们需要先判断是否第一次，再判断是不是正在加载，再判断有没有报错，最后再渲染数据</p><p>我们的状态更新是在 Search 组件中实现的，在点击搜索之后数据返回之前，我们需要将 <code>isFirst</code> 改为 <code>false</code> ，<code>isLoading</code> 改为 <code>true</code> </p><p>接收到数据后我们再将 <code>isLoading</code> 改为 <code>false</code> 即可</p><p>以上就是 Github 搜索案例的实现过程</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/react-github.gif" alt="react-github"></p><p>最终效果图</p><hr><blockquote><p>前端路还有很长，今天我就大二啦！加油吧！！！</p></blockquote><blockquote><p>非常感谢您的阅读，欢迎提出你的意见，有什么问题欢迎指出，谢谢！🎈</p></blockquote><h2 id="React-入门学习（九）–-消息订阅发布"><a href="#React-入门学习（九）–-消息订阅发布" class="headerlink" title="React 入门学习（九）– 消息订阅发布"></a>React 入门学习（九）– 消息订阅发布</h2><h2 id="引言-4"><a href="#引言-4" class="headerlink" title="引言"></a>引言</h2><p>在昨天写的 <code>Github</code> 案例中，我们采用的是 <code>axios</code> 发送请求来获取数据，同时我们需要将数据从 <code>Search</code> 中传入给 <code>App</code>，再由 <code>App</code> 组件再将数据传递给 <code>List</code> 组件，这个过程会显得多此一举。同时我们要将 <code>state</code> 状态存放在 <code>App</code> 组件当中，但是这些 <code>state</code> 状态都是在 <code>List</code> 组件中使用的，在 <code>Search</code> 组件中做的，只是更新这些数据，那这样也会显得很没有必要，我们完全可以将 <code>state</code> 状态存放在 <code>List</code> 组件中，但是这样我们又会遇到技术难题，兄弟组件间的数据通信。那这里我们就学习一下如何利用消息订阅发布来解决<strong>兄弟组件间的通信</strong></p><h2 id="消息发布订阅"><a href="#消息发布订阅" class="headerlink" title="消息发布订阅"></a>消息发布订阅</h2><p>要解决上面的问题，我们可以借助发布订阅的机制，我们可以将 App 文件中的所有状态和方法全部去除，因为本来就不是在 App 组件中直接使用这些方法的，App 组件只是一个中间媒介而已</p><p>我们先简单的说一下<strong>消息订阅和发布的机制</strong></p><p>就拿我们平常订杂志来说，我们和出版社说我们要订一年的足球周刊，那每次有新的足球周刊，它都会寄来给你。</p><p>换到代码层面上，我们订阅了一个消息假设为 A，当另一个人发布了 A 消息时，因为我们订阅了消息 A ，那么我们就可以拿到 A 消息，并获取数据</p><p>那我们要怎么实现呢？</p><p>首先引入 <code>pubsub-js</code></p><p>我们需要先安装这个库</p><pre class=" language-js"><code class="language-js">yarn add pubsub<span class="token operator">-</span>js</code></pre><p>引入这个库 </p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> PubSub <span class="token keyword">from</span> <span class="token string">'pubsub-js'</span></code></pre><p>订阅消息</p><p>我们通过 <code>subscribe</code> 来订阅消息，它接收两个参数，第一个参数是消息的名称，第二个是消息成功的回调，回调中也接受两个参数，一个是消息名称，一个是返回的数据</p><pre class=" language-js"><code class="language-js">PubSub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'search'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>发布消息</p><p>我们采用 <code>publish</code> 来发布消息，用法如下</p><pre class=" language-js"><code class="language-js">PubSub<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">'search'</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span><span class="token string">'tom'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">18</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>有了这些基础，我们可以完善我们昨天写的 GitHub 案例</p><p>将数据的更新通过 <code>publish</code> 来传递，例如在发送请求之前，我们需要出现 loading 字样</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 之前的写法</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">updateAppState</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> isFirst<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> isLoading<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 改为发布订阅方式</span>PubSub<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">'search'</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> isFirst<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> isLoading<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>这样我们就能成功的在请求之前发送消息，我们只需要在 List 组件中订阅一下这个消息即可，并将返回的数据用于更新状态即可</p><pre class=" language-js"><code class="language-js">PubSub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'search'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span>stateObj<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>stateObj<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>同时上面的代码会返回一个 <code>token</code> ，这个就类似于定时器的编号的存在，我们可以通过这个 <code>token</code> 值，来取消对应的订阅</p><p>通过 <code>unsubscribe</code> 来取消指定的订阅</p><pre class=" language-js"><code class="language-js">PubSub<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>token<span class="token punctuation">)</span></code></pre><h2 id="扩展-–-Fetch"><a href="#扩展-–-Fetch" class="headerlink" title="扩展 – Fetch"></a>扩展 – Fetch</h2><p>首先 fetch 也是一种发送请求的方式，它是在 xhr 之外的一种，我们平常用的 Jquery 和 axios 都是封装了 xhr 的第三方库，而 fetch 是官方自带的库，同时它也采用的是 Promise 的方式，大大简化了写法</p><p>如何使用呢？</p><pre class=" language-js"><code class="language-js"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://xxx'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>json <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Request Failed'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p>它的使用方法和 axios 非常的类似，都是返回 Promise 对象，但是不同的是， fetch 关注分离，它在第一次请求时，不会直接返回数据，会先返回联系服务器的状态，在第二步中才能够获取到数据</p><p>我们需要在第一次 <code>then</code> 中返回 <code>response.json()</code> 因为这个是包含数据的 promise 对象，再调用一次 <code>then</code> 方法即可实现</p><p>但是这么多次的调用 <code>then</code> 并不是我们所期望的，相信看过之前生成器的文章的伙伴，已经有了想法。</p><p>我们可以利用 <code>async</code> 和 <code>await</code> 配合使用，来简化代码</p><p>可以将 <code>await</code> 理解成一个自动执行的 <code>then</code> 方法，这样清晰多了</p><pre class=" language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">'https://xxx'</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">await</span> reasponse<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Request Failed'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>最后关于错误对象的获取可以采用 <code>try...catch</code> 来实现</p><p>关于 fetch 的更多内容</p><p>强烈推荐阮一峰老师的博文：<a href="http://www.ruanyifeng.com/blog/2020/12/fetch-tutorial.html">fetch</a></p><hr><blockquote><p> 非常感谢您的阅读，欢迎提出你的意见，有什么问题欢迎指出，谢谢！🎈</p></blockquote><h2 id="🌮-React-入门学习（十）–-React-路由"><a href="#🌮-React-入门学习（十）–-React-路由" class="headerlink" title="🌮 React 入门学习（十）– React 路由"></a>🌮 React 入门学习（十）– React 路由</h2><h2 id="引言-5"><a href="#引言-5" class="headerlink" title="引言"></a>引言</h2><p>在我们之前写的页面当中，用我们的惯用思维去思考的话，可能会需要写很多的页面，例如做一个 tab 栏，我们可能会想每个选项都要对应一个 HTML 文件，这样会很麻烦，甚至不友好，我们把这种称为 MPA 也叫多页面应用。</p><h2 id="🍕-1-SPA"><a href="#🍕-1-SPA" class="headerlink" title="🍕 1. SPA"></a>🍕 1. SPA</h2><p>而为了减少这样的情况，我们还有另一种应用，叫做 SPA ，单页应用程序</p><p>它比传统的 Web 应用程序更快，因为它们在 Web 浏览器本身而不是在服务器上执行逻辑。在初始页面加载后，<strong>只有数据来回发送</strong>，而不是整个 HTML，这会降低带宽。它们可以独立请求标记和数据，并直接在浏览器中呈现页面</p><h2 id="🍔-2-什么是路由？"><a href="#🍔-2-什么是路由？" class="headerlink" title="🍔 2. 什么是路由？"></a>🍔 2. 什么是路由？</h2><p>路由是根据不同的 URL 地址展示不同的内容或页面</p><p>在 SPA 应用中，大部分页面结果不改变，只改变部分内容的使用</p><p><strong>前端路由的优缺点</strong></p><p><strong>优点</strong></p><p>用户体验好，不需要每次都从服务器全部获取整个 HTML，快速展现给用户</p><p><strong>缺点</strong></p><ol><li>SPA 无法记住之前页面滚动的位置，再次回到页面时无法记住滚动的位置</li><li>使用浏览器的前进和后退键会重新请求，没有合理利用缓存</li></ol><h2 id="🍟-3-路由的原理"><a href="#🍟-3-路由的原理" class="headerlink" title="🍟 3. 路由的原理"></a>🍟 3. 路由的原理</h2><p>前端路由的主要依靠的时 history ，也就是浏览器的历史记录</p><blockquote><p>history 是 BOM 对象下的一个属性，在 H5 中新增了一些操作 history 的 API</p></blockquote><p>浏览器的历史记录就类似于一个栈的数据结构，前进就相当于入栈，后退就相当于出栈</p><p>并且历史记录上可以采用 <code>listen</code> 来监听请求路由的改变，从而判断是否改变路径</p><p>在 H5 中新增了 <code>createBrowserHistory</code> 的 API ，用于创建一个 history 栈，允许我们手动操作浏览器的历史记录</p><p>新增 API：<code>pushState</code> ，<code>replaceState</code>，原理类似于 Hash 实现。 用 H5 实现，单页路由的 URL 不会多出一个 <code>#</code> 号，这样会更加的美观</p><h2 id="🌭-4-路由的基本使用"><a href="#🌭-4-路由的基本使用" class="headerlink" title="🌭 4. 路由的基本使用"></a>🌭 4. 路由的基本使用</h2><h3 id="react-router-dom-的理解和使用"><a href="#react-router-dom-的理解和使用" class="headerlink" title="react-router-dom 的理解和使用"></a>react-router-dom 的理解和使用</h3><blockquote><p>专门给 web 人员使用的库</p></blockquote><ol><li>一个 react 的仓库</li><li>很常用，基本是每个应用都会使用的这个库</li><li>专门来实现 SPA 应用</li></ol><p>首先我们要明确好页面的布局 ，分好导航区、展示区</p><p>要引入 <code>react-router-dom</code> 库，暴露一些属性 <code>Link、BrowserRouter...</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> Link<span class="token punctuation">,</span> BrowserRouter<span class="token punctuation">,</span> Route <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span></code></pre><p>导航区的 a 标签改为 Link 标签</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>Link className<span class="token operator">=</span><span class="token string">"list-group-item"</span> to<span class="token operator">=</span><span class="token string">"/about"</span><span class="token operator">></span>About<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span></code></pre><p>同时我们需要用 <code>Route</code> 标签，来进行路径的匹配，从而实现不同路径的组件切换</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/about"</span> component<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>About<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span><span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/home"</span> component<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Home<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span></code></pre><p>这样之后我们还需要一步，加个路由器，在上面我们写了两组路由，同时还会报错指示我们需要添加 <code>Router</code> 来解决错误，这就是需要我们添加路由器来管理路由，如果我们在 Link 和 Route 中分别用路由器管理，那这样是实现不了的，只有在一个路由器的管理下才能进行页面的跳转工作。</p><p>因此我们也可以在 Link 和 Route 标签的外层标签采用 BrowserRouter 包裹，但是这样当我们的路由过多时，我们要不停的更改标签包裹的位置，因此我们可以这么做</p><p>我们回到 App.jsx 目录下的 index.js 文件，将整个 App 组件标签采用 <code>BrowserRouter</code> 标签去包裹，这样整个 App 组件都在<strong>一个路由器</strong>的管理下</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// index.js</span><span class="token operator">&lt;</span>BrowserRouter<span class="token operator">></span><span class="token operator">&lt;</span> App <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>BrowserRouter<span class="token operator">></span></code></pre><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/react-router.gif" alt="react-router"></p><h2 id="🍿-5-路由组件和一般组件"><a href="#🍿-5-路由组件和一般组件" class="headerlink" title="🍿 5. 路由组件和一般组件"></a>🍿 5. 路由组件和一般组件</h2><p>在我们前面的内容中，我们是把组件 Home 和组件 About 当成是一般组件来使用，我们将它们写在了 src 目录下的 components 文件夹下，但是我们又会发现它和普通的组件又有点不同，对于普通组件而言，我们在引入它们的时候我们是通过标签的形式来引用的。但是在上面我们可以看到，我们把它当作路由来引用时，我们是通过 <code>&#123;Home&#125;</code> 来引用的。</p><p>从这一点我们就可以认定一般组件和路由组件存在着差异</p><p>首先它们的写法不同</p><p><strong>一般组件</strong>：<code>&lt;Demo/&gt;</code>，<strong>路由组件</strong>：<code>&lt;Route path=&quot;/demo&quot; component=&#123;Demo&#125;/&gt;</code></p><p>同时为了规范我们的书写，一般将路由组件放在 <code>pages</code> 文件夹中，路由组件放在 <code>components</code> </p><p>而最重要的一点就是它们接收到的 <code>props</code> 不同，在一般组件中，如果我们不进行传递，就不会收到值。而对于路由组件而言，它会接收到 3 个固定属性 <code>history</code> 、<code>location</code> 以及 <code>match</code> </p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210901142121047.png" alt="image-20210901142121047"></p><h2 id="🍛-6-NavLink-标签"><a href="#🍛-6-NavLink-标签" class="headerlink" title="🍛 6. NavLink 标签"></a>🍛 6. NavLink 标签</h2><p>NavLink 标签是和 Link 标签作用相同的，但是它又比 Link 更加强大。</p><p>在前面的 demo 展示中，你可能会发现点击的按钮并没有出现高亮的效果，正常情况下我们给标签多添加一个 <code>active</code>  的类就可以实现高亮的效果</p><p>而 NavLink 标签正可以帮助我们实现这一步</p><p>当我们选中某个 NavLink 标签时，就会自动的在类上添加一个 <code>active</code> 属性</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>NavLink className<span class="token operator">=</span><span class="token string">"list-group-item"</span> to<span class="token operator">=</span><span class="token string">"/about"</span><span class="token operator">></span>About<span class="token operator">&lt;</span><span class="token operator">/</span>NavLink<span class="token operator">></span></code></pre><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/react-router-navlink.gif" alt="react-router-navlink"></p><p>我们可以看到左侧的元素类名在不断的切换，当然 NavLink 标签是默认的添加上 <code>active</code> 类，我们也可以改变它，在标签上添加一个属性 <code>activeClassName</code> </p><p>例如 <code>activeClassName=&quot;aaa&quot;</code> 在触发这个 NavLink 时，会自动添加一个 <code>aaa</code> 类</p><h2 id="🥩-7-NavLink-封装"><a href="#🥩-7-NavLink-封装" class="headerlink" title="🥩 7. NavLink 封装"></a>🥩 7. NavLink 封装</h2><p>在上面的 NavLink 标签种，我们可以发现我们每次都需要重复的去写这些样式名称或者是 <code>activeClassName</code> ，这并不是一个很好的情况，代码过于冗余。那我们是不是可以想想办法封装一下它们呢？</p><p>我们可以采用 <code>MyNavLink</code> 组件，对 NavLink 进行封装</p><p>首先我们需要新建一个 MyNavLink 组件</p><p><code>return</code> 一个结构</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>NavLink className<span class="token operator">=</span><span class="token string">"list-group-item"</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><p>首先，有一点非常重要的是，我们在标签体内写的内容都会成为一个 <code>children</code> 属性，因此我们在调用 <code>MyNavLink</code> 时，在标签体中写的内容，都会成为 <code>props</code> 中的一部分，从而能够实现</p><p>接下来我们在调用时，直接写</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>MyNavLink to<span class="token operator">=</span><span class="token string">"/home"</span><span class="token operator">></span>home<span class="token operator">&lt;</span><span class="token operator">/</span>MyNavLink<span class="token operator">></span></code></pre><p>即可实现相同的效果</p><hr><p>以上就是本节关于 React 路由的相关知识！</p><blockquote><p>非常感谢您的阅读，欢迎提出你的意见，有什么问题欢迎指出，谢谢！🎈</p></blockquote><h2 id="🌮-React-入门学习（十一）–-React-路由传参"><a href="#🌮-React-入门学习（十一）–-React-路由传参" class="headerlink" title="🌮 React 入门学习（十一）– React 路由传参"></a>🌮 React 入门学习（十一）– React 路由传参</h2><h2 id="引言-6"><a href="#引言-6" class="headerlink" title="引言"></a>引言</h2><p>在上一篇中，我们学习了 React 中使用路由技术，以及如何使用 <code>MyNavLink</code> 去优化使用路由时的代码冗余的情况。</p><p>这一节我们继续上一篇 React 路由进行一些补充</p><h2 id="🍈-1-Switch-解决相同路径问题"><a href="#🍈-1-Switch-解决相同路径问题" class="headerlink" title="🍈 1. Switch 解决相同路径问题"></a>🍈 1. Switch 解决相同路径问题</h2><p>首先我们看一段这样的代码</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/home"</span> component<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Home<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span><span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/about"</span> component<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>About<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span><span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/about"</span> component<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>About<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span></code></pre><p>这是两个路由组件，在2，3行中，我们同时使用了相同的路径 <code>/about</code> </p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210903075753268.png" alt="image-20210903075753268"></p><p>我们发现它出现了两个 <code>about</code> 组件的内容，那这是为什么呢？</p><p>其实是因为，<code>Route</code> 的机制，当匹配上了第一个 <code>/about</code> 组件后，它还会继续向下匹配，因此会出现两个 About 组件，这时我们可以采用 <code>Switch</code> 组件进行包裹</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>Switch<span class="token operator">></span>    <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/home"</span> component<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Home<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>    <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/about"</span> component<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>About<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>    <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/about"</span> component<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>About<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">></span></code></pre><p>在使用 <code>Switch</code> 时，我们需要先从 <code>react-router-dom</code> 中暴露出 <code>Switch</code> 组件</p><p>这样我们就能成功的解决掉这个问题了</p><h2 id="🥟-2-解决二级路由样式丢失的问题"><a href="#🥟-2-解决二级路由样式丢失的问题" class="headerlink" title="🥟 2. 解决二级路由样式丢失的问题"></a>🥟 2. 解决二级路由样式丢失的问题</h2><p>当我们将路径改写成 <code>path=&quot;/ljc/about&quot;</code> 这样的形式时，我们会发现当我们强制刷新页面的时候，页面的 CSS 样式消失了。这是因为，我们在引入样式文件时，采取的是相对路径，当我们使用二级路由的时候，会使得请求的路径发生改变，浏览器会向 <code>localhost:3000/ljc</code> 下请求 css 样式资源，这并不是我们想要的，因为我们的样式存放于公共文件下的 CSS 文件夹中。</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/react-router-tworouter.gif" alt="react-router-tworouter"></p><p>我们有几种方法，可以解决这个问题 </p><ol><li>将样式引入的路径改成绝对路径</li><li>引入样式文件时不带 <code>.</code></li><li>使用 HashRouter</li></ol><p>我们一般采用<strong>第一种方式</strong>去解决</p><h2 id="🍑-3-路由的精准匹配和模糊匹配"><a href="#🍑-3-路由的精准匹配和模糊匹配" class="headerlink" title="🍑 3. 路由的精准匹配和模糊匹配"></a>🍑 3. 路由的精准匹配和模糊匹配</h2><p>路由的匹配有两种形式，一种是精准匹配一种是模糊匹配，React 中默认开启的是模糊匹配</p><p>模糊匹配可以理解为，在匹配路由时，只要有匹配到的就好了</p><p>精准匹配就是，两者必须相同</p><p>我们展示一个模糊匹配的例子</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>MyNavLink to <span class="token operator">=</span> <span class="token string">"/home/a/b"</span> <span class="token operator">></span>Home<span class="token operator">&lt;</span><span class="token operator">/</span>MyNavLink<span class="token operator">></span></code></pre><p>这个标签匹配的路由，我们可以拆分成 home a b，将会根据这个先后顺序匹配路由</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/home"</span>component<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Home<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">></span></code></pre><p>就可以匹配到上面的这个路由，因为它匹配的是 home</p><p>当匹配的路由改成下面这样时，就会失败。它会按照第一个来匹配，如果第一个没有匹配上，那就会失败，这里的 a 和 home 没有匹配上，很显然会失败</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/a"</span> component<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Home<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">></span></code></pre><p>当我们开启了精准匹配后，就我们的第一种匹配就不会成功，因为精准匹配需要的是完全一样的值，开启精准匹配采用的是 <code>exact</code> 来实现</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>Route exact<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token boolean">true</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  path<span class="token operator">=</span><span class="token string">"/home"</span> component<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Home<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">></span></code></pre><h2 id="🍋-4-重定向路由"><a href="#🍋-4-重定向路由" class="headerlink" title="🍋 4. 重定向路由"></a>🍋 4. 重定向路由</h2><p>在我们写好了这些之后，我们会发现，我们需要点击任意一个按钮，才会去匹配一个组件，这并不是我们想要的，我们想要页面一加载上来，默认的就能匹配到一个组件。</p><p>这个时候我们就需要时候 Redirecrt 进行默认匹配了。</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>Redirect to<span class="token operator">=</span><span class="token string">"/home"</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><p>当我们加上这条语句时，页面找不到指定路径时，就会重定向到 <code>/home</code> 页面下因此当我们请求3000端口时，就会重定向到 <code>/home</code> 这样就能够实现我们想要的效果了</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210904013342960.png" alt="image-20210904013342960"></p><h2 id="🍓-5-嵌套路由"><a href="#🍓-5-嵌套路由" class="headerlink" title="🍓 5. 嵌套路由"></a>🍓 5. 嵌套路由</h2><p>嵌套路由也就是我们前面有提及的二级路由，但是嵌套路由包括了二级、三级…还有很多级路由，当我们需要在一个路由组件中添加两个组件，一个是头部，一个是内容区</p><p>我们将我们的嵌套内容写在相应的组件里面，这个是在 Home 组件的 return 内容</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>h2<span class="token operator">></span>Home组件内容<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>ul className<span class="token operator">=</span><span class="token string">"nav nav-tabs"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>li<span class="token operator">></span>                <span class="token operator">&lt;</span>MyNavLink className<span class="token operator">=</span><span class="token string">"list-group-item"</span> to<span class="token operator">=</span><span class="token string">"/home/news"</span><span class="token operator">></span>News<span class="token operator">&lt;</span><span class="token operator">/</span>MyNavLink<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>            <span class="token operator">&lt;</span>li<span class="token operator">></span>                <span class="token operator">&lt;</span>MyNavLink className<span class="token operator">=</span><span class="token string">"list-group-item "</span> to<span class="token operator">=</span><span class="token string">"/home/message"</span><span class="token operator">></span>Message<span class="token operator">&lt;</span><span class="token operator">/</span>MyNavLink<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 注册路由 */</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&lt;</span>Switch<span class="token operator">></span>            <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/home/news"</span> component<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>News<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/home/message"</span> component<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Message<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre><p>在这里我们需要使用嵌套路由的方式，才能完成匹配</p><p>首先我们得 React 中路由得注册是有顺序得，我们在匹配得时候，因为 Home 组件是先注册得，因此在匹配的时候先去找 home 路由，由于是模糊匹配，会成功的匹配</p><p>在 Home 组件里面去匹配相应的路由，从而找到 &#x2F;home&#x2F;news 进行匹配，因此找到 News 组件，进行匹配渲染</p><blockquote><p>如果开启精确匹配的话，第一步的 <code>/home/news</code> 匹配 <code>/home</code> 就会卡住不动，这个时候就不会显示有用的东西了！</p></blockquote><h2 id="🍟-6-传递-params-参数"><a href="#🍟-6-传递-params-参数" class="headerlink" title="🍟 6. 传递 params 参数"></a>🍟 6. 传递 params 参数</h2><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/react-router-params.gif" alt="react-router-params"></p><p>首先我们需要实现的效果是，点击消息列表，展示出消息的详细内容</p><p>这个案例实现的方法有三种，第一种就是传递 params 参数，由于我们所显示的数据都是从数据集中取出来的，因此我们需要有数据的传输给 Detail 组件</p><p>我们首先需要将详细内容的数据列表，保存在 DetailData 中，将消息列表保存在 Message 的 state 中。</p><p>我们可以通过将数据拼接在路由地址末尾来实现数据的传递</p><pre class=" language-js"><code class="language-js"> <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token template-string"><span class="token string">`/home/message/detail/$&amp;#123;msgObj.id&amp;#125;/$&amp;#123;msgObj.title&amp;#125;`</span></span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>msgObj<span class="token punctuation">.</span>title<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span></code></pre><p>如上，我们将消息列表的 id 和 title 写在了路由地址后面</p><blockquote><p>这里我们需要注意的是：需要采用模板字符串以及 <code>$</code> 符的方式来进行数据的获取</p></blockquote><p>在注册路由时，我们可以通过 <code>:数据名</code> 来接收数据</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/home/message/detail/:id/:title"</span> component<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Detail<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><p>如上，使用了 <code>:id/:title</code> 成功的接收了由 Link 传递过来的 id 和 title 数据</p><p>这样我们既成功的实现了路由的跳转，又将需要获取的数据传递给了 Detail 组件</p><p>我们在 Detail 组件中打印 <code>this.props</code> 来查看当前接收的数据情况</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210906153042353.png" alt="image-20210906153042353"></p><p>我们可以发现，我们传递的数据被接收到了对象的 match 属性下的 params 中</p><p>因此我们可以在 Detail 组件中获取到又 Message 组件中传递来的 params 数据</p><p>并通过 params 数据中的 <code>id</code> 值，在详细内容的数据集中查找出指定 <code>id</code> 的详细内容</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> id<span class="token punctuation">,</span> title <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>match<span class="token punctuation">.</span>params<span class="token keyword">const</span> findResult <span class="token operator">=</span> DetailData<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>detailObj<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> detailObj<span class="token punctuation">.</span>id <span class="token operator">===</span> id<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>最后渲染数据即可</p><h2 id="🍀-7-传递-search-参数"><a href="#🍀-7-传递-search-参数" class="headerlink" title="🍀 7. 传递 search 参数"></a>🍀 7. 传递 search 参数</h2><p>我们还可以采用传递 search 参数的方法来实现</p><p>首先我们先确定数据传输的方式</p><p>我们先在 Link 中采用 <code>?</code> 符号的方式来表示后面的为可用数据</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token template-string"><span class="token string">`/home/message/detail/?id=$&amp;#123;msgObj.id&amp;#125;&amp;title=$&amp;#123;msgObj.title&amp;#125;`</span></span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>msgObj<span class="token punctuation">.</span>title<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span></code></pre><p>采用 <code>search</code> 传递的方式，无需在 Route 中再次声明，可以在 Detail 组件中直接获取到</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210906155217647.png" alt="image-20210906155217647"></p><p>我们可以发现，我们的数据保存在了 <code>location</code> 对象下的 <code>search</code> 中，是一种字符串的形式保存的，我们可以引用一个库来进行转化 <code>querystring</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> qs <span class="token keyword">from</span> <span class="token string">'querystring'</span></code></pre><p>这个库是 React 中自带有的，它有两个方法，一个是 <code>parse</code> 一个是 <code>stringify</code> </p><p>我们可以采用 <code>parse</code> 方法，将字符串转化为键值对形式的对象</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> search <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>location<span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> id<span class="token punctuation">,</span> title <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>search<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>这样我们就能成功的获取数据，并进行渲染</p><blockquote><p>tips：无需声明接收</p></blockquote><h2 id="🌷-8-传递-state-参数"><a href="#🌷-8-传递-state-参数" class="headerlink" title="🌷 8. 传递 state 参数"></a>🌷 8. 传递 state 参数</h2><p>采用传递 state 参数的方法，是我觉得最完美的一种方法，因为它不会将数据携带到地址栏上，采用内部的状态来维护</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> pathname<span class="token punctuation">:</span> <span class="token string">'/home/message/detail'</span><span class="token punctuation">,</span> state<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> id<span class="token punctuation">:</span> msgObj<span class="token punctuation">.</span>id<span class="token punctuation">,</span> title<span class="token punctuation">:</span> msgObj<span class="token punctuation">.</span>title <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>msgObj<span class="token punctuation">.</span>title<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span></code></pre><p>首先，我们需要在 Link 中注册跳转时，传递一个路由对象，包括一个 跳转地址名，一个 state 数据，这样我们就可以在 Detail 组件中获取到这个传递的 state 数据</p><blockquote><p>注意：采用这种方式传递，无需声明接收</p></blockquote><p>我们可以在 Detail 组件中的 location 对象下的 state 中取出我们所传递的数据</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> id<span class="token punctuation">,</span> title <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>location<span class="token punctuation">.</span>state</code></pre><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210906160940033.png" alt="image-20210906160940033"></p><p>直接使用即可~</p><p>解决清除缓存造成报错的问题，我们可以在获取不到数据的时候用空对象来替代，例如，</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> id<span class="token punctuation">,</span> title <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>location<span class="token punctuation">.</span>state <span class="token operator">||</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>当获取不到 <code>state</code> 时，则用空对象代替</p><blockquote><p>这里的 state 和状态里的 state 有所不同</p></blockquote><hr><blockquote><p>非常感谢您的阅读，欢迎提出你的意见，有什么问题欢迎指出，谢谢！🎈</p></blockquote><h2 id="🌮-React-入门学习（十二）–-React-路由跳转"><a href="#🌮-React-入门学习（十二）–-React-路由跳转" class="headerlink" title="🌮 React 入门学习（十二）– React 路由跳转"></a>🌮 React 入门学习（十二）– React 路由跳转</h2><h2 id="1-push-与-replace-模式"><a href="#1-push-与-replace-模式" class="headerlink" title="1. push 与 replace 模式"></a>1. push 与 replace 模式</h2><p>默认情况下，开启的是 push 模式，也就是说，每次点击跳转，都会向栈中压入一个新的地址，在点击返回时，可以返回到上一个打开的地址，</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/react-router-push.gif" alt="react-router-push"></p><p>就像上图一样，我们每次返回都会返回到上一次点击的地址中</p><p>当我们在读消息的时候，有时候我们可能会不喜欢这种繁琐的跳转，我们可以开启 replace 模式，这种模式与 push 模式不同，它会将当前地址<strong>替换</strong>成点击的地址，也就是替换了新的栈顶</p><p>我们只需要在需要开启的链接上加上 <code>replace</code> 即可</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>Link replace to<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> pathname<span class="token punctuation">:</span> <span class="token string">'/home/message/detail'</span><span class="token punctuation">,</span> state<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> id<span class="token punctuation">:</span> msgObj<span class="token punctuation">.</span>id<span class="token punctuation">,</span> title<span class="token punctuation">:</span> msgObj<span class="token punctuation">.</span>title <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>msgObj<span class="token punctuation">.</span>title<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span></code></pre><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/react-router-replace.gif" alt="react-router-replace"></p><h2 id="2-编程式路由导航"><a href="#2-编程式路由导航" class="headerlink" title="2. 编程式路由导航"></a>2. 编程式路由导航</h2><p>我们可以采用绑定事件的方式实现路由的跳转，我们在按钮上绑定一个 <code>onClick</code> 事件，当事件触发时，我们执行一个回调 <code>replaceShow</code> </p><p>这个函数接收两个参数，用来仿制默认的跳转方式，第一个是点击的 id 第二个是标题</p><p>我们在回调中，调用 <code>this.props.location</code> 对象下的 replace 方法</p><pre class=" language-js"><code class="language-js">replaceShow <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> title<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`/home/message/detail/$&amp;#123;id&amp;#125;/$&amp;#123;title&amp;#125;`</span></span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>同时我们可以借助 <code>this.props.history</code> 身上的 API 实现路由的跳转，例如 <code>go</code>、<code>goBack</code> 、<code>goForward</code></p><h2 id="3-withRouter"><a href="#3-withRouter" class="headerlink" title="3. withRouter"></a>3. withRouter</h2><p>当我们需要在页面内部添加回退前进等按钮时，由于这些组件我们一般通过一般组件的方式去编写，因此我们会遇到一个问题，<strong>无法获得 history 对象</strong>，这正是因为我们采用的是一般组件造成的。</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210906231051190.png" alt="image-20210906231051190"></p><p>只有路由组件才能获取到 history 对象</p><p>因此我们需要如何解决这个问题呢</p><p>我们可以利用 <code>react-router-dom</code> 对象下的 <code>withRouter</code> 函数来对我们导出的 <code>Header</code> 组件进行包装，这样我们就能获得一个拥有 <code>history</code> 对象的一般组件</p><p>我们需要对哪个组件包装就在哪个组件下引入</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Header/index.jsx</span><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> withRouter <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token comment" spellcheck="true">// 在最后导出对象时，用 `withRouter` 函数对 index 进行包装</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">withRouter</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这样就能让一般组件获得路由组件所特有的 API</p><h2 id="4-BrowserRouter-和-HashRouter-的区别"><a href="#4-BrowserRouter-和-HashRouter-的区别" class="headerlink" title="4. BrowserRouter 和 HashRouter 的区别"></a>4. BrowserRouter 和 HashRouter 的区别</h2><h4 id="它们的底层实现原理不一样"><a href="#它们的底层实现原理不一样" class="headerlink" title="它们的底层实现原理不一样"></a><strong>它们的底层实现原理不一样</strong></h4><p>对于 BrowserRouter 来说它使用的是 React 为它封装的 history API ，这里的 history 和浏览器中的 history 有所不同噢！通过操作这些 API 来实现路由的保存等操作，但是这些 API 是 H5 中提出的，因此不兼容 IE9 以下版本。</p><p>对于 HashRouter 而言，它实现的原理是通过 URL 的哈希值，但是这句话我不是很理解，用一个简单的解释就是</p><p>我们可以理解为是锚点跳转，因为锚点跳转会保存历史记录，从而让 HashRouter 有了相关的前进后退操作，HashRouter 不会将 <code>#</code> 符号后面的内容请求。兼容性更好！</p><h4 id="地址栏的表现形式不一样"><a href="#地址栏的表现形式不一样" class="headerlink" title="地址栏的表现形式不一样"></a>地址栏的表现形式不一样</h4><ul><li>HashRouter 的路径中包含 <code>#</code> ，例如 <code>localhost:3000/#/demo/test</code></li></ul><h4 id="刷新后路由-state-参数改变"><a href="#刷新后路由-state-参数改变" class="headerlink" title="刷新后路由 state 参数改变"></a>刷新后路由 state 参数改变</h4><ol><li>在BrowserRouter 中，state 保存在history 对象中，刷新不会丢失</li><li>HashRouter 则刷新会丢失 state</li></ol><h2 id="React-入门学习（十三）–-antd-组件库的基本使用"><a href="#React-入门学习（十三）–-antd-组件库的基本使用" class="headerlink" title="React 入门学习（十三）– antd 组件库的基本使用"></a>React 入门学习（十三）– antd 组件库的基本使用</h2><h2 id="引言-7"><a href="#引言-7" class="headerlink" title="引言"></a>引言</h2><p>在我们学习<code> JavaScript</code> 的时候，我们学习了一个 <code>bootstrap</code> 的组件库。可以让我们快速开发，但是我们现在学习了 React ，一种组件化编程方式，很少说会去贴大量的 HTML 代码，再配一下 CSS，JS。我们也有一些现成的组件库可以使用，我们只需要写一个组件标签即可调用。这让我们 React 开发变得十分的快速，方便和整洁。</p><p>我们这里学习的是 <code>Ant-design</code> （应该是这样），它有很多的组件供我们使用</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210907180731157.png" alt="image-20210907180731157"></p><p>按钮，日历，这些都是非常常用的组件，我们一起看看如何使用吧</p><h2 id="1-Antd-组件基本使用"><a href="#1-Antd-组件基本使用" class="headerlink" title="1. Antd 组件基本使用"></a>1. Antd 组件基本使用</h2><p>使用 <code>Antd</code> 组件非常的简单</p><p>引包 —– 暴露 —- 使用</p><p>首先我们通过组件库来实现一个简单的按钮</p><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>安装并引入 <code>antd</code> 包</p><p>使用命令下载这个组件库</p><pre class=" language-shell"><code class="language-shell">yarn add antd</code></pre><p>在我们需要使用的文件下引入，我这里是在 <code>App.jsx</code> 内引入</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> Button <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'antd'</span></code></pre><p>在引入的同时，暴露出要使用的组件名 <code>Button</code></p><p>推荐去<a href="https://ant.design/components/button-cn/">官方文档</a>查看，都会有代码解释</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210907181354552.png" alt="image-20210907181354552"></p><p>现在我们可以在 App 中使用 <code>Button</code> 组件</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>div<span class="token operator">></span>    App<span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token operator">&lt;</span>Button type<span class="token operator">=</span><span class="token string">"primary"</span><span class="token operator">></span>Primary Button<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>    <span class="token operator">&lt;</span>Button<span class="token operator">></span>Default Button<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>    <span class="token operator">&lt;</span>Button type<span class="token operator">=</span><span class="token string">"dashed"</span><span class="token operator">></span>Dashed Button<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>    <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Button type<span class="token operator">=</span><span class="token string">"text"</span><span class="token operator">></span>Text Button<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>    <span class="token operator">&lt;</span>Button type<span class="token operator">=</span><span class="token string">"link"</span><span class="token operator">></span>Link Button<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre><p>我这里使用了几种按钮</p><p>但是就这样你会发现按钮少了样式</p><p>我们还需要引入 <code>antd</code> 的 CSS 文件</p><pre class=" language-js"><code class="language-js">@<span class="token keyword">import</span> <span class="token string">'/node_modules/antd/dist/antd.less'</span><span class="token punctuation">;</span></code></pre><p>可以在 <code>node_modules</code> 文件中的 <code>antd</code> 目录下的 <code>dist</code> 文件夹中找到相应的样式文件，引入即可</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210907181854774.png" alt="image-20210907181854774"></p><p>即可成功引入 <code>antd</code> 组件</p><h2 id="2-自定义主题颜色"><a href="#2-自定义主题颜色" class="headerlink" title="2. 自定义主题颜色"></a>2. 自定义主题颜色</h2><p>由于这些组件采用的颜色，都是支付宝蓝，有时候我们不想要这样的颜色，想要用其他的配色，这当然是可以实现的，我们需要引用一些库和更改一些配置文件来实现</p><p>在视频中，老师讲解的是 <code>3.几</code> 版本中的实现方法，这种方法需要去暴露 React 中的配置文件，这种操作是不可返回的，一旦暴露就不可回收。我觉得这不是一个好方法~</p><p>在 <code>antd</code> 最新版中，引入了 <code>craco</code> 库，我们可以使用 <code>craco</code> 来实现自定义的效果</p><p>首先我们需要安装 <code>craco</code> </p><pre class=" language-shell"><code class="language-shell">yarn add @craco/craco</code></pre><p>同时我们需要更改 <code>package.json</code> 中的启动文件</p><pre class=" language-json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"craco start"</span><span class="token punctuation">,</span>  <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"craco build"</span><span class="token punctuation">,</span>  <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"craco test"</span><span class="token punctuation">,</span>  <span class="token property">"eject"</span><span class="token operator">:</span> <span class="token string">"react-scripts eject"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span></code></pre><p>更改成 <code>craco</code> 执行</p><p>接下来我们需要在根目录下新建一个 <code>craco.config.js</code> 文件，用于配置自定义内容</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> CracoLessPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'craco-less'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      plugin<span class="token punctuation">:</span> CracoLessPlugin<span class="token punctuation">,</span>      options<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        lessLoaderOptions<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          lessOptions<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            modifyVars<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">'@primary-color'</span><span class="token punctuation">:</span> <span class="token string">'skyblue'</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>            javascriptEnabled<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><p>其实它就是用来操作 <code>less</code> 文件的全局颜色</p><p>简单的说，<code>antd</code> 组件是采用 <code>less</code> 编写的，我们需要通过重新配置的方式去更改它的值</p><p>同时我们需要将我们先前的 <code>App.css</code> 文件更改为 <code>App.less</code> 文件，在当中引入我们的 <code>less</code> 文件</p><pre class=" language-js"><code class="language-js">@<span class="token keyword">import</span> <span class="token string">'/node_modules/antd/dist/antd.less'</span><span class="token punctuation">;</span></code></pre><p>注意一定要添加<strong>分号结尾</strong>，这是一个非常容易犯的错误</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210907200116517.png" alt="image-20210907200116517"></p><p>可见，我们成功的将主题色修改成了红色</p><blockquote><p>antd ui组件库就记这么多，还有样式的按需引入没有记录，不太喜好暴露 React 配置文件…</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>掌控习惯阅读笔记</title>
      <link href="/2023/08/15/zhang-kong-xi-guan-yue-du-bi-ji/"/>
      <url>/2023/08/15/zhang-kong-xi-guan-yue-du-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="掌控习惯：如何养成好习惯并戒除坏习惯"><a href="#掌控习惯：如何养成好习惯并戒除坏习惯" class="headerlink" title="掌控习惯：如何养成好习惯并戒除坏习惯"></a>掌控习惯：如何养成好习惯并戒除坏习惯</h1><p>先说说看这本书的缘由，由于种种原因，我从2023年7月15号到北京，到今天8月15号整整一个月的时间，并没有做多少重要的事情，但是这是一个很关键的时间节点，通过这一个月的时间，不说自己成长了多少，只能说是意识到了一些人生或者生活中需要领悟的东西。在这一个月的时间里，我有很多次后悔来了这里，但是最后都是以安慰自己这是一个试错和体验的过程结束。虽说在不断的说服自己，但还是会经常与没有选择来这里的情况进行比较，人都是这样，总是把没有选择的另一条路想象的很美好，然后陷入无尽的悔恨中。</p><p>我很早就知道后悔没有什么用，能做的就是尽量弥补，但是如何抚平自己内心的起伏是一个很困难的事情，到了这种时候，我就知道，我又应该看书了。根据遇到的问题，我找到了掌控习惯这本书，感觉它可以解决我目前的困惑。</p><p>这里插入一点题外话：很久没有好好看一本书了，现在都是由于外界驱动力开始看书，比如之前我们为什么要睡觉等，我希望自己能够保持看书的频率，虽说驱动力能够保持很好的效率，但是提前知道一些人生解法又有什么不好呢，我希望自己是享受这个过程的，不知道达到这种“境界”的我多大了。</p><h2 id="第6章——原动力被高估，环境往往更重要"><a href="#第6章——原动力被高估，环境往往更重要" class="headerlink" title="第6章——原动力被高估，环境往往更重要"></a>第6章——原动力被高估，环境往往更重要</h2><p>1、产品或服务越是触手可及，就越有可能去尝试。人们爱喝百威清啤的原因是每个酒吧里都供应它，而人们爱去星巴克的原因是它到处都有。我们喜欢认为一切都尽在自己掌握中。</p><p>开始我觉得——喜欢尽在掌握——这点不符合我，我应该是喜欢挑战，喜欢体验不同环境的呀。</p><p>后来发现大部分人都是熟知环境的受益者，熟悉的环境场所减少试错的可能，减少时间的消耗，减少内心的恐惧焦虑等等，有人可能不太喜欢这种一成不变所谓呆腻了的环境，但是我们应该提醒自己这种环境所带来的好处，熟知的环境不应该遭受排斥。尽在自己掌握的环境情况使人心安。</p><p>2、每个习惯都是由提示引发的，我们更有可能注意到显眼的提示。创造鲜明的视觉提示会把你的注意力引向你想要的举动。环境设计的效用之所以强大，不仅是因为它影响了我们与世界的交往方式，也因为我们很少这样做。大多数人生活在别人为他们创造的世界里。但是你可以更改你生活和工作的空间，以增加你接触到积极提示的机遇，同时减少接触到消极提示的机会。环境设计让你重新掌控自 己，成为自身生活的建筑师。你要争取成为自己的世界的设计师，而不仅仅是它的消费者。</p><p>3、我们会从心理上把习惯分配给它们各自发生的地方：家、办公室和 健身房。支配我们行为的不是我们的环境中的各类物品，而是我们与它们之 间的关系。对一个人来说，她的沙发是 她每天晚上阅读一小时的地方。对其他人来说，沙发则是他看电视和下 班后吃一碗冰激凌的地方。不同的人会有不同的记忆——乃至不同的习 惯——与同一个地方相关联。</p><p>4、可以训练自己把特定的习惯和特定的环境联系起来。在全新的环境中习惯更容易改变。它有助于你远离原有微妙的、促使你恢复旧习惯的触发因素和提示。</p><p>5、一个空间，一种用途。</p><p>6、尽可能避免将一种习惯的情境与另一种习惯的混在一起。一旦你开始混合不同的情境，你就会把各种习惯混为一谈——那些比较容易实行的习惯通常会占上风。</p><p>7、如果坚持将每个情境与特定的习惯和思维方式相关联，习惯会在这种可预测的环境下茁壮成长。</p><p>8、如果你想要稳定和可预测的行为，你需要一个稳定和可预测的环境。</p><p>怎样给自己构建志在成功的环境？做好显著的提示以及分区管理，即使只是在一间像智能手机一样mini的空间实现像智能手机般的多种功能，也需要做好自己的分区管理，将特定的情境与自己特定的习惯相关联可以获取到更高的效率。</p><p>这里突然体会到有自己的空间并且进行空间的设计是一件非常诱惑人的事情，也是我买房的一大驱动力了，哈哈。</p><h2 id="第8章——怎样使习惯不可抗拒"><a href="#第8章——怎样使习惯不可抗拒" class="headerlink" title="第8章——怎样使习惯不可抗拒"></a>第8章——怎样使习惯不可抗拒</h2><p>这里作者主要讲了食物等对我们的天然吸引力，当然除了食物，性欲，社交媒体等内容也被资本夸大了其特征增加了对人类本来就有的吸引力，这些特征促使我们养成了过度消费、沉溺于社交色情饮食等林林总总的习惯。我们与祖先拥有几乎相同的大脑，但是我们却面临着前所未有的巨大诱惑。</p><p>因此想要让某种行为发生的概率提高，那么就需要让它具备充足的吸引力。</p><p>其中了解渴望以及它是如何起作用的是关键的一点——多巴胺驱动的反馈回路。大脑有更多的神经回路被分配给渴求奖励，而不是喜欢它们。它将如此多的宝贵空间分配给负责渴求和欲望的区域，这一事实 进一步证明了这些过程所发挥的关键作用。欲望是驱动行为的引擎，每一个行动都源于此前的预期，是渴望引发了回应。</p><p>作者提出了利用绑定喜好方式提高某种行为的概率，它的工作原理就是把你需要做的事情与愿意做的事情绑定。</p><p>试验事件：北京物价高，如果我每天都自己做饭，那么我可以回学校后买一把自己喜欢的键盘。</p><h2 id="第十三章-怎样利用两分钟规则停止拖延"><a href="#第十三章-怎样利用两分钟规则停止拖延" class="headerlink" title="第十三章 怎样利用两分钟规则停止拖延"></a>第十三章 怎样利用两分钟规则停止拖延</h2><p>研究人员估计，我们每天的行动中有40%或50%都出自习惯，且每天都有几个时刻会产生巨大的影响，这些叫做决定性时刻。例如，你决定叫外卖或者在家自己做晚餐的那一刻，你决定开车或者骑自行车的那一刻，你决定开始做家庭作业或者拿起电子游戏控制器的那一刻：这些选择就是生活之路上的岔路口。掌控一天中决定性时刻非常重要，因为每一天都由许多时刻组成，但真正决定你一天行为 的是你的一些习惯性选择。这些小选择累积起来，每一个都为你如何度 过下一段时间设定了轨迹。</p><p>ps：习惯是切入点，而不是终点，他们是出租车，而不是健身房。</p><p>两分钟规则</p><p>首先确立一种习惯，然后才能不断改进，不要指望从一开始就培养一种完美的习惯，要脚踏实地，连续不断地做些简单的事。你必须先标准化，然后才能优化。一种程序的开始阶段越是仪式化，就越有可能实现注意力高度集中。做一整件事情的过程可能无法自动化，但是可以让第一个动作变成下意识的动作。</p><p>从掌握最小行为的前两分钟开始。然后，向中间阶段推进，并重复这个过程——只关注前两分钟，一定要在这个阶段做扎实，然后再继续进入下一个阶段。</p><h2 id="第十章-如何找到并消除你坏习惯的根源"><a href="#第十章-如何找到并消除你坏习惯的根源" class="headerlink" title="第十章 如何找到并消除你坏习惯的根源"></a>第十章 如何找到并消除你坏习惯的根源</h2><p>行为转变的第二定律的反用是让它缺乏吸引力。 </p><p>每种行为都有表层的渴求和更深层的动机。 </p><p>你的习惯是解决古老欲望（节省精力、获取食物和水、寻找伴侣传宗接代、与他人建立联系并结合、赢得社会的接受和认可、减少不确定性、获取地位和声望）的现代方法。 </p><p>人的大脑通过感觉听觉触觉视觉等接收提示，注意到一个提示，大脑就会进行推演，并预测下一个时刻应该做什么。习惯的原因实际上是先于它们的预测。这种预测会产生一种感觉——渴望（或者说是某种情感、欲望）。我们的感觉和情绪告诉我们是应该安于现状还是改变现状，它们帮助我们选定最佳行动方案。</p><p>强调避免坏习惯所换来的好处，让坏习惯不再有吸引力。 </p><p>习惯满足了一个动机，就会产生一种再次尝试的渴望，当我们将习惯与积极的感受相关联，习惯就有了吸引力；反之，则没有吸引力。在开始培养难度较大的习惯之前，先做些你喜欢的事情来创造一种激励仪式。</p><p>重建习惯，突出它们的益处而非不足，改变思维方式，让习惯变得更加有吸引力。</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>青训营前期笔记</title>
      <link href="/2023/08/13/qing-xun-ying-qian-qi-bi-ji/"/>
      <url>/2023/08/13/qing-xun-ying-qian-qi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="青训营基础前期知识点汇总"><a href="#青训营基础前期知识点汇总" class="headerlink" title="青训营基础前期知识点汇总"></a>青训营基础前期知识点汇总</h1><h2 id="如何写好Javascript"><a href="#如何写好Javascript" class="headerlink" title="如何写好Javascript"></a>如何写好Javascript</h2><p>一个好的js代码需要遵守：</p><p>1、各司其职：即HTML负责网页结构 CSS负责元素样式 JS负责交互和行为</p><p>2、组件封装：组件是指Web页面上抽出来一个个包含模板HTML、样式CSS和功能JS的单元，好的组件应该具备封装性、正确性、扩展性、复用性。</p><p>3、过程抽象：用函数作为黑盒来编写和使用，这个过程称之为过程抽象</p><p>举例：通过一段js代码实现浅色和深色两种浏览模式</p><pre class=" language-html"><code class="language-html">// 基本的html结构<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>深夜食堂<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>modeBtn<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>🌞<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>500px<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://p2.ssl.qhimg.com/t0120cc20854dc91c1e.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>            这是一间营业时间从午夜十二点到早上七点的特殊食堂。这里的老板，不太爱说话，却总叫人吃得热泪盈            眶。在这里，自卑的舞蹈演员偶遇隐退多年舞界前辈，前辈不惜讲述自己不堪回首的经历不断鼓舞年轻人，最终令其重拾自信；轻言绝交的闺蜜因为吃到共同喜爱的美食，回忆起从前的友谊，重归于好；乐观的绝症患者遇到同命相连的女孩，两人相爱并相互给予力量，陪伴彼此完美地走过了最后一程；一味追求事业成功的白领，在这里结交了真正暖心的朋友，发现真情比成功更有意义。食物、故事、真情，汇聚了整部剧的主题，教会人们坦然面对得失，对生活充满期许和热情。每一个故事背后都饱含深情，情节跌宕起伏，令人流连忘返 [6]  。        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css">// 基本样式&lt;style>    <span class="token number">.</span>content &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>      <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>    header &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>      <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>      <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span>      <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>&lt;/style></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 版本一： 基本交互 采用在原生的DOM结构上修改样式 即在js中修改了css样式</span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'modeBtn'</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> body <span class="token operator">=</span> document<span class="token punctuation">.</span>body    btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// console.log(e);</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>innerHTML <span class="token operator">===</span> <span class="token string">'🌞'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'black'</span><span class="token punctuation">;</span>        body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'white'</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'🌜'</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'white'</span><span class="token punctuation">;</span>        body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'black'</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'🌞'</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 版本二 单独写出白天和晚上的样式 点击时修改body的类样式即可 这样就不用直接在js中修改css样式了</span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'modeBtn'</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> body <span class="token operator">=</span> document<span class="token punctuation">.</span>body    btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span>className <span class="token operator">!==</span> <span class="token string">'day'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        body<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'day'</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        body<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'night'</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment" spellcheck="true">// css样式</span><span class="token punctuation">.</span>night <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  background<span class="token operator">-</span>color<span class="token punctuation">:</span> black<span class="token punctuation">;</span>  color<span class="token punctuation">:</span> white<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">.</span>day <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  background<span class="token operator">-</span>color<span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>  color<span class="token punctuation">:</span> black<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在body标签上添加类名 </span><span class="token operator">&lt;</span>body <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"day"</span><span class="token operator">></span></code></pre><pre class=" language-css"><code class="language-css">// 版本三 纯展示类交互寻求零js方案<span class="token comment" spellcheck="true">/* 隐藏checkbox 只是利用它的check状态改变来关联符号的状态 */</span>#modeCheckBox &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#<span class="token property">modeCheckBox</span><span class="token punctuation">:</span>checked + <span class="token number">.</span>content &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#<span class="token property">modeBtn</span><span class="token punctuation">:</span><span class="token punctuation">:</span>after &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'🌞'</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>#<span class="token property">modeCheckBox</span><span class="token punctuation">:</span>checked + <span class="token number">.</span>content #<span class="token property">modeBtn</span><span class="token punctuation">:</span><span class="token punctuation">:</span>after &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'🌜'</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>modeCheckBox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>深夜食堂<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>modeBtn<span class="token punctuation">"</span></span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>modeCheckBox<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>500px<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://p2.ssl.qhimg.com/t0120cc20854dc91c1e.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>            这是一间营业时间从午夜十二点到早上七点的特殊食堂。这里的老板，不太爱说话，却总叫人吃得热泪盈            眶。在这里，自卑的舞蹈演员偶遇隐退多年舞界前辈，前辈不惜讲述自己不堪回首的经历不断鼓舞年轻人，最终令其重拾自信；轻言绝交的闺蜜因为吃到共同喜爱的美食，回忆起从前的友谊，重归于好；乐观的绝症患者遇到同命相连的女孩，两人相爱并相互给予力量，陪伴彼此完美地走过了最后一程；一味追求事业成功的白领，在这里结交了真正暖心的朋友，发现真情比成功更有意义。食物、故事、真情，汇聚了整部剧的主题，教会人们坦然面对得失，对生活充满期许和热情。每一个故事背后都饱含深情，情节跌宕起伏，令人流连忘返 [6]  。        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h2 id="Web标准与前端开发"><a href="#Web标准与前端开发" class="headerlink" title="Web标准与前端开发"></a>Web标准与前端开发</h2><p><a href="https://juejin.cn/post/7016537313085751332?searchId=20230921152853C2F3301D4784AAA49D5A">【青训营】- Web标准与前端开发 - 掘金 (juejin.cn)</a></p><h3 id="前端应用的领域"><a href="#前端应用的领域" class="headerlink" title="前端应用的领域"></a>前端应用的领域</h3><p>Business：企业级应用，企业资源管理</p><p>Customer： 面向消费者，门户网站、电商平台</p><p>Developer： 面向开发者，提升开发者开发效率的平台、工具、框架</p><ul><li>web端</li></ul><p>5大浏览器</p><ul><li>服务器端</li></ul><p>Nodejs Expressjs koa</p><ul><li>移动端</li></ul><p>安卓 苹果</p><h3 id="终端和跨端"><a href="#终端和跨端" class="headerlink" title="终端和跨端"></a>终端和跨端</h3><ul><li>终端</li></ul><p>Webpack Cli</p><p>Babel Cli</p><p>Vue Cli</p><p>React Cli</p><ul><li>跨端</li></ul><p>Electron</p><p>NW.js</p><h3 id="http理解"><a href="#http理解" class="headerlink" title="http理解"></a>http理解</h3><h3 id="现代浏览器的深入理解"><a href="#现代浏览器的深入理解" class="headerlink" title="现代浏览器的深入理解"></a>现代浏览器的深入理解</h3><h3 id="Web标准"><a href="#Web标准" class="headerlink" title="Web标准"></a>Web标准</h3><p>W3C Ecma WHATWG IETF</p><h2 id="HTTP实用指南"><a href="#HTTP实用指南" class="headerlink" title="HTTP实用指南"></a>HTTP实用指南</h2><p><a href="https://juejin.cn/post/7018812471821500452?searchId=20230813201117E68724FE22BAB9788D51">【青训营】HTTP实用指南——基础篇 - 基本特点 - 协议分析 - 缓存 - HTTP2 - HTTPS - 掘金 (juejin.cn)</a></p><p>B站笔记</p><p><a href="https://space.bilibili.com/v/note-list?pn=1&tab=my">我的笔记本 (bilibili.com)</a></p><p>请求方法分类：</p><p>安全的请求：不会修改服务器的数据，也就是说这是一个对服务器只读操作的方法：GET、HEAD、OPTIONS</p><p>幂等的请求：同样的请求执行一次与连续执行多次的效果是一样的，服务器的状态也是一样的。就是说，幂等方法不应该有副作用，POST方法不是幂等的。</p><p>强制缓存与协商缓存的区别：</p><p>强制缓存命中，则不需要给服务器发送请求，会返回请求状态码200</p><p>协商缓存会判断资源是否更新而决定是否使用缓存，客户端与服务器会发生一次通讯，如果命中协商缓存，则服务器返回304.</p><p>Cache-Control是HTTP1.1的规范，一般用max-age字段来表示相对时间，比如 Cache-Control:max-age&#x3D;3600 代表资源的有效期是 3600 秒。并且返回头中的 Date 表示消息发送的时间，表示当前资源在 Date ~ Date +3600s 这段时间里都是有效的。<br>如果 <a href="https://so.csdn.net/so/search?q=Cache-Control&spm=1001.2101.3001.7020">Cache-Control</a>与 Expires 同时存在的话， Cache-Control 的优先级高于 Expires 。</p><p>Last-Modified&#x2F;If-Modified-Since 二者的值都是 GMT 格式的时间字符串，Last-Modified标记了文件最后的修改时间，然后在下一次请求时请求头带上If-Modified-Since，其值为本地保存的Last-Modified，告诉服务器我本地缓存最后的修改时间，服务器如果判断文件未修改，则命中协商缓存，返回304 Not Modified状态码，浏览器就不再请求资源，直接使用本底的缓存；如果文件修改，则返回资源内容，新的 Last-Modified 会在 response header 返回，并在下次请求之前更新本地缓存的 Last-Modified，下次请求时，If-Modified-Since会启用更新后的 Last-Modified。缺点是最小判断步长为1秒，无法判断1秒内的多次变化。</p><p>Etag&#x2F;If-None-Match，对于每一个文件，服务器根据文件本身算出一个哈希值（一般来说是哈希结构）并通过 Etag字段返回给浏览器，然后下一次请求后请求头带上 If-None-Match 字段，服务器会通过比较两者是否一致来判定文件内容是否被改变。与 Last-Modified 不一样的是，当服务器返回 304 Not Modified 的响应时，由于在服务器上ETag 重新计算过，response header中还会把这个 ETag 返回，即使这个 ETag 跟之前的没有变化。缺点是计算Etag值有性能损耗。</p><p>RESTful API</p><p>架构特征</p><p><strong>以资源为基础</strong> ：资源可以是一个图片、音乐、一个XML格式、HTML格式或者JSON格式等网络上的一个实体，除了一些二进制的资源外普通的文本资源更多以JSON为载体、面向用户的一组数据(通常从数据库中查询而得到)。<br><strong>统一接口</strong>: 对资源的操作包括获取、创建、修改和删除，这些操作正好对应HTTP协议提供的GET、POST、PUT和DELETE方法。换言而知，使用RESTful风格的接口但从接口上你可能只能定位其资源，但是无法知晓它具体进行了什么操作，需要具体了解其发生了什么操作动作要从其HTTP请求方法类型上进行判断。具体的HTTP方法和方法含义如下：</p><ul><li>GET（SELECT）：从服务器取出资源（一项或多项）。</li><li>POST（CREATE）：在服务器新建一个资源。</li><li>PUT（UPDATE）：在服务器更新资源（客户端提供完整资源数据）。</li><li>PATCH（UPDATE）：在服务器更新资源（客户端提供需要修改的资源数据）。</li><li>DELETE（DELETE）：从服务器删除资源。</li></ul><p><strong>URI指向资源</strong>：URI &#x3D; Universal Resource Identifier 统一资源标志符，用来标识抽象或物理资源的一个紧凑字符串。URI包括URL和URN，在这里更多时候可能代指URL(统一资源定位符)。RESTful是面向资源的，每种资源可能由一个或多个URI对应，但一个URI只指向一种资源。</p><p><strong>无状态</strong>：服务器不能保存客户端的信息， 每一次从客户端发送的请求中，要包含所有必须的状态信息，会话信息由客户端保存， 服务器端根据这些状态信息来处理请求。 当客户端可以切换到一个新状态的时候发送请求信息， 当一个或者多个请求被发送之后, 客户端就处于一个状态变迁过程中。 每一个应用的状态描述可以被客户端用来初始化下一次的状态变迁。</p><p>设计规范</p><p>通常一个完整的URL组成由以下几个部分构成：</p><pre><code>URI = scheme &quot;://&quot; host  &quot;:&quot;  port &quot;/&quot; path [ &quot;?&quot; query ][ &quot;#&quot; fragment ]</code></pre><p>scheme: 指底层用的协议，如http、https、ftp<br>host: 服务器的IP地址或者域名<br>port: 端口，http默认为80端口<br>path: 访问资源的路径，就是各种web 框架中定义的route路由<br>query: 查询字符串，为发送给服务器的参数，在这里更多发送数据分页、排序等参数。<br>fragment: 锚点，定位到页面的资源</p><p>通常一个RESTful API的path组成如下：</p><pre><code>/&#123;version&#125;/&#123;resources&#125;/&#123;resource_id&#125;</code></pre><p>version：API版本号，有些版本号放置在头信息中也可以，通过控制版本号有利于应用迭代。<br>resources：资源，RESTful API推荐用小写英文单词的复数形式。<br>resource_id：资源的id，访问或操作该资源。</p><p>此外，有时可能增删改查无法满足业务要求，可以在URL末尾加上action，例如</p><pre><code>/&#123;version&#125;/&#123;resources&#125;/&#123;resource_id&#125;/actionaction就是对资源的操作。</code></pre><ol><li>不用大写字母，所有单词使用英文且小写。</li><li>连字符用中杠<code>&quot;-&quot;</code>而不用下杠<code>&quot;_&quot;</code></li><li>正确使用 <code>&quot;/&quot;</code>表示层级关系,URL的层级不要过深，并且越靠前的层级应该相对越稳定</li><li>结尾不要包含正斜杠分隔符<code>&quot;/&quot;</code></li><li>URL中不出现动词，用请求方式表示动作</li><li>资源表示用复数不要用单数</li><li>不要使用文件扩展名</li></ol><p>展示GET,POST,PUT,DELETE几种请求API的设计与含义分析。</p><pre><code>GET /collection：从服务器查询资源的列表（数组）GET /collection/resource：从服务器查询单个资源POST /collection：在服务器创建新的资源PUT /collection/resource：更新服务器资源DELETE /collection/resource：从服务器删除资源</code></pre><p>根据安全性和幂等性，解释如下</p><p><img src="https://pic1.zhimg.com/80/v2-3d59c2beffb51d40d7c05fcf83ed372c_1440w.webp" alt="img"></p><p>使用场景</p><p><strong>静态资源</strong></p><p>通过调试器中的网络-&gt;css等请求头内容可以得到一些静态资源的信息，为了更快的传输静态资源，优化用户体验，那么就涉及到了<strong>静态资源的部署方案</strong>：缓存+CDN（如果是第一次访问，本地没有缓存，那么就会把资源存放在CDN上，CDN是内容分发网络 content delivery network，通过<strong>用户就近性</strong>和服务器负载的判断，以一种极为高效的方式为用户的请求提供服务）+文件名hash（因为cache-control里面的缓存的时间写的是一年，如果在这期间进行了更新，为了能够返回最新值，加上了文件名hash，如果文件名有变化—版本名变化，导致hash有变化，就会返回最新的内容了，这一步一般是在webpack打包的时候进行配置）。</p><p><strong>登录</strong></p><p>业务场景：<strong>表单登录</strong> 扫码登录 </p><p>技术方式：SSO</p><p>主要讲解表单登录的方式，这里头条页面登录完成之后查看请求头会发现是options的请求，是因为请求资源的url是跨域的。一般请求分为两类——简单请求，复杂请求，只有在复杂请求之前需要发送一次预请求OPTIONS，查看跨域是否允许</p><p>跨域解决方法 CORS 代理服务器 Iframe</p><p>http是一种无状态的请求，为什么下一次进入页面还能够记住登录状态呢？</p><p>1、鉴权方案</p><p>cookie+session</p><p>登录成功之后会发起登录提交请求POST，账户名密码+手机验证码等提交给server，如果信息是正确的，那么server会生成一个session并保存下来，同时会借由这次的response的set-cookie将session保存在相应的域名和地址下面，下一次访问时浏览器自动携带策略会帮我们把之前的set-cookie携带出来，server会根据携带的信息进行分析是否是该用户登录，然后返回对应的信息。</p><p>2、JWT</p><p>JSON web token</p><p>登录成功之后会发起登录提交请求POST，账户名密码+手机验证码等提交给server，如果信息是正确的，那么server会生成一个token但不会保存，然后response返回该token，下次请求时发送token，server对token进行解析，判断是哪位用户，返回相应信息。</p><p>ps：一般https默认的端口号就是443</p><p>实战分析</p><p>浏览器：http的运用主要是在AJAX的XHR和Fetch</p><p>node：标准库（HTTP、HTTPS）、axios</p><p>网络优化</p><img src='https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/Snipaste_2023-08-15_13-45-28.jpg'><p>稳定性</p><ul><li><p>重试机制（超时、错误）</p></li><li><p>缓存</p></li><li><p>数据安全</p></li></ul><p>WebSocket</p><p>浏览器与服务器进行双工通讯的网络技术（聊天室等实时性要求高的场景，URL使用ws:&#x2F;&#x2F;或者wss:&#x2F;&#x2F;开头</p><p>QUIC</p><p>Quick UDP Internet Connection</p><p>0-RTT建联</p><p>类似TCP可靠传输</p><p>类似TLS加密传输。。。</p><h2 id="前端设计模式应用"><a href="#前端设计模式应用" class="headerlink" title="前端设计模式应用"></a>前端设计模式应用</h2><h3 id="设计模式简介"><a href="#设计模式简介" class="headerlink" title="设计模式简介"></a>设计模式简介</h3><p>设计模式（Design pattern）代表了最佳实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p><blockquote><p>设计模式是软件设计中常见问题的解决方案的模型，它是历史经验的总结，与特定语言无关。</p></blockquote><h2 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h2><p>根据设计模式的参考书 <strong>Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素）</strong> 中所提到的，总共有 <code>23</code> 种设计模式，可分为三大类。</p><p><strong>创建型模式</strong> - 如何创建一个对象</p><blockquote><ul><li>工厂模式</li><li>抽象工厂模式</li><li>单例模式</li><li>建造者模式</li><li>原型模式</li></ul></blockquote><p><strong>结构型模式</strong> - 如何灵活的将对象组装成较大的结构</p><blockquote><ul><li>适配器模式</li><li>桥接模式</li><li>过滤器模式</li><li>组合模式</li><li>装饰器模式</li><li>外观模式</li><li>享元模式</li><li>代理模式</li></ul></blockquote><p><strong>行为型模式</strong> - 复责对象间的高效通信和职责划分</p><blockquote><ul><li>责任链模式</li><li>命令模式</li><li>解释器模式</li><li>迭代器模式</li><li>中介者模式</li><li>备忘录模式</li><li>观察者模式</li><li>状态模式</li><li>空对象模式</li><li>策略模式</li><li>模板模式</li><li>访问者模式</li></ul></blockquote><h2 id="浏览器中的设计模式"><a href="#浏览器中的设计模式" class="headerlink" title="浏览器中的设计模式"></a>浏览器中的设计模式</h2><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p><strong>定义</strong>：全局唯一访问对象。eg：window</p><p><strong>应用场景</strong>：用单例模式实现请求缓存，全局状态管理等。</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> api <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">"./utils"</span><span class="token comment" spellcheck="true">// 创建了一个响应类</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Request</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> instance<span class="token punctuation">:</span> Request<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 私有变量 map类型 键值对 保存 url与对应的资源</span>    <span class="token keyword">private</span> cache<span class="token punctuation">:</span> Record<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 进行初始化</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建实例对象时使用该方法创建</span>    <span class="token keyword">static</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果实例有缓存 则直接返回该实例</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 否则就返回new的新对象</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 接下来就是实现响应的部分</span>    <span class="token keyword">public</span> async <span class="token function">request</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> String<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果有该url的缓存 则返回</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>url<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>url<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 否则就异步进行资源请求 完成后不要忘记将其保存到cache中</span>        <span class="token keyword">const</span> response <span class="token operator">=</span> await <span class="token function">api</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>url<span class="token punctuation">]</span> <span class="token operator">=</span> response<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h3><p><strong>定义</strong>：一种订阅机制，可在被订阅对象发生变化时通知订阅者。</p><p><strong>应用场景</strong>：从系统架构之间的解耦，到业务中一些实现模式，像邮件订阅，上线订阅等等，应用广泛。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token keyword">const</span> doSomething1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Send message to user"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">const</span> doSomething2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Log..."</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>button<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> doSomething1<span class="token punctuation">)</span>button<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> doSomething2<span class="token punctuation">)</span></code></pre><h2 id="JavaScript中的设计模式"><a href="#JavaScript中的设计模式" class="headerlink" title="JavaScript中的设计模式"></a>JavaScript中的设计模式</h2><p>这里设计模式其实没有太懂</p><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><p><strong>定义</strong>：复制已有对象来创建新的对象。</p><p><strong>应用场景</strong>：JS中对象创建的基本模式。</p><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p><strong>定义</strong>：可自定义控制对原对象的访问方式，并且允许在更新前后做一些额外处理。</p><p><strong>应用场景</strong>：监控，代理工具，前端框架实现等等。</p><h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><p><strong>定义</strong>：在不暴露数据类型的情况下访问集合中的数据。</p><p><strong>应用场景</strong>：数据结构中有多种数据类型，列表，树等，提供通用操作接口。</p><h2 id="前端框架中的设计模式"><a href="#前端框架中的设计模式" class="headerlink" title="前端框架中的设计模式"></a>前端框架中的设计模式</h2><h3 id="代理模式-1"><a href="#代理模式-1" class="headerlink" title="代理模式"></a>代理模式</h3><p><strong>定义</strong>：由于某些原因需要给某对象提供一个代理以控制对该对象的访问。</p><p><strong>应用场景</strong>：对 DOM 进行操作等。</p><p>前端框架中对 DOM 操作的代理：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/123c67dd749545c3af4bb61c2ee304c7~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="Snipaste_2022-07-30_23-00-22.png"></p><p>虚拟 DOM（Virtual DOM）本质上是 JS 和 DOM 之间的一个<strong>映射缓存</strong>，它在形态上表现为一个能够描述 DOM 结构及其属性信息的 JS 对象。</p><blockquote><ul><li>虚拟 DOM 是 JS 对象</li><li>虚拟 DOM 是对真实 DOM 的描述</li></ul></blockquote><p>我们看看 React 中的虚拟 DOM 大致是如何工作的：</p><blockquote><ul><li><strong>挂载阶段</strong>：React 将结合 JSX 的描述，构建出虚拟 DOM 树，然后通过 <code>ReactDOM.render</code> 实现虚拟 DOM 到真实 DOM 的映射（触发渲染流水线）。</li><li><strong>更新阶段</strong>：页面的变化在作用于真实 DOM 之前，会先作用于虚拟 DOM，虚拟 DOM 将在 JS 层借助算法先对比出具体有哪些真实 DOM 需要被改变，然后再将这些改变作用于真实 DOM。</li></ul></blockquote><h3 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h3><p><strong>定义</strong>：可多个对象组合使用，也可单个对象独立使用。</p><p><strong>应用场景</strong>：DOM，前端组件，文件目录，部门。</p><h2 id="响应式系统与React"><a href="#响应式系统与React" class="headerlink" title="响应式系统与React"></a>响应式系统与React</h2><p>掘金上关于青训营的笔记</p><p><a href="https://juejin.cn/post/7135063656693235748?searchId=2023081513555559FDBA9D54E5A89B08DB">响应式系统与React|青训营笔记 - 掘金 (juejin.cn)</a></p><p>B站尚硅谷笔记</p><p><a href="https://bright-boy.gitee.io/technical-notes/#/react/React%E5%85%A5%E9%97%A8">React入门 (gitee.io)</a></p><p>[react-study&#x2F;React 入门学习&#x2F;React 入门学习（一）– 基础知识以及 jsx语法.md at main · linjunc&#x2F;react-study (github.com)](<a href="https://github.com/linjunc/react-study/blob/main/React">https://github.com/linjunc/react-study/blob/main/React</a> 入门学习&#x2F;React 入门学习（一）– 基础知识以及 jsx语法.md)</p><p><a href="https://github.com/xzlaptt/React">xzlaptt&#x2F;React: React学习 (github.com)</a></p><h2 id="回流与重绘"><a href="#回流与重绘" class="headerlink" title="回流与重绘"></a>回流与重绘</h2><p>回流：对DOM的修改引发了DOM几何尺寸的变化（修改元素的宽、高或者隐藏元素等）时，浏览器需要重新计算元素的几何属性，然后再将计算的结果绘制出来，这个过程就是回流（也叫做重排）。 个人理解：这里应该就是布局树的重新建立（包括局部范围或者全局范围：从根节点html开始对整个渲染树进行重新布局）</p><p>重绘：对DOM的修改导致了样式的变化却并没有影响它的几何属性（比如修改了颜色或者背景色）时，浏览器不需要重新计算元素的几何属性、直接为该元素绘制新的样式。这个过程叫做重绘</p><p>只改变外观，风格，不影响布局，会引发重绘。</p><p>所以回流必然会引起重绘，但是重绘不一定会引起回流</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http接口平台开发</title>
      <link href="/2023/08/10/http-jie-kou-ping-tai-kai-fa/"/>
      <url>/2023/08/10/http-jie-kou-ping-tai-kai-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="一、框架搭建"><a href="#一、框架搭建" class="headerlink" title="一、框架搭建"></a>一、框架搭建</h2><p>前端vue</p><pre><code>// 基本框架// 安装vue-clinpm install -g @vue/cli// 创建项目// vue create http-frontend后面使用的是vite架构 搭建基础框架和基本设置在硅谷甄选那篇笔记中pnpm create vite// 根据项目进行具体的配置// 运行项目pnpm run dev</code></pre><p>后端express</p><pre><code>// 安装express-generatornpm install -g express-generator// 基本框架express http-interface-backendnpm installSET DEBUG=http-backend:* &amp; npm start</code></pre><p>分别在vscode中前后端项目中设置launch.json文件进行快捷启动，不需要在终端中输入命令运行。</p><p><a href="https://blog.csdn.net/lpw_cn/article/details/112424886">VS Code配置F5一键运行Vue应用（npm run serve）_KevinAha的博客-CSDN博客</a></p><p>根据<a href="https://juejin.cn/post/6844903476661583880#heading-0">手摸手，带你用vue撸后台 系列一（基础篇） - 掘金 (juejin.cn)</a>做好准备方面的工作：</p><p>1、根据业务模块来划分views，views和api两个模块一一对应，从而方便维护，全区公用的api模块，可以单独放置</p><p>2、components放置的都是全局公用的组件（上传组件、富文本等等），页面级的组件建议放在各自的views文件下，方便管理。</p><p>3、store 不建议为了vuex而用vuex，它只适合耦合度较大的模块，但是例如登录token、用户信息、全局个人偏好设置等内容可以使用vuex管理，具体还是需要结合自己的业务场景。</p><p>4、alias</p><p>项目变大之后，文件之间的引用关系复杂，需要使用alias</p><p>5、ESLint</p><p>vscode+eslint</p><p>需要安装eslint插件，按照链接进行设置</p><p><a href="https://blog.csdn.net/weixin_42146585/article/details/126037592">给Vscode配置ESlint语法检查 — ESLint 插件自动格式化设置（实现Ctrl+S 按照ESLint规则自动格式化代码）_vscode语法检查插件_樂途途的博客-CSDN博客</a></p><pre class=" language-js"><code class="language-js">    <span class="token string">"files.autoSave"</span><span class="token punctuation">:</span><span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string">"eslint.validate"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>       <span class="token string">"javascript"</span><span class="token punctuation">,</span>       <span class="token string">"javascriptreact"</span><span class="token punctuation">,</span>       <span class="token string">"html"</span><span class="token punctuation">,</span>       <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">"language"</span><span class="token punctuation">:</span> <span class="token string">"vue"</span><span class="token punctuation">,</span> <span class="token string">"autoFix"</span><span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token string">"eslint.options"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"html"</span><span class="token punctuation">]</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>ctrl+Shift+P Reload Window 快速重启vscode</p><p>6、封装axios</p><p>7、前后端交互</p><ul><li><p>跨域问题 proxy跨域代理</p><p>跨域问题</p><ul><li>cors来解决跨域</li></ul><p>推荐的原因是只要第一次配好了，之后不管有多少接口和项目复用就可以了，一劳永逸的解决了跨域问题，而且不管是开发环境还是测试环境都能方便的使用。</p><ul><li>node中间代理：proxy代理跨域</li></ul><p>dev环境通过<code>webpack-dev-server</code>的<code>proxy</code>来解决，开发环境用<code>nginx</code>反代理一下就好了 ，<strong>但这种方法在生成环境是不适用的。在生产环境中需要使用</strong>Nginx反向代理不管是 proxy 和 nginx 的原理都是一样的通过搭建一个中转服务器来转发请求规避跨域的问题。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 使用node中间代理：proxy代理跨域的方式</span><span class="token comment" spellcheck="true">// 在vue.config.js配置文件中配置</span>devServer<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    proxy<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token string">"/test"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 目标地址</span>        target<span class="token punctuation">:</span> <span class="token string">"http://localhost:3000"</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 是否换源</span>        changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>原理</p><p>为什么node能够解决跨域：因为node不是运行在浏览器中的东西，没有跨域问题，跨域，就是同源策略只存在于浏览器环境中，使用了浏览器内核的环境，在app、小程序等平台中是没有这个问题的。</p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0b8fbec31b424b888e50426c1d492df7~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="image.png" style="zoom:40%;" align='left'/></li><li><p>前后端交互</p></li><li><p>mock</p></li></ul><p>8、router-view</p><p>9、优化</p><h2 id="三、开发过程"><a href="#三、开发过程" class="headerlink" title="三、开发过程"></a>三、开发过程</h2><p>登录页面</p><p>权限验证和安全性是非常重要的，不同的权限对应着不同的路由，同时侧边栏也需要根据不同的权限，异步生成。</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github新建仓库并push本地代码过程</title>
      <link href="/2023/08/10/github-xin-jian-cang-ku-bing-push-ben-di-dai-ma-guo-cheng/"/>
      <url>/2023/08/10/github-xin-jian-cang-ku-bing-push-ben-di-dai-ma-guo-cheng/</url>
      
        <content type="html"><![CDATA[<p>一、初始化</p><p>在项目的根目录下git bash</p><pre><code>git init</code></pre><p>二、github上新建仓库</p><p>直接new一个新的仓库 添加url以及描述 不添加readme</p><p>获取远程仓库的链接地址：</p><pre><code>https://github.com/YangZouy/library.git</code></pre><p>三、链接本地项目（仓库）与远程仓库</p><p>origin表示你为远程仓库起的名字，一般都叫origin 也可以是其它的，后面的链接就是远程仓库的真实地址</p><pre><code>git remote add origin https://github.com/YangZouy/library.git</code></pre><p>四、拉取github远程仓库主分支上的文件</p><p>现在一般主分支都是main</p><pre><code>git pull origin main</code></pre><p>五、代码提交并推送</p><pre><code>// .表示将文件夹下所有文件都上传上去git add .git add *(表示文件/文件夹名)// 提交到本地仓库git commit -m &quot;init&quot;// 推送到远程仓库origin 的main分支上// git push &lt;远程主机名&gt;&lt;本地分支名&gt;:&lt;远程分支名&gt;git push -u origin master:main// 查看当前状态git status</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库与ODM/ORM</title>
      <link href="/2023/08/08/shu-ju-ku-yu-odm-orm/"/>
      <url>/2023/08/08/shu-ju-ku-yu-odm-orm/</url>
      
        <content type="html"><![CDATA[<h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p>C++编写 </p><p>基于<strong>分布式文件</strong>存储的开源数据库系统</p><p>将数据存储为一个文档， 数据结构由键值对组成，MongoDB文档类似于JSON对象</p><p>数据库分类</p><ul><li><p>关系型 RDBMS</p><p>MySQL、SQL Server、Oracle 结构化 不适合创新</p></li><li><p>非关系型 No SQL</p><p>MongoDB 文档型数据库 为了快速开发Web应用而设计 类似于JSON数据结构——BSON Binary JSON、Redis 键值对数据库</p></li></ul><p>mongod –dbpath 可以修改数据保存位置 –port 修改端口号</p><p>mongod 启动服务器（保存数据）</p><p>mondo 启动客户端 （可以操作服务器，对数据进行CURD）</p><p>6.0版本之后需要使用mongosh</p><h3 id="compass工具"><a href="#compass工具" class="headerlink" title="compass工具"></a>compass工具</h3><p>通过图像化（或界面）的方式来操作Mongodb数据库的可视化工具</p><p>1、下载的官网地址</p><p><a href="https://www.mongodb.com/try/download/community">Download MongoDB Community Server | MongoDB</a></p><p> 2、注册</p><p>这里其实不用注册 直接下载社区免费版本即可 </p><p>本次下载的版本是：mongoDB 6.0.8 （小版本为偶数表示稳定版 奇数为开发版）</p><p>3、安装</p><p><a href="https://blog.csdn.net/weixin_43845090/article/details/108936665">MongoDB下载与安装_mouyetxesfvbnkiuyfvbjnnkpv下载_程序员的脱发之路的博客-CSDN博客</a></p><p>博文安装中遇到的问题</p><p>1、因为下载的版本是6.0版本开始 这个版本之后安装bin目录下是没有mongo.exe文件的</p><p>解决的方案</p><p><a href="https://blog.csdn.net/munangs/article/details/129613276">MongoDB 安装教程和MongoDB bin文件夹下没有mongo.exe解决方案及介绍mongod和mongos之间的确切区别是什么_mongos和mongod_代码匪徒的博客-CSDN博客</a></p><p>最好将shell的bin目录配置到系统路径下</p><p>2、安装mongodb时最好不要安装compass这个可视化工具，时间长并且可能安装不成功</p><p>安装compass工具链接：</p><p>[MongoDB6的安装与配置 - 掘金 (juejin.cn)](<a href="https://juejin.cn/post/7232977661205954621#">https://juejin.cn/post/7232977661205954621#</a> 四、MongoDB Compass) </p><p>mongodb GUI工具：navicat（收费）compass（不收费）</p><p>因此选择的GUI工具时navicat 15版本</p><p>使用navicat 链接mongodb数据库的方式</p><p><a href="https://blog.csdn.net/qq_46429858/article/details/124716444">如何用Navicat连接mongoDB_宾宾叔叔的博客-CSDN博客</a></p><p>在连接之前需要先新建mongodb数据库 下面是在命令行中创建的mongoDB数据库（使用mongosh &lt;已安装&gt;进入mongo shell才行）</p><p>在后面加上–port 可以修改默认端口 27017</p><p>使用Navicat Premium操作mongodb CRUD</p><p>[Navicat Premium操作Mongodb(基本的增删改查)_navicat操作mongodb_梨轻巧的博客-CSDN博客](<a href="https://blog.csdn.net/m0_45877477/article/details/125516511#:~:text=%E6%96%87%E4%BB%B6--%E6%96%B0%E5%BB%BA%E8%BF%9E%E6%8E%A5--Mongodb--%E8%B5%B7%E5%90%8D%E5%AD%97--%E6%B5%8B%E8%AF%95%E8%BF%9E%E6%8E%A5--%E7%A1%AE%E5%AE%9A">https://blog.csdn.net/m0_45877477/article/details/125516511#:~:text=文件--新建连接--Mongodb--起名字--测试连接--确定</a> 连接名字上–右键–打开连接 连接名字上–右键–新建数据库–起名字,数据库名字上–右键–打开数据库 2.2 创建集合)</p><p>一些数据库的原生操作命令</p><img src='https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/mongodb%E4%BD%BF%E7%94%A8.png'><h2 id="Mongoose"><a href="#Mongoose" class="headerlink" title="Mongoose"></a>Mongoose</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre><code>npm install mongoose</code></pre><h3 id="连接MongoDB"><a href="#连接MongoDB" class="headerlink" title="连接MongoDB"></a>连接MongoDB</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 导入 mongoose 模块</span><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"mongoose"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置默认 mongoose 连接</span><span class="token keyword">const</span> mongoDB <span class="token operator">=</span> <span class="token string">"mongodb://127.0.0.1/my_database"</span><span class="token punctuation">;</span>mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>mongoDB<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 让 mongoose 使用全局 Promise 库</span>mongoose<span class="token punctuation">.</span>Promise <span class="token operator">=</span> global<span class="token punctuation">.</span>Promise<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 取得默认连接</span><span class="token keyword">const</span> db <span class="token operator">=</span> mongoose<span class="token punctuation">.</span>connection<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将连接与错误事件绑定（以获得连接错误的提示）</span>db<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span> console<span class="token punctuation">.</span>error<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>console<span class="token punctuation">,</span> <span class="token string">"MongoDB 连接错误："</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="定义添加模型"><a href="#定义添加模型" class="headerlink" title="定义添加模型"></a>定义添加模型</h3><p>模型使用 <code>Schema</code> 接口进行定义。</p><p>官方文档对Schema定义</p><pre><code>Everything in Mongoose starts with a Schema. Each schema maps to a MongoDB collection and defines the shape of the documents within that collection.</code></pre><p><code>Schema</code> 可以定义每个文档中存储的字段，及字段的验证要求和默认值。目前默认理解为表（因为collection -&gt; table）</p><p><strong>定义模式</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 获取 Mongoose</span><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"mongoose"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 定义一个模式</span><span class="token keyword">var</span> Schema <span class="token operator">=</span> mongoose<span class="token punctuation">.</span>Schema<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 定义字段</span><span class="token keyword">var</span> SomeModelSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  a_string<span class="token punctuation">:</span> String<span class="token punctuation">,</span>  a_date<span class="token punctuation">:</span> Date<span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>创建模型</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 定义模式</span><span class="token keyword">const</span> Schema <span class="token operator">=</span> mongoose<span class="token punctuation">.</span>Schema<span class="token punctuation">;</span><span class="token keyword">const</span> SomeModelSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  a_string<span class="token punctuation">:</span> String<span class="token punctuation">,</span>  a_date<span class="token punctuation">:</span> Date<span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用模式“编译”模型</span><span class="token comment" spellcheck="true">// param1: 为模型创建集合的别名</span><span class="token comment" spellcheck="true">// param2: 创建模型时使用的模式</span><span class="token keyword">const</span> SomeModel <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">"SomeModel"</span><span class="token punctuation">,</span> SomeModelSchema<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>定义模型类后，可以使用它们来创建、更新或删除记录，以及通过查询来获取所有记录或特定子集。</p><h3 id="模式类型（字段）"><a href="#模式类型（字段）" class="headerlink" title="模式类型（字段）"></a>模式类型（字段）</h3><p>可以理解为定义模式时需要定义的字段类型</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> schema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  name<span class="token punctuation">:</span> String<span class="token punctuation">,</span>  binary<span class="token punctuation">:</span> Buffer<span class="token punctuation">,</span>  living<span class="token punctuation">:</span> Boolean<span class="token punctuation">,</span>  updated<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> type<span class="token punctuation">:</span> Date<span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token punctuation">:</span> Date<span class="token punctuation">.</span>now <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> type<span class="token punctuation">:</span> Number<span class="token punctuation">,</span> min<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> max<span class="token punctuation">:</span> <span class="token number">65</span><span class="token punctuation">,</span> required<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 任意模式类型</span>  mixed<span class="token punctuation">:</span> Schema<span class="token punctuation">.</span>Types<span class="token punctuation">.</span>Mixed<span class="token punctuation">,</span>  _someId<span class="token punctuation">:</span> Schema<span class="token punctuation">.</span>Types<span class="token punctuation">.</span>ObjectId<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 数组</span>  array<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  ofString<span class="token punctuation">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 其他类型也可使用数组</span>  nested<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> stuff<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> type<span class="token punctuation">:</span> String<span class="token punctuation">,</span> lowercase<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> trim<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> breakfastSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  eggs<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    type<span class="token punctuation">:</span> Number<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// Number有数值范围验证器 min 和max</span>    min<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">"鸡蛋太少"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    max<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  drink<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// String有enum和match</span>    <span class="token keyword">enum</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"咖啡"</span><span class="token punctuation">,</span> <span class="token string">"茶"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>完整的字段验证链接</p><p><a href="https://mongoosejs.com/docs/validation.html">Mongoose v7.4.2: Validation (mongoosejs.com)</a></p><p>。。。还有很多的操作，例如查询、删除等</p><h3 id="架设MongoDB数据库"><a href="#架设MongoDB数据库" class="headerlink" title="架设MongoDB数据库"></a>架设MongoDB数据库</h3><p>在本地创建了一个library数据库</p><p>查看已经安装了的依赖</p><pre><code>D:\library&gt;npm lslibrary@0.0.0 D:\library+-- cookie-parser@1.4.6+-- debug@2.6.9+-- express@4.16.4+-- http-errors@1.6.3+-- mongoose@7.4.2+-- morgan@1.9.1`-- pug@2.0.0-beta11</code></pre><p><strong>连接MongoDB</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 设置 Mongoose 连接</span><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"mongoose"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> mongoDB <span class="token operator">=</span> <span class="token string">"在此插入数据库_URL"</span><span class="token punctuation">;</span>mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>mongoDB<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> useNewUrlParser<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> useUnifiedTopology<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mongoose<span class="token punctuation">.</span>Promise <span class="token operator">=</span> global<span class="token punctuation">.</span>Promise<span class="token punctuation">;</span><span class="token keyword">const</span> db <span class="token operator">=</span> mongoose<span class="token punctuation">.</span>connection<span class="token punctuation">;</span>db<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span> console<span class="token punctuation">.</span>error<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>console<span class="token punctuation">,</span> <span class="token string">"MongoDB 连接错误："</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上述代码的详解已注释</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>express</title>
      <link href="/2023/08/07/express/"/>
      <url>/2023/08/07/express/</url>
      
        <content type="html"><![CDATA[<h1 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h1><p>一、服务端网页编程</p><p>1、什么是一个web服务器</p><p>前面已经记录，看笔记，如果不太好记得再来整理一下</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/Common_questions/Web_mechanics/What_is_a_web_server">什么是 web 服务器？ - 学习 Web 开发 | MDN (mozilla.org)</a></p><p>2、建立一个网站需要的软件</p><p>3、如何将文件上传到web服务器</p><p>SFTP：将pc端文件上传到服务器 eg：FileZilla</p><p>Rsync：Unix系统 命令行使用rsync 一种本地到远程的文件同步工具</p><p>GitHub：允许通过Github Pages发布网站</p><p>其它：</p><p>Web界面：作为远程文件上传服务前端的HTML界面，由自己的托管服务提供</p><p>WebDAV：不了解</p><p>4、服务端简介</p><p>。。。</p><p>使用js和Nodejs进行服务端网页的编程 如果使用python的话就是Django框架</p><h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><p>开源、跨平台的运行时环境 </p><p>可以直接运行于计算机或者服务器os上</p><p>省略了一些浏览器专用的API，添加了对OS API的支持（例如HTTP库或者文件系统库）</p><p>可以使用nodejs的<strong>HTTP</strong>包创建一个简单的web服务器 </p><h2 id="Express-1"><a href="#Express-1" class="headerlink" title="Express"></a>Express</h2><p>是Node框架，是其它流行框架的底层库</p><p>设置Node开发环境</p><p>安装了Node和npm之后才可以使用Express</p><p>测试是否安装成功</p><pre class=" language-terminal"><code class="language-terminal">C:\Users\邹阳>node -vv16.16.0C:\Users\邹阳>npm -v8.11.0</code></pre><h3 id="创建一个基础纯Node服务器"><a href="#创建一个基础纯Node服务器" class="headerlink" title="创建一个基础纯Node服务器"></a>创建一个基础纯Node服务器</h3><ol><li><p>创建一份hellonode.js代码</p></li><li><p>在代码所在位置的命令行输入 node hellonode.js </p></li><li><p>访问返回的URL 浏览器回显示出js中设置好的字符</p></li></ol><h3 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h3><ol><li><p>创建一个目录且进入myapp</p></li><li><p>使用init命令</p><p>该命令会为应用创建一个package.json文件，且该命令会请求一系列信息——包名、版本等 程序初始进入点的文件名index.js</p></li><li><p>查看package.json</p><pre class=" language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"myapp"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"这是一个学习npm的package"</span><span class="token punctuation">,</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>  &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li><li><p>在myapp中安装express</p><pre class=" language-terminal"><code class="language-terminal">npm install express</code></pre><p>package.json文件中会出现dependencies依赖包</p></li><li><p>调用require（）使用库</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"express"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"示例程序正在监听 8000 端口！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意：这里文件名要保存为index.js</p></li><li><p>启动服务器</p><pre class=" language-terminal"><code class="language-terminal">node index.js</code></pre></li></ol><h3 id="安装Express应用生成器"><a href="#安装Express应用生成器" class="headerlink" title="安装Express应用生成器"></a>安装Express应用生成器</h3><p>功能：生成express应用的框架</p><pre class=" language-terminal"><code class="language-terminal">npm install express-generator -g</code></pre><p>加上-g就是全局生成 对于所有应用都可以使用</p><p>进入应用目录，运行以下命令，即可创建一个名为 “helloworld” 的 Express 应用</p><pre><code>express helloworld</code></pre><p>ps：express会在当前目录的子目录创建新的应用，控制台可以看到构建的构成</p><pre><code>cd helloworldnpm install</code></pre><p>安装所有依赖</p><pre><code>SET DEBUG=helloworld:* &amp; npm start</code></pre><p>运行应用：DEBUG可以展示应用运行时返回的有用的日志信息</p><pre><code> http://127.0.0.1:3000/</code></pre><p>访问浏览器URL</p><h2 id="Express教程"><a href="#Express教程" class="headerlink" title="Express教程"></a>Express教程</h2><h3 id="本地图书馆网站"><a href="#本地图书馆网站" class="headerlink" title="本地图书馆网站"></a>本地图书馆网站</h3><h4 id="创建站点框架"><a href="#创建站点框架" class="headerlink" title="创建站点框架"></a>创建站点框架</h4><p>一、知识点</p><p>cmd powerShell bash三者之间的区别</p><p><a href="https://blog.csdn.net/qq_40196164/article/details/97129691">cmd、bash、powershell_cmd和bash_我脾气很好的博客-CSDN博客</a></p><p>linux的bash要比cmd强大很多</p><p>安装express生成器</p><pre><code>Linux版本：sudo npm install express-generator -gwindows版本：npm install express-generator -g</code></pre><p>运行express</p><pre><code>express</code></pre><p>默认使用：Jade视图引擎+CSS</p><pre><code>  -v, --view &lt;engine&gt;  添加 &lt;engine&gt; 视图引擎支持</code></pre><p>挑选视图引擎时需要考虑的内容很多，详情可以见MDN的链接</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/Server-side/Express_Nodejs/skeleton_website">Express 教程 2：创建站点框架 - 学习 Web 开发 | MDN (mozilla.org)</a></p><p>本项目使用Pug模板引擎</p><pre><code>    -c, --css &lt;engine&gt;   添加 &lt;engine&gt; 样式表引擎支持 (less|stylus|compass|sass) (默认为纯 css)</code></pre><p>上述命令可以选择CSS引擎（不是必须，不做要求）</p><p>数据库</p><p>express不提供数据库管理机制，可以使用Node支持的所有数据库</p><p>二、实现步骤</p><p>先在D盘安装生成器</p><pre><code>npm install express-generator -g</code></pre><p>然后在D盘中生成应用express-locallibrary-tutorial 确定视图引擎为Pug</p><pre><code>express express-locallibrary-tutorial -v pug</code></pre><p>在应用目录下安装依赖</p><pre><code>npm install</code></pre><p>运行应用</p><pre><code>Linux版本：DEBUG=express-locallibrary-tutorial:* npm startwindows版本：SET DEBUG=express-locallibrary-tutorial:* &amp; npm start</code></pre><p>ps：npm start也可以启动命令，但是不会看到调试信息</p><p>浏览器中查看</p><pre><code>http://localhost:3000/</code></pre><p>一个Express应用就配置成功，托管于localhost:3000</p><p>因为文件改动时要重启服务器才能看到网站的改动，手动启停服务器麻烦，所以需要自动化</p><p>nodemon是一个最简便的自动化工具之一（通常全局安装）</p><pre><code>npm install -g nodemon</code></pre><p>还可以选择作为开发依赖安装在本地，使用这个项目的开发人员只要安装应用就可以自动获取</p><pre><code>npm install --save-dev nodemon</code></pre><p>ps：</p><p>这里解释一下npm install -s -g -d之间的区别</p><p><strong>npm install -s</strong></p><p>npm install XXX -s相当于npm install -S相当于 npm install –save</p><p>局部安装 表示生产环境下的依赖 如果依赖在项目中起作用的话，就需要-s安装</p><p><strong>npm install -d</strong></p><p>局部安装 表示开发环境下的依赖 如果项目上线后库就没用了，使用-d安装（例如webpack部署打包、babel解析代码等）</p><p><strong>npm install -g</strong></p><p>全局安装，安装过一次之后，可以直接使用</p><p><strong>npm install</strong> </p><p>与npm install -s一样</p><p>全局安装完成之后的使用 nodemon来代替node即可</p><p>如果是局部安装那么需要按照MDN中的脚本操作</p><p>应用文档目录</p><pre><code>/express-locallibrary-tutorial    app.js：真实的应用入口 设置并返回express应用对象    /bin        www：js文件 调用应用入口的启动脚本（通过require app来启动） 还设置了一些应用的错误处理，加载 app.js 来完成其余工作    package.json：定义依赖项和其它信息    /node_modules        [约 4,500 个子文件夹和文件]    /public        /images        /javascripts        /stylesheets            style.css    /routes ：用不同模块保存应用路由        index.js        users.js    /views：保存模板        error.pug        index.pug        layout.pug</code></pre><p>突然发现之前没有pug 所以需要手动安装一下</p><pre><code>npm install pug</code></pre><p>ps：</p><p>require（）是一个全局的node函数，可以将模块导入到当前文件。</p><p>app.js文件：</p><p>1、使用 <code>require()</code> 导入了一些实用 node 库，其中包括之前用 NPM 下载的 <em><code>express</code><em>、</em><code>http-errors</code><em>、</em><code>morgan</code></em> 和 *<code>cookie-parser</code>*，还有一个 <em><code>path</code></em> 库，它是用于解析文件和目录的核心 node 库。</p><p>2、然后 <code>require()</code> 的是用户路由目录中的模块。</p><p>3、用导入的 <code>express</code> 模块来创建 <code>app</code> 对象，然后使用它来设置视图（模板）引擎。</p><p><strong>设置视图（模板）引擎</strong></p><p>a、view</p><pre><code>app.set(&quot;views&quot;, path.join(__dirname, &quot;views&quot;));</code></pre><p>指定模板的存储文件夹</p><p>b、view engine</p><pre><code>app.set(&quot;view engine&quot;, &quot;pug&quot;);</code></pre><p>指定模板库</p><p>4、<code>app.use()</code> 调用将中间件库添加进请求处理链。</p><p>5、所有中间件都已设置完毕后，现在把（之前导入的）路由处理器添加到请求处理链中。</p><p>6、最后一个中间件为错误和 HTTP 404 响应添加处理方法。</p><p>7、添加到exports模块，使其可以通过bin&#x2F;www导入</p><pre><code>module.exports = app;</code></pre><p>ps：windows删除文件夹</p><pre><code>rmdir /s FileName</code></pre><p>npm查看已安装的包（全局、本地）</p><pre><code>npm ls/npm -g ls</code></pre><ul><li><input disabled="" type="checkbox"> MDN上最后还有一个挑战自我，我增加了一个users文件夹然后将cool.js文件放置在了里面，在app.js中增加了该路由中间件但是好像路径这里设置有问题，目前还没有讲到，之后来填坑</li></ul><h4 id="使用数据库Mongoose"><a href="#使用数据库Mongoose" class="headerlink" title="使用数据库Mongoose"></a>使用数据库Mongoose</h4><p>与数据库交互的方式</p><ol><li><p>数据库的原生查询语句 SQL等</p></li><li><p>使用对象数据模型ODM或对象关系模型ORM（推荐）</p><p>它们能够将网站中的数据表示为js对象，然后将他们映射到底层数据库</p></li></ol><p>优缺点：原始查询语句的性能高，ODM或者ORM可以用js对象的思维而不用转向数据库语义的思维，可以更方便地对数据进行验证和检查。</p><p>ODM -&gt; Mongoose：为异步工作环境设计的MongoDB对象建模工具(MongoDB 数据库里，“集合”中的“文档” <a href="https://docs.mongodb.com/manual/core/databases-and-collections/#collections">类似于</a> 关系数据库里“表”中的“行”。</p><pre><code>MongoDB 文档：https://mongoosejs.com/docs/guide.html</code></pre><p>前面涉及到的连接数据库等在数据库那篇博文中</p><p><strong>定义library模式</strong></p><p>为每个模型创建单独的文件</p><pre><code>/express-locallibrary-tutorial  // 项目根目录  /models    author.js    book.js    bookinstance.js    genre.js</code></pre><p>作者模型</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"mongoose"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Schema <span class="token operator">=</span> mongoose<span class="token punctuation">.</span>Schema<span class="token punctuation">;</span><span class="token keyword">const</span> AuthorSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  first_name<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> type<span class="token punctuation">:</span> String<span class="token punctuation">,</span> required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> max<span class="token punctuation">:</span> <span class="token number">100</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  family_name<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> type<span class="token punctuation">:</span> String<span class="token punctuation">,</span> required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> max<span class="token punctuation">:</span> <span class="token number">100</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  date_of_birth<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> type<span class="token punctuation">:</span> Date <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  date_of_death<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> type<span class="token punctuation">:</span> Date <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 虚拟属性'name'：表示作者全名</span>AuthorSchema<span class="token punctuation">.</span><span class="token function">virtual</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>family_name <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>first_name<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 虚拟属性'lifespan'：作者寿命</span>AuthorSchema<span class="token punctuation">.</span><span class="token function">virtual</span><span class="token punctuation">(</span><span class="token string">"lifespan"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>date_of_death<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>date_of_birth<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 虚拟属性'url'：作者 URL</span>AuthorSchema<span class="token punctuation">.</span><span class="token function">virtual</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token string">"/catalog/author/"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_id<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 导出 Author 模型</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">"Author"</span><span class="token punctuation">,</span> AuthorSchema<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="路由和控制器"><a href="#路由和控制器" class="headerlink" title="路由和控制器"></a>路由和控制器</h4><p><img src="https://developer.mozilla.org/zh-CN/docs/Learn/Server-side/Express_Nodejs/routes/mvc_express.png" alt="Express HTTP 请求/响应 路径"></p><p>现在模型已经创建好了，现在要创建的主要是：</p><ul><li>路由</li><li>控制器：获取到数据，创建一个HTML页面显示出数据，并将页面返回给用户，以便在浏览器中查看</li><li>视图</li></ul><p><strong>路由入门</strong></p><p>将所有与图书有关的路由保存在catalog模块中，在添加处理账户或者其它功能的路由时，可以分开保存。</p><p>1、需要在routes文件夹中添加路由模块</p><p>2、在app.js中添加该路由模块require然后使用use</p><p>路由函数</p><pre class=" language-js"><code class="language-js">router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/about"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"关于此维基"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>Router.get()</code> 方法定义的“about”路由（下方重现的）仅响应 HTTP GET 请求。第一个参数是 URL 路径，第二个参数是一个回调，在收到带有路径的 HTTP GET 请求将调用之。</p><p>该回调有三个参数（通常命名为：<code>req</code>、<code>res</code>、<code>next</code>），分别是：HTTP 请求对象、HTTP 响应、中间件链中的下一个函数。</p><p>路径路由</p><p>路径可以是字符串或者字符串模式或者是正则表达式</p><p>路由参数</p><pre><code>URL /book/create 会匹配 /book/:bookId 这样的路由（将提取值为&#39;create&#39; 的 &#39;bookId&#39;）。</code></pre><p>library所需路由</p><p>首页和列表页面没有包含任何额外的信息，因此它们返回的结果只取决于模型类型和数据库内容，创建和查询操作没有较大的变化</p><ul><li><code>catalog/</code>：主页。</li><li><code>catalog/&lt;objects&gt;/</code>：模型（藏书、藏书副本、藏书种类、作者）的完整列表（例如 <code>/catalog/books/</code>、<code>/catalog/genres/</code> 等）</li><li><code>catalog/&lt;object&gt;/&lt;id&gt;</code><em>：具有</em> <code>_id</code> 字段值的特定模型的详细信息页面（例如 <code>/catalog/book/584493c1f4887f06c0e67d37</code>）。</li><li><code>catalog/&lt;object&gt;/create</code>：添加新模型的表单（例如 <code>/catalog/book/create</code>）。</li><li><code>catalog/&lt;object&gt;/&lt;id&gt;/update</code>：更新具有 <code>_id</code> 字段值的特定模型的表单（例如 <code>/catalog/book/584493c1f4887f06c0e67d37/update</code>）。</li><li><code>catalog/&lt;object&gt;/&lt;id&gt;/delete</code>：删除具有 <code>_id</code> 字段值的特定模型的表单（例如 <code>/catalog/book/584493c1f4887f06c0e67d37/delete</code>）。</li></ul><p>而其他URL用于处理特定文档&#x2F;模型实例的，会将目的标识嵌入URL（例如id），可以使用路径参数提取嵌入的信息，并传递给路由处理器</p><p>ps：有些命令只对bash有效，要在windows上使用bash，最简单的方法就是安装git 然后使用git bash here</p><p>总结一下上述的路由过程：1、需要有各自模块对应的模型（book.js）里面定义的是各种字段以及虚拟属性等</p><p>2、建立自己的route文件夹下的路由页面 将所有模块的路由都写入到了catalog.js文件下 但是各个路由对应的回调函数需要在controller层中写逻辑，因此新建了一个controller文件夹，在里面写各个模块的回调逻辑</p><p>3、最后在app.js中加入catalog.js路由中间件，将入口页面跳转到catalog&#x2F;books路由指定页面</p><h4 id="模板入门"><a href="#模板入门" class="headerlink" title="模板入门"></a>模板入门</h4><p>本项目中使用pug作为模板，它主要用于编写html，语法干净且空格敏感，受haml影响很大。</p><p>pug：视图引擎</p><p>项目中在view文件夹下，在进行项目修改之前，需要先搞懂pug的语法</p><p><strong>模板语法</strong></p><p>每一行中的第一个单词是 HTML 元素，并且缩进用于指示嵌套元素。非嵌套元素（例如，各个段落）位于不同的行上。</p><p>元素属性被定义在其关联元素之后的括号中。属性键值对之间可以使用，或者空格间隔开</p><pre><code>link(rel=&#39;stylesheet&#39;, href=&#39;/stylesheets/style.css&#39;)</code></pre><p>所有属性的值都被转义（例如“<code>&gt;</code>”等字符转换为 HTML 代码等效项，如“<code>&gt;</code>”），以防止注入 JavaScript 或跨站点脚本攻击。</p><p>如果标记后跟着等号，则以下文本将被视为 JavaScript 表达式。</p><pre class=" language-pug"><code class="language-pug">h1= titlep= 'Evaluated and <em>escaped expression</em>:' + title</code></pre><p>如果标记后面没有等号，则将内容视为纯文本。还可以在行的开头使用管道‘|’字符来表示纯文本，允许您使用<code>if</code>, <code>else</code> , <code>else if</code> 和 <code>unless</code>执行条件操作，使用<code>each-in</code> 或 <code>while</code>语法执行循环&#x2F;迭代操作。</p><pre><code>ul  each val in [1, 2, 3, 4, 5]    li= val</code></pre><p>语法还支持注释等，可以在链接中进行查看</p><p><a href="https://pugjs.org/api/getting-started.html">Getting Started – Pug (pugjs.org)</a></p><p>学完了语法部分，因为页面有很多的commen部分，所以pug支持在基本模板上进行扩展</p><p>一般view&#x2F;layout.pug就是基本模板</p><pre class=" language-pug"><code class="language-pug">//- 基本模板 pug允许在基础模板上进行扩展 可以只替换每个页面不同的部分doctype htmlhtml  head    title= title    link(rel='stylesheet', href='/stylesheets/style.css')  body    //- 块标记 block用于标记“可在派生模板中替换的内容部分”    block content</code></pre><p>如何使用基本模板</p><pre class=" language-pug"><code class="language-pug">extends layoutblock content  h1= title  p Welcome to #&#123;title&#125;</code></pre><p>使用extends进行继承</p><p>接下来设计本地图书馆的基础模板（使用了Bootstrap的js和CSS）</p><p>修改部分：layout.pug基础模板+public&#x2F;stylesheets&#x2F;style.css</p><p>Bootstrap栅格系统，系统最多分为12列</p><p><strong>主页设计</strong></p><p><strong>使用moment 来做日期格式化</strong></p><p>moment是一个轻量级js日期库，用于解析、验证、操作和格式化日期</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Code Complete 读书记录</title>
      <link href="/2023/07/18/code-complete-du-shu-ji-lu/"/>
      <url>/2023/07/18/code-complete-du-shu-ji-lu/</url>
      
        <content type="html"><![CDATA[<h3 id="第11章-变量名的力量"><a href="#第11章-变量名的力量" class="headerlink" title="第11章 变量名的力量"></a>第11章 变量名的力量</h3><p>对变量的描述就是最佳的变量名。一个好记的名字反映的通常都是问题，而不是解决方案。变量名的平均长度一般在10-16或者8-20个字符之间。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>transformers库以及pytorch的安装与使用</title>
      <link href="/2023/06/24/huggingface-transformers-ku-de-shi-yong/"/>
      <url>/2023/06/24/huggingface-transformers-ku-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="conda命令的使用"><a href="#conda命令的使用" class="headerlink" title="conda命令的使用"></a>conda命令的使用</h1><h2 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h2><p>conda –version</p><p>conda -V</p><h2 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h2><p>conda install package-name（&#x3D;&#x3D;version）</p><h2 id="卸载包"><a href="#卸载包" class="headerlink" title="卸载包"></a>卸载包</h2><p>conda remove package-name</p><p>conda uninstall 库名（该库以及依赖库一起删除）</p><p>conda uninstall 库名 –force （仅卸载该库）</p><h2 id="查看安装了哪些库-包"><a href="#查看安装了哪些库-包" class="headerlink" title="查看安装了哪些库(包)"></a>查看安装了哪些库(包)</h2><p>conda list</p><h2 id="查看有哪些虚拟环境"><a href="#查看有哪些虚拟环境" class="headerlink" title="查看有哪些虚拟环境"></a>查看有哪些虚拟环境</h2><p>conda env list</p><h2 id="激活环境"><a href="#激活环境" class="headerlink" title="激活环境"></a>激活环境</h2><p>conda activate env-name</p><p>conda deactivate</p><p>如果激活环境时出现了如下报错：</p><p>CommandNotFoundError: Your shell has not been properly configured to use ‘conda activate’. To initialize your shell, run…</p><p>原因：未正确退出环境</p><p>解决：</p><p>source activate<br>conda deactivate</p><h2 id="创建环境"><a href="#创建环境" class="headerlink" title="创建环境"></a>创建环境</h2><p>conda create -n your_env_name python&#x3D;x.x</p><h2 id="删除虚拟环境"><a href="#删除虚拟环境" class="headerlink" title="删除虚拟环境"></a>删除虚拟环境</h2><p>conda remove -n env_name –all</p><h1 id="transformers库的安装与使用"><a href="#transformers库的安装与使用" class="headerlink" title="transformers库的安装与使用"></a>transformers库的安装与使用</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>环境：</p><p>系统Ubuntu 18.04.6 LTS</p><p>Python 3.9.13 </p><p>pytorch：2.0.1+cu117（CUDA：11.7）</p><p>tensorflow：2.6.0</p><p>pytorch官网链接：<a href="https://pytorch.org/">PyTorch</a></p><p>填坑：一开始只在安装了pytorch的虚拟环境中安装transformers，遇到好多报错，解决了什么openssl的问题，但是还是不行，所以又在安装了tensorflow的虚拟环境中安装，可以了，但是发现好多代码都是基于pytorch上面使用transformers，然后发现有些帖子是既安装了pytorch又安装了tensorflow，然后安装transformers就可以了，所以实施，在原有的tensorflow上面先安装pytorch</p><pre><code>pip3 install torch torchvision torchaudio</code></pre><p>或者使用conda安装（安装时注意pytorch官网上cuda版本的确定）</p><pre><code>conda install pytorch torchvision torchaudio pytorch-cuda=11.8 -c pytorch -c nvidia</code></pre><p>然后通过conda安装transformers</p><pre><code>pip install transformers # 安装最新的版本pip install transformers == 4.0 # 安装指定版本# 如果你是conda的话conda install -c huggingface transformers  # 4.0以后的版本才会有（选用最后一种方式）</code></pre><p>最后测试通过（无报错即可）</p><pre><code>from transformers import pipeline</code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="文章连接"><a href="#文章连接" class="headerlink" title="文章连接"></a>文章连接</h3><p><a href="https://zhuanlan.zhihu.com/p/535100411">Huggingface 超详细介绍 - 知乎 (zhihu.com)</a></p><p>Hugging face 在github上开源了一个Transformers库，目前共享了超过100000个预训练模型，10000个数据集，变成了机器学习届的github。</p><p>网址 <a href="https://huggingface.co/models">Models - Hugging Face</a></p><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p>dataset数据集 以及数据集的下载地址</p><p>models各个预训练模型</p><p>course免费的nlp课程 英文</p><p>docs 文档</p><h3 id="Bert模型"><a href="#Bert模型" class="headerlink" title="Bert模型"></a>Bert模型</h3><h4 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> transformers <span class="token keyword">import</span> BertModel<span class="token punctuation">,</span> BertTokenizer<span class="token punctuation">,</span> BertConfig<span class="token comment" spellcheck="true"># 首先要import进来</span>tokenizer <span class="token operator">=</span> BertTokenizer<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span><span class="token string">'bert-base-chinese'</span><span class="token punctuation">)</span>config <span class="token operator">=</span> BertConfig<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span><span class="token string">'bert-base-chinese'</span><span class="token punctuation">)</span>config<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'output_hidden_states':True&amp;#125;) # 这里直接更改模型配置</span>model <span class="token operator">=</span> BertModel<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span><span class="token string">"bert-base-chinese"</span><span class="token punctuation">,</span>config<span class="token operator">=</span>config<span class="token punctuation">)</span></code></pre><p>huggingface官网在国外，自动下载比较费时，默认下载地址</p><p>1、windows模型保存在C:\Users[用户名].cache\torch\transformers\ 目录下，根据模型的不同下载的东西也不相同</p><p>2、Linux模型保存路径在 &#x2F;home&#x2F;zy&#x2F;.cache&#x2F;huggingface&#x2F;hub&#x2F;models–bert-base-chinese 目录下</p><p>如果自动下载总是中断的话，可以考虑国内的源，或者手动下载之后指定位置（huggingface官网，选择models菜单，然后搜索自己想要的模型，把里面的文件下载下来，其中体积较大的有tf的有torch的，根据自己需要下载）</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> transformersMODEL_PATH <span class="token operator">=</span> r<span class="token string">"D:\\test\\bert-base-chinese"</span><span class="token comment" spellcheck="true"># 导入模型</span>tokenizer <span class="token operator">=</span> transformers<span class="token punctuation">.</span>BertTokenizer<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>r<span class="token string">"D:\\test\\bert-base-chinese\\bert-base-chinese-vocab.txt"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 导入配置文件</span>model_config <span class="token operator">=</span> transformers<span class="token punctuation">.</span>BertConfig<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>MODEL_PATH<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 修改配置</span>model_config<span class="token punctuation">.</span>output_hidden_states <span class="token operator">=</span> <span class="token boolean">True</span>model_config<span class="token punctuation">.</span>output_attentions <span class="token operator">=</span> <span class="token boolean">True</span><span class="token comment" spellcheck="true"># 通过配置和路径导入模型</span>model <span class="token operator">=</span> transformers<span class="token punctuation">.</span>BertModel<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>MODEL_PATH<span class="token punctuation">,</span>config <span class="token operator">=</span> model_config<span class="token punctuation">)</span></code></pre><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><ul><li>tokenizer</li></ul><p>它实例化了BertTokenizer类，它是基于wordPiece方法的，参数有：</p><p>( vocab_file：存放词典的地址，do_lower_case &#x3D; True：是否都变成小写，默认为true，do_basic_tokenize &#x3D; True：做wordPiece之前是否要做basic tokenize，never_split &#x3D; None，unk_token &#x3D; ‘[UNK]’，sep_token &#x3D; ‘[SEP]’，pad_token &#x3D; ‘[PAD]’，cls_token &#x3D; ‘[CLS]’，mask_token &#x3D; ‘[MASK]’，tokenize_chinese_chars &#x3D; True，strip_accents &#x3D; None，**kwargs )</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 上文的示例代码已经实例话了，这里不重复了；</span><span class="token keyword">print</span><span class="token punctuation">(</span>tokenizer<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"生活的真谛是美和爱"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 对于单个句子编码</span><span class="token keyword">print</span><span class="token punctuation">(</span>tokenizer<span class="token punctuation">.</span>encode_plus<span class="token punctuation">(</span><span class="token string">"生活的真谛是美和爱"</span><span class="token punctuation">,</span><span class="token string">"说的太好了"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 对于一组句子编码</span><span class="token comment" spellcheck="true"># 输出结果如下：</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">4495</span><span class="token punctuation">,</span> <span class="token number">3833</span><span class="token punctuation">,</span> <span class="token number">4638</span><span class="token punctuation">,</span> <span class="token number">4696</span><span class="token punctuation">,</span> <span class="token number">6465</span><span class="token punctuation">,</span> <span class="token number">3221</span><span class="token punctuation">,</span> <span class="token number">5401</span><span class="token punctuation">,</span> <span class="token number">1469</span><span class="token punctuation">,</span> <span class="token number">4263</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'input_ids': [101, 4495, 3833, 4638, 4696, 6465, 3221, 5401, 1469, 4263, 102, 6432, 4638, 1922, 1962, 749, 102], 'token_type_ids': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,1, 1, 1, 1, 1], 'attention_mask': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]&amp;#125;</span><span class="token comment" spellcheck="true"># 也可以直接这样用</span>sentences <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'网络安全开发分为三个层级'</span><span class="token punctuation">,</span>             <span class="token string">'车辆系统层级网络安全开发'</span><span class="token punctuation">,</span>             <span class="token string">'车辆功能层级网络安全开发'</span><span class="token punctuation">,</span>             <span class="token string">'车辆零部件层级网络安全开发'</span><span class="token punctuation">,</span>             <span class="token string">'测试团队根据车辆网络安全目标制定测试技术要求及测试计划'</span><span class="token punctuation">,</span>             <span class="token string">'测试团队在网络安全团队的支持下，完成确认测试并编制测试报告'</span><span class="token punctuation">,</span>             <span class="token string">'在车辆确认结果的基础上，基于合理的理由，确认在设计和开发阶段识别出的所有风险均已被接受'</span><span class="token punctuation">,</span><span class="token punctuation">]</span>test1 <span class="token operator">=</span> tokenizer<span class="token punctuation">(</span>sentences<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>test1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 对列表encoder</span><span class="token comment" spellcheck="true"># 输出结果如下：</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'input_ids': [[101, 5381, 5317, 2128, 1059, 2458, 1355, 1146, 711, 676, 702, 2231, 5277, 102], [101, 6756, 6775, 5143, 5320, 2231, 5277, 5381, 5317, 2128, 1059, 2458, 1355, 102], [101, 6756, 6775, 1216, 5543, 2231, 5277, 5381, 5317, 2128, 1059, 2458, 1355, 102], [101, 6756, 6775, 7439, 6956, 816, 2231, 5277, 5381, 5317, 2128, 1059, 2458, 1355, 102], [101, 3844, 6407, 1730, 7339, 3418, 2945, 6756, 6775, 5381, 5317, 2128, 1059, 4680, 3403, 1169, 2137, 3844, 6407, 2825, 3318, 6206, 3724, 1350, 3844, 6407, 6369, 1153, 102], [101, 3844, 6407, 1730, 7339, 1762, 5381, 5317, 2128, 1059, 1730, 7339, 4638, 3118, 2898, 678, 8024, 2130, 2768, 4802, 6371, 3844, 6407, 2400, 5356, 1169, 3844, 6407, 2845, 1440, 102], [101, 1762, 6756, 6775, 4802, 6371, 5310, 3362, 4638, 1825, 4794, 677, 8024, 1825, 754, 1394, 4415, 4638, 4415, 4507, 8024, 4802, 6371, 1762, 6392, 6369, 1469, 2458, 1355, 7348, 3667, 6399, 1166, 1139, 4638, 2792, 3300, 7599, 7372, 1772, 2347, 6158, 2970, 1358, 102]], 'token_type_ids': [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], 'attention_mask': [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]&amp;#125;</span><span class="token comment" spellcheck="true"># 101是[CLS] 102是[SEP]</span><span class="token keyword">print</span><span class="token punctuation">(</span>tokenizer<span class="token punctuation">(</span><span class="token string">"网络安全开发分为三个层级"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 对单个句子encoder</span></code></pre><ul><li>model</li></ul><p>model实例化了BertModel类，除了初始的Bert、GPT等基本模型，针对不同的下游任务，定义了BertForQuestionAnswering，BertForMultiChoice，BertForNextSentencePrediction 以及 BertForSequenceClassification 等下游任务模型。模型导出时将生成 config.json 和 pytorch_model.bin 参数文件，一个是配置文件一个是torch训练后save的文件。</p><p>例如使用bert-base-uncased模型来做MLM任务</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> transformers <span class="token keyword">import</span> pipeline<span class="token comment" spellcheck="true"># 运行该段代码要保障你的电脑能够上网，会自动下载预训练模型，大概420M</span>unmasker <span class="token operator">=</span> pipeline<span class="token punctuation">(</span><span class="token string">"fill-mask"</span><span class="token punctuation">,</span>model <span class="token operator">=</span> <span class="token string">"bert-base-uncased"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 这里引入了一个任务叫fill-mask，该任务使用了base的bert模型</span>unmasker<span class="token punctuation">(</span><span class="token string">"The goal of life is [MASK]."</span><span class="token punctuation">,</span> top_k<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 输出mask的指，对应排名最前面的5个，也可以设置其他数字</span><span class="token comment" spellcheck="true"># 输出结果如下，似乎都不怎么有效哈。</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'score': 0.10933303833007812,</span>  <span class="token string">'token'</span><span class="token punctuation">:</span> <span class="token number">2166</span><span class="token punctuation">,</span>  <span class="token string">'token_str'</span><span class="token punctuation">:</span> <span class="token string">'life'</span><span class="token punctuation">,</span>  <span class="token string">'sequence'</span><span class="token punctuation">:</span> <span class="token string">'the goal of life is life.'</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'score': 0.03941883146762848,</span>  <span class="token string">'token'</span><span class="token punctuation">:</span> <span class="token number">7691</span><span class="token punctuation">,</span>  <span class="token string">'token_str'</span><span class="token punctuation">:</span> <span class="token string">'survival'</span><span class="token punctuation">,</span>  <span class="token string">'sequence'</span><span class="token punctuation">:</span> <span class="token string">'the goal of life is survival.'</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'score': 0.032930608838796616,</span>  <span class="token string">'token'</span><span class="token punctuation">:</span> <span class="token number">2293</span><span class="token punctuation">,</span>  <span class="token string">'token_str'</span><span class="token punctuation">:</span> <span class="token string">'love'</span><span class="token punctuation">,</span>  <span class="token string">'sequence'</span><span class="token punctuation">:</span> <span class="token string">'the goal of life is love.'</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'score': 0.030096106231212616,</span>  <span class="token string">'token'</span><span class="token punctuation">:</span> <span class="token number">4071</span><span class="token punctuation">,</span>  <span class="token string">'token_str'</span><span class="token punctuation">:</span> <span class="token string">'freedom'</span><span class="token punctuation">,</span>  <span class="token string">'sequence'</span><span class="token punctuation">:</span> <span class="token string">'the goal of life is freedom.'</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'score': 0.024967126548290253,</span>  <span class="token string">'token'</span><span class="token punctuation">:</span> <span class="token number">17839</span><span class="token punctuation">,</span>  <span class="token string">'token_str'</span><span class="token punctuation">:</span> <span class="token string">'simplicity'</span><span class="token punctuation">,</span>  <span class="token string">'sequence'</span><span class="token punctuation">:</span> <span class="token string">'the goal of life is simplicity.'</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;]</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux命令</title>
      <link href="/2023/06/18/linux-ming-ling/"/>
      <url>/2023/06/18/linux-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux命令"><a href="#Linux命令" class="headerlink" title="Linux命令"></a>Linux命令</h1><p>切换用户</p><p>su username </p><p>password</p><h2 id="安装pyTorch环境"><a href="#安装pyTorch环境" class="headerlink" title="安装pyTorch环境"></a>安装pyTorch环境</h2><h3 id="查看服务器CUDA最高版本"><a href="#查看服务器CUDA最高版本" class="headerlink" title="查看服务器CUDA最高版本"></a>查看服务器CUDA最高版本</h3><p>nvidia-smi</p><p>可以查看到我的服务器CUDA Version: 11.7</p><h3 id="创建conda虚拟环境"><a href="#创建conda虚拟环境" class="headerlink" title="创建conda虚拟环境"></a>创建conda虚拟环境</h3><p>conda create -n pytorch python&#x3D;3.9</p><h3 id="进入pytorch环境"><a href="#进入pytorch环境" class="headerlink" title="进入pytorch环境"></a>进入pytorch环境</h3><p>conda activate pytorch</p><h3 id="安装pytorch"><a href="#安装pytorch" class="headerlink" title="安装pytorch"></a>安装pytorch</h3><p>进入官网</p><p>根据个人pc或者服务器的配置选择pytorch版本</p><p>开始选择了conda安装，但是一直卡在solving environment那里，后来查到可以在anaconda下使用pip3安装，就选择了pip安装，安装的速度反而很快。</p><pre class=" language-linux"><code class="language-linux">pip3 install torch torchvision torchaudio</code></pre><p>安装完成</p><h3 id="测试安装成功"><a href="#测试安装成功" class="headerlink" title="测试安装成功"></a>测试安装成功</h3><pre><code>(pytorch) zy@node01:/home$ pythonPython 3.9.16 (main, May 15 2023, 23:46:34) [GCC 11.2.0] :: Anaconda, Inc. on linuxType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; import torch&gt;&gt;&gt; torch.__version__&#39;2.0.1+cu117&#39;&gt;&gt;&gt; torch.cuda.is_available()True&gt;&gt;&gt; exit()</code></pre><p>测试成功</p><h3 id="VSCode-remote-运行"><a href="#VSCode-remote-运行" class="headerlink" title="VSCode remote 运行"></a>VSCode remote 运行</h3><p>1、在服务器中选择需要运行的代码</p><p>2、在vscode右侧下方可以选择对应的python解释器</p><p>3、运行（右键 &#x3D;&gt; run python）可以在终端看到运行之后的结果</p>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Dual Supervision Framework for Relation Extraction</title>
      <link href="/2023/06/15/dual-supervision-framework-for-relation-extraction/"/>
      <url>/2023/06/15/dual-supervision-framework-for-relation-extraction/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="/pdf/Dual.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>js补充</title>
      <link href="/2023/06/12/js-bu-chong/"/>
      <url>/2023/06/12/js-bu-chong/</url>
      
        <content type="html"><![CDATA[<h1 id="前端知识补充"><a href="#前端知识补充" class="headerlink" title="前端知识补充"></a>前端知识补充</h1><p>听的内容是B站里面的课程——javascript李立超，之前直接看的javascript高级（第四版）虽然看的还是比较仔细了，但是有些内容可能直接看书有没有理解的地方，现在听下课会理解的更加深刻。</p><h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 数组去重</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 思路一：新建数组，将原数组的值传递到新数组 如果新数组中已经有了则不传了</span><span class="token keyword">const</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>newArr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 思路二：如果不使用多余的空间 取出每一个数，跟后面的进行比较 这样其实时间复杂度为O（N2）</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*                当arr[i]和arr[j]相同时，它会自动的删除j位置的元素，然后与j+1位置的元素进行比较，但是删除之后j+1的位置就移动到了j位置，而j位置不会再进行比较，就会出现漏比较的情况                          解决办法：当删除一个元素后，需要将该位置的元素提前一个            */</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 思路三：对每一个元素进行检索 看数组后面是否还有该数 如果有的话就进行删除</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> index <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这里i--与上面的j--是一样的道理</span>        i<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><p>定时器的本质就是在指定时间后将函数添加到消息队列中</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 添加一个计时器</span>console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'定时器执行了!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 使程序卡6s</span><span class="token keyword">const</span> begin <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> begin <span class="token operator">&lt;</span> <span class="token number">6000</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 这里计时器会显示6s 因为虽然定时器将代码3s后添加到了消息队列中，但是此时执行栈中依旧在执行6s的那个程序，需要将6s运行完成之后，从消息队列中取出定时器的代码执行。</span></code></pre><p>setInterval()每间隔一段时间就将函数添加到消息队列中，但是如果函数执行的速度比较慢，它是无法确保每次执行的间隔都是一样的</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">'interval:'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">'interval:'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'executor!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">'interval:'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 这里会随着alert点击的速度导致每次代码中的间隔执行时间不同 </span><span class="token comment" spellcheck="true">// 如果点击快  则不受影响 如果点击慢（长于3s）则定时器已经将代码提交到消息队列了，所以一点点击之后，直接就执行</span></code></pre><p>如果想要可以确保每次执行都有相同的间隔，可以使用setTimeout</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">'interval:'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">'interval:'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'executor!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">'interval:'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 在setTimeout的回调函数最后，再调用一个setTimeout</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 这样每次都是3s后执行，不管点击的速度是多少，因为点击的时间并没有在定时器中，而是点击之后才开启的定时器</span></code></pre><h2 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h2><h3 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 写法</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">'sunwukon'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> gender<span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> gender<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 声明变量的同时解构对象</span><span class="token keyword">let</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> gender<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> gender<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 声明时未赋值 需要在前面添加一个() 因为&amp;#123;&amp;#125;开头解析器会将其解析为代码块，因此会报错</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// a b c是别名，可以默认给值赋值为花果山</span><span class="token keyword">let</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span> a<span class="token punctuation">,</span> age<span class="token punctuation">:</span>b<span class="token punctuation">,</span> gender<span class="token punctuation">:</span>c<span class="token punctuation">,</span> address<span class="token punctuation">:</span>d <span class="token operator">=</span> <span class="token string">'huaguoshan'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> obj</code></pre><h3 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'sunwukong'</span><span class="token punctuation">,</span> <span class="token string">'zhubajie'</span><span class="token punctuation">,</span><span class="token string">'shaheshang'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">[</span>d<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">,</span>g<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 这里会给g赋值为undefined</span><span class="token comment" spellcheck="true">// 声明之后还可以赋值  可以给f和g添加默认值</span><span class="token punctuation">[</span>d<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f <span class="token operator">=</span> <span class="token number">77</span><span class="token punctuation">,</span>g <span class="token operator">=</span> <span class="token string">'yutujing'</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 可以使用...来设置获取多余的元素</span><span class="token comment" spellcheck="true">// 这里n3就是一个数组 [6,7]</span><span class="token keyword">let</span> <span class="token punctuation">[</span>n1<span class="token punctuation">,</span>n2<span class="token punctuation">,</span><span class="token operator">...</span>n3<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>可以通过解构赋值来快速交换两个变量的值</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> a1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">let</span> a2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 前面的[]中的数指的是数组解构的形式 后面[]中的数是变量，整个[]就是一个数组，所以就是通过后面的数组给前面的数组变量赋值</span><span class="token punctuation">[</span>a1<span class="token punctuation">,</span>a2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>a2<span class="token punctuation">,</span>a1<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>闭包主要用来隐藏一些不希望被外部访问的内容，这就意味着闭包需要占用一定的内存空间</p><p>相较于类来说，闭包比较浪费内存空间（类可以使用原型而闭包不能），每创建一个闭包，闭包中的不希望被外部访问的那些元素就会被创建一次</p><p>解决：需要执行次数较少时，使用闭包，需要大量创建实例时，使用类</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>闭包就是能够访问到外部函数作用域中变量的函数</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>当我们需要隐藏一些不希望被被人访问的内容时就可以使用闭包</p><h3 id="构成条件"><a href="#构成条件" class="headerlink" title="构成条件"></a>构成条件</h3><ol><li>函数的嵌套</li><li>内部函数要引用外部函数中的变量</li><li>内部函数要作为返回值返回</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">"fn3's a"</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">fn4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">fn4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">fn3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 这里打印的是fn3中的a</span></code></pre><p>这里涉及到一个非常重要的知识点：函数的作用域，在函数创建时就已经确定了（词法作用域），和它调用的位置无关。</p><p>上述例子中的fn4的作用域在fn3中创建的，因此它打印a时会从自己的作用域中查找，没有，就到上级作用域中找，它的上级作用域就是fn3，因此它会打印出fn3的a。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">"fn3's a"</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">fn4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">fn4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> fn4 <span class="token operator">=</span> <span class="token function">fn3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">fn4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这里打印的还是fn3中的a 原因依旧如此 fn4只要是在fn3中创建的且他自己本身没有a 那么它的a就会在fn3中找，跟它调用的位置没有关系</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 再来一个简单的例子</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">'window a'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> fn2 <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">'fn2 a'</span><span class="token punctuation">;</span>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这里打印出来的a是window a 因为fn是在全局中创建的</span></code></pre><h3 id="闭包的生命周期"><a href="#闭包的生命周期" class="headerlink" title="闭包的生命周期"></a>闭包的生命周期</h3><ol><li>闭包在外部函数<font color=Aqua><strong>调用时</strong></font>产生，外部函数每次调用都会产生一个全新的闭包</li><li>在内部函数丢失时销毁（内部函数被垃圾回收了，闭包才会消失）</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">outer2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        num<span class="token operator">++</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> fn1 <span class="token operator">=</span> <span class="token function">outer2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 独立闭包</span><span class="token keyword">let</span> fn2 <span class="token operator">=</span> <span class="token function">outer2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 独立闭包</span><span class="token comment" spellcheck="true">// 每个闭包里面的num都是独立的，不会随着一个闭包的调用而相互影响</span><span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 销毁闭包 将其外部函数指向null  垃圾回收机制就会自动回收闭包中的内容</span>fn1 <span class="token operator">=</span> <span class="token keyword">null</span>fn2 <span class="token operator">=</span> <span class="token keyword">null</span></code></pre><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><p>如果一个函数的参数或者返回值是函数，则这个函数就称为高阶函数</p><p>为什么要将函数作为参数传递？（回调函数有什么作用？）</p><ul><li>将函数作为参数，意味着可以对另一个函数动态的传递代码</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 这里的filter就是一个高阶函数</span><span class="token keyword">function</span> <span class="token function">filter</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>cb<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">cb</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> newArr<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 通常后面的函数都是以匿名函数或者箭头函数定义的</span>result <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>a<span class="token operator">=</span><span class="token operator">></span>a <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="浅拷贝与深拷贝"><a href="#浅拷贝与深拷贝" class="headerlink" title="浅拷贝与深拷贝"></a>浅拷贝与深拷贝</h2><p>说明一下数组中有引用数据类型的内存占用情况</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span><span class="token string">'孙悟空'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span><span class="token string">'猪八戒'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><img src='https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/Snipaste_2023-06-13_10-22-22.jpg' width='600px' align='left'><p>浅拷贝（shallow copy）</p><ul><li>通常对对象的拷贝都是浅拷贝</li><li>浅拷贝只对对象的浅层进行复制（只复制一层）</li><li>如果对象中存储的数据是原始值，那么拷贝的深浅是不重要</li><li>浅拷贝只会对对象本身进行复制，不会复制对象中的属性（或者元素）</li></ul><p>深拷贝（deep copy）</p><ul><li>深拷贝指不仅复制对象本身，还复制对象中的属性和元素</li><li>因为性能问题，通常情况都不太使用深拷贝</li></ul><h3 id="数组浅拷贝"><a href="#数组浅拷贝" class="headerlink" title="数组浅拷贝"></a>数组浅拷贝</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 如果splice里面没有参数就说明全部拷贝</span><span class="token keyword">const</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><img src='https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/Snipaste_2023-06-13_10-27-06.jpg' width='600px' align='left'><p>对arr和arr2进行一些操作，说明他们是浅拷贝</p><pre class=" language-js"><code class="language-js">arr <span class="token operator">===</span> arr2   <span class="token comment" spellcheck="true">// false</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// true</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'唐僧'</span>arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token comment" spellcheck="true">// '唐僧' 因为arr[0]和arr2[0]都指向相同的位置</span></code></pre><h3 id="对象浅复制"><a href="#对象浅复制" class="headerlink" title="对象浅复制"></a>对象浅复制</h3><p>Object.assign(目标对象，被复制的对象)：将被复制对象中的属性赋值到目标对象里，并将目标对象返回</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span> <span class="token string">'孙悟空'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span><span class="token number">18</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>address<span class="token punctuation">:</span> <span class="token string">'花果山'</span>， age<span class="token punctuation">:</span> <span class="token number">28</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>obj2<span class="token punctuation">,</span>obj<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// name: '孙悟空', age: 28, address: '花果山'</span></code></pre><p>…(展开运算符) 实现浅拷贝</p><ul><li>可以将一个数组中的元素展开到另一个数组中或者作为函数的参数传递</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 也可以使用展开运算符对对象进行复制 将obj中的属性在新对象中展开</span><span class="token keyword">const</span> obj3 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>address<span class="token punctuation">:</span> <span class="token string">'花果山'</span><span class="token punctuation">,</span> <span class="token operator">...</span>obj<span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">48</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="数组深拷贝"><a href="#数组深拷贝" class="headerlink" title="数组深拷贝"></a>数组深拷贝</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span><span class="token string">'孙悟空'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span><span class="token string">'猪八戒'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> arr3 <span class="token operator">=</span> <span class="token function">structuredClone</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 专门用来深拷贝的方法</span></code></pre><img src='https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/Snipaste_2023-06-13_10-39-11.jpg' width='700px' align='left'><h3 id="对象深拷贝"><a href="#对象深拷贝" class="headerlink" title="对象深拷贝"></a>对象深拷贝</h3><p>同样还是使用structuredClone方法</p><h2 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h2><p>根据函数调用方式不同，this的值也不同：</p><ul><li>以函数形式调用，this是window</li><li>以方法形式调用，this是调用方法的对象</li><li>构造函数中，this是新建的对象</li><li>箭头函数没有自己的this，由外层作用域决定</li><li>通过call和apply调用的函数，它们的第一个参数就是函数的this</li><li>通过bind返回的函数，this由bind第一个参数决定（无法修改）</li></ul><p>bind（）是函数的方法，可以用来创建一个新的函数</p><ul><li>bind可以为新函数绑定this</li><li>bind可以为新函数绑定参数</li></ul><p>箭头函数没有自身的this，它的this由外层作用域决定，也无法通过call apply和bind修改它的this，箭头函数的this和它的调用方式无关，箭头函数中也没有arguments</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'ba'</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span> <span class="token string">'sun'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"name:"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ba 因为name是静态的，写死的，它会找函数创建的上级作用中的name 就是全局作用域中的name</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span> <span class="token string">'sun'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"name:"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>obj2<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// sun 因为name是this上面的，是动态的，会随着this的指向变化 this现在指向的就是obj2</span></code></pre><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>([参数]) &#x3D;&gt; 返回值</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>无箭头函数：() &#x3D;&gt; 返回值</p><p>一个参数的：a &#x3D;&gt; 返回值</p><p>多个参数的：(a,b) &#x3D;&gt; 返回值</p><p>只有一个语句的函数：() &#x3D;&gt; 返回值</p><p>只返回一个对象的函数：() &#x3D;&gt; ({…})  对象需要用（）包裹</p><p>有多行语句的函数：() &#x3D;&gt; { … return 返回值}</p><h2 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h2><p>IIFE</p><p>立即是一个匿名的函数，它只会调用一次</p><p>可以利用IIFE来创建一个一次性的函数作用域，避免变量冲突的问题</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 因为都有a 避免冲突 放到函数作用域中</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="题目练习"><a href="#题目练习" class="headerlink" title="题目练习"></a>题目练习</h2><p>涉及到变量提升 函数提升 this指向</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// undefined 因为变量提升 但此时a还并没有赋值</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2 此时a已经赋值</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1 打印的全局的a</span></code></pre><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 打印出function a()&amp;#123;...&amp;#125; 因为第一个变量a和函数都会提升，但是函数还会进行赋值 也可以理解为函数提升的优先级更高</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1 给a重新赋值了</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1 因为函数已经提升且赋值 相当于上述代码早已经执行了</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 3 a重新赋值</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// function()&amp;#123;...&amp;#125; 给a重新赋值 </span><span class="token keyword">var</span> aconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// function()&amp;#123;...&amp;#125; 因为a早已经通过第一个a声明提升了，后面的都不能进行声明</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 函数每次调用 都会重新创建默认值 就是说如果使用的是默认值，则每次调用都是不同的变量（内存位置不同），就算在函数内部修改了对其他的该函数调用并无影响</span><span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span> <span class="token string">"沙和尚"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a = "</span> <span class="token operator">+</span> a<span class="token punctuation">)</span>    a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"唐僧"</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a = "</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 沙和尚 唐僧</span><span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 沙和尚 唐僧</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span> <span class="token string">"沙和尚"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 如果是外部传值，则每次调用都是同一个对象，修改之后对之后重新调用函数有影响</span><span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span>a <span class="token operator">=</span> obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a = "</span> <span class="token operator">+</span> a<span class="token punctuation">)</span>    a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"唐僧"</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a = "</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 沙和尚 唐僧</span><span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 唐僧 唐僧</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这里的a是全局的a</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true">// 这里fn接收一个形参，这个形参就是局部作用域中的变量，而不是全局的。</span><span class="token comment" spellcheck="true">// 形参相当于声明了该变量，如果调用函数时没有赋值，则说明应该是undefined 否则就是传入的值</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1</span>    a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1</span></code></pre><h2 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h2><p>接下来这个题目考察到了作用域的问题以及同步异步执行以及立即执行函数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1 2 3 4 </span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 5 5 5 5</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 这里的i是通过var声明的，相当于是全局作用域中的i </span><span class="token comment" spellcheck="true">// 上述代码可以改写成</span>    <span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> i<span class="token operator">*</span><span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> i<span class="token operator">*</span><span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> i<span class="token operator">*</span><span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> i<span class="token operator">*</span><span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//i&lt;=5 结束循环</span>        <span class="token comment" spellcheck="true">//输出 5 5 5 5</span>    <span class="token comment" spellcheck="true">// 会先执行同步代码 那么后面的赋值会覆盖掉前面的赋值 最后i = 5</span><span class="token comment" spellcheck="true">// 然后再执行异步代码setTimeout 但是此时打印出来的i都是5了</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 使用let 它有块级作用域，所以每次循环的i都只在当前循环有效 后面i不会覆盖掉前面的i</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1 2 3 4</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 这里虽然还是var 但是放到立即函数里面 把i传递到了函数中，就是函数中的局部变量了，不再是全局变量，因此里面的异步打印出来的就是局部中的i的值</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1 2 3 4</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>其实js是单线程的，每个线程有它自己的唯一的事件循环，但是事件循环的任务源可以不唯一。类似setTimeout, promise, ajax, DOM操作等都是典型的任务源，任务队列中的任务便是来自这些任务源。而这些任务源产生的任务又可以分为macro-task（宏任务）和micro-task（微任务）两种。</p><h3 id="macro-task（宏任务）"><a href="#macro-task（宏任务）" class="headerlink" title="macro-task（宏任务）"></a>macro-task（宏任务）</h3><p>macro-task（宏任务）中的任务都是有时间顺序的，因此浏览器能够有序地从中调度任务并执行。在任务与任务之间，浏览器可能会渲染更新。<br>macro-task（宏任务）中一个典型就是setTimeout，setTimeout函数等待给定的延迟事件然后将其回调函数推入宏任务Event Queue中。这就是为什么先输出’script end’ 后输出’setTimeout’的原因。<br><strong>macro-task（宏任务）主要有：script(整体代码), setTimeout, setInterval, setImmediate, I&#x2F;O, UI rendering。</strong></p><h3 id="micro-task（微任务）"><a href="#micro-task（微任务）" class="headerlink" title="micro-task（微任务）"></a>micro-task（微任务）</h3><p>micro-task（微任务）中的任务在当前函数调用栈中的函数执行完成之后即调度，像promise、mutation都会被推入微任务Event Queue队列中。并且微任务Event Queue队列中的一个任务执行完成后，后续的micro-task（微任务）也会继续执行，直到微任务Event Queue队列为空，这就解释了为什么promise2也会在setTimeout之前输出的原因。<br><strong>微任务Event Queue队列主要有process.nextTick, Promise, Object.observe(已废弃), MutationObserver(html5新特性)</strong></p><p>当宏任务Event Queue队列中的一个任务执行结束时，如果函数调用栈为空，便会开始执行微任务Event Queue队列中的任务，直至微任务Event Queue队列中所有任务执行完毕，然后event loop才会继续执行宏任务Event Queue队列中的下一个任务。</p><p>宏任务它是通过宿主环境进行解析的（nodejs或者浏览器）微任务是js自己</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise理论及手写</title>
      <link href="/2023/06/10/promise-li-lun-ji-shou-xie/"/>
      <url>/2023/06/10/promise-li-lun-ji-shou-xie/</url>
      
        <content type="html"><![CDATA[<h1 id="Promise理论及手写"><a href="#Promise理论及手写" class="headerlink" title="Promise理论及手写"></a>Promise理论及手写</h1><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><h3 id="错误的类型"><a href="#错误的类型" class="headerlink" title="错误的类型"></a>错误的类型</h3><p>Error：所有错误的父类型</p><p>ReferenceError：引用的变量不存在</p><p>TypeError：数据类型不正确</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> bconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>xxx<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// TypeError:Cannot read property 'xxx' of undefined</span><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">xxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// TypeError:c.xxx is not a function</span></code></pre><p>RangeError：数据值不在其所允许的范围内</p><p>SyntaxError：语法错误</p><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>抛出错误：throw error</p><p>捕获错误：try … catch</p><p>错误对象：</p><p>massage属性：错误相关信息</p><p>stack属性：函数调用栈记录信息</p><pre class=" language-js"><code class="language-js"><span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> d  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>xxx<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>stack<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'出错之后'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Cannot read property 'xxx' of undefined</span><span class="token comment" spellcheck="true">// TypeError:Cannot read property 'xxx' of undefined</span><span class="token comment" spellcheck="true">// 出错之后</span></code></pre><p>这里因为错误被捕获处理了，后面的代码才能够运行下去，打印出   出错之后</p><h2 id="promise的理解和使用"><a href="#promise的理解和使用" class="headerlink" title="promise的理解和使用"></a>promise的理解和使用</h2><p>promise是ES6规范中的一门新的技术，是js中进行异步编程的新的解决方案</p><p>promise支持链式调用，可以解决回调地狱，并且它指定回调的方式更加地灵活。</p><p>异步编程包括：</p><p>1、fs文件操作 </p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 采用了node中的fs模块 所以不能在浏览器中运行，只能写js脚本放到node中运行</span><span class="token comment" spellcheck="true">// 使用promise进行读取</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"./content.tx"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>reason <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'now in promise'</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>2、数据库操作 </p><p>3、Ajax </p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 使用了ajax，node中没有 所以可以在浏览器中运行 直接写在html文件中</span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 开始请求过程</span>        <span class="token comment" spellcheck="true">// 1、创建对象</span>        <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2、初始化</span>        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'https://zyydgrbk.top'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3、发送</span>        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4、接收</span>        xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              <span class="token function">resolve</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              <span class="token function">reject</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> reason <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'now in promise'</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>4、定时器</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 写了一个中奖的定时器 写在promise中</span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 改写成promise <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> IsZhong<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">IsZhong</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> n <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">reject</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'恭喜你，中奖了！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> reason <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'很遗憾，未中奖！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>其它的知识点可以通过以下来进行补充，自己就不打出来了</p><p><a href="https://blog.csdn.net/weixin_44972008/article/details/113779708">(96条消息) 【Promise】入门-同步回调-异步回调-JS中的异常error处理-Promis的理解和使用-基本使用-链式调用-七个关键问题_YK菌的博客-CSDN博客</a></p><h2 id="promise手写"><a href="#promise手写" class="headerlink" title="promise手写"></a>promise手写</h2><h3 id="整体框架"><a href="#整体框架" class="headerlink" title="整体框架"></a>整体框架</h3><p>定义整体框架，以及能够实现基本的resolve和reject方法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Promise</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 这里下面也需要写成self的形式，因为不然之后this的指向会出问题，反正this这里需要再好好看一下</span>  self<span class="token punctuation">.</span>promiseState <span class="token operator">=</span> <span class="token string">'pending'</span><span class="token punctuation">;</span>  self<span class="token punctuation">.</span>promiseResult<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 在resolve和reject中主要做的就是转换promise状态 以及获取到值</span>  <span class="token keyword">function</span> <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 因为resolve是直接调用，不是通过对象调用的，所以注意this指向</span>    self<span class="token punctuation">.</span>promiseState <span class="token operator">=</span> <span class="token string">'fulfilled'</span><span class="token punctuation">;</span>    self<span class="token punctuation">.</span>promiseResult <span class="token operator">=</span> value<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">reject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    self<span class="token punctuation">.</span>promiseState <span class="token operator">=</span> <span class="token string">'rejected'</span><span class="token punctuation">;</span>    self<span class="token punctuation">.</span>promiseResult <span class="token operator">=</span> value<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>then <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>onResolved<span class="token punctuation">,</span>onRejected<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 这里需要根据promise对象的状态决定执行哪个方法</span>  <span class="token comment" spellcheck="true">// 如果是成功的 执行onResolved</span>  <span class="token comment" spellcheck="true">// 说明一下为什么这里可以使用this来进行获取</span>  <span class="token comment" spellcheck="true">// 因为这里的then是通过对象调用的 this指向就是promise实例 它本身有promiseState这个属性</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>promiseState <span class="token operator">===</span> <span class="token string">'fulfilled'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">onResolved</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>promiseResult<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 否则执行onRejected</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>promiseState <span class="token operator">===</span> <span class="token string">'rejected'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>promiseResult<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="抛出错误"><a href="#抛出错误" class="headerlink" title="抛出错误"></a>抛出错误</h3><p>接下来是捕获到错误 改变状态不止通过resolve和reject这两种方法</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 在Promise构造函数中添加</span><span class="token comment" spellcheck="true">// 对于抛出异常的情况，需要在executor中进行捕获</span>  <span class="token keyword">try</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 控制台打印出p 可以看到状态已经换成了rejected</span>Promise <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>promiseState<span class="token punctuation">:</span> <span class="token string">'rejected'</span><span class="token punctuation">,</span> promiseResult<span class="token punctuation">:</span> <span class="token string">'error'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>promiseResult<span class="token punctuation">:</span><span class="token string">"error"</span>promiseState<span class="token punctuation">:</span><span class="token string">"rejected"</span><span class="token punctuation">[</span><span class="token punctuation">[</span>Prototype<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>Object</code></pre><h3 id="修改一次状态"><a href="#修改一次状态" class="headerlink" title="修改一次状态"></a>修改一次状态</h3><p>完成状态只能够修改一次，就是如果状态已经修改了，则不能够进行修改了，否则可以修改一次</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果只能够修改一次的话，需要判断此时的状态是否是pending 是pending才能够修改，否则不能够修改</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>promiseState <span class="token operator">!==</span> <span class="token string">'pending'</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 因为resolve是直接调用，不是通过对象调用的，所以注意this指向</span>    self<span class="token punctuation">.</span>promiseState <span class="token operator">=</span> <span class="token string">'fulfilled'</span><span class="token punctuation">;</span>    self<span class="token punctuation">.</span>promiseResult <span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="异步then实现"><a href="#异步then实现" class="headerlink" title="异步then实现"></a>异步then实现</h3><p>异步任务then的实现 当promise中是异步任务时，then也需要在状态改变之后才能执行指定的回调</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 需要在then方法中添加</span><span class="token comment" spellcheck="true">// 如果promise中是异步的情况，then执行时状态还是在pending时</span>  <span class="token comment" spellcheck="true">// 所以将指定回调保存下来，在状态改变时进行调用即可</span>  <span class="token comment" spellcheck="true">// 保存到外部是非常不安全的，保存到自身比较好</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>promiseState <span class="token operator">===</span> <span class="token string">'pending'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>callback<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      onResolved<span class="token punctuation">,</span>      onRejected    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在Promise构造函数中添加</span>self<span class="token punctuation">.</span>callback <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在resolve和reject函数中对应添加</span><span class="token comment" spellcheck="true">// 执行resolve时肯定状态是确定转变为成功了 </span><span class="token comment" spellcheck="true">// 那么如果这时有callback回调函数 则需要执行</span><span class="token keyword">if</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>callback<span class="token punctuation">.</span>onRejected<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    self<span class="token punctuation">.</span>callback<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        item<span class="token punctuation">.</span><span class="token function">onRejected</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="同步then返回结果"><a href="#同步then返回结果" class="headerlink" title="同步then返回结果"></a>同步then返回结果</h3><p>then的返回结果由里面的onResolve或onReject回调函数的执行结果决定</p><p>规则：</p><p>1、如果onResolve或onReject回调函数的执行结果返回非promise类型的数据</p><p>then的返回结果为成功的promise</p><p>2、如果onResolve或onReject回调函数的执行结果返回promise类型的数据</p><p>then的返回结果就是onResolve或onReject回调函数的执行结果</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// then方法里面添加</span><span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>promiseState <span class="token operator">===</span> <span class="token string">'fulfilled'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 对抛出异常的情况需要在resolve中进行捕获</span>    <span class="token keyword">try</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这里需要获取到成功的回调函数的结果</span>        <span class="token comment" spellcheck="true">// 观察它是否是promise</span>        <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">onResolved</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>promiseResult<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果是promise对象 那它一定有自己的then方法,可以通过他自己的resolve或者reject来得到返回promise的状态改变</span>            res<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token function">resolve</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> r <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果是非promise 将该返回的promise对象的状态转变为成功即可,且值为回调函数返回的值</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="异步then返回结果"><a href="#异步then返回结果" class="headerlink" title="异步then返回结果"></a>异步then返回结果</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>promiseState <span class="token operator">===</span> <span class="token string">'pending'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>callback<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 之前是直接push原来的onResolve即可，但是现在是异步的，需要对原来的函数改变一下</span>        onResolved<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">try</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">onResolved</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>promiseResult<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    res<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>                        v <span class="token operator">=</span><span class="token operator">></span> <span class="token function">resolve</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span>                        r <span class="token operator">=</span><span class="token operator">></span> <span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>                    <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span></code></pre><h3 id="then优化与完善"><a href="#then优化与完善" class="headerlink" title="then优化与完善"></a>then优化与完善</h3><p>可以看到之前的代码中有很多的try catch，其中它们内部的函数都差不多，只不过有个onResolved或者onRejected的区别，所以可以对该代码进行封装即可</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// then方法的优化与完善</span>  <span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">try</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 这里需要获取到成功的回调函数的结果</span>          <span class="token comment" spellcheck="true">// 观察它是否是promise</span>          <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>promiseResult<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 如果是promise对象 那它一定有自己的then方法,可以通过他自己的resolve或者reject来得到返回promise的状态改变</span>              res<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token function">resolve</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> r <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 如果是非promise 将该返回的promise对象的状态转变为成功即可,且值为回调函数返回的值</span>              <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在下方使用的时候就是这样的使用方法</span> <span class="token keyword">if</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>promiseState <span class="token operator">===</span> <span class="token string">'fulfilled'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token function">callback</span><span class="token punctuation">(</span>onResolved<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="catch方法与异常穿透"><a href="#catch方法与异常穿透" class="headerlink" title="catch方法与异常穿透"></a>catch方法与异常穿透</h3><p>catch其实是js中的语法糖，依旧使用的是then的代码，只不过resolve传入undefined即可</p><p>异常穿透：在then的链式调用中，中间任务不需要对失败的结果进行处理，只需要在最后加一个catch方法去处理失败的结果。</p><pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">// 解决异常穿透 在then方法前面添加</span>  <span class="token comment" spellcheck="true">// 异常穿透的中途如果有失败的话，但是可以then方法里面只写了onResolved方法</span>  <span class="token comment" spellcheck="true">// 没有写onRejected方法，那么如果此时发生了错误，由于没有定义onRejected</span>  <span class="token comment" spellcheck="true">// 就会产生undefined，会报错，故需要自己检测 如果没有定义需要自己定义</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> onRejected <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    onRejected <span class="token operator">=</span> reason <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> reason<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 同理，onResolved也是如此</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> onResolved <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 此处是简写形式，value => return value;</span>    onResolved <span class="token operator">=</span> value <span class="token operator">=</span><span class="token operator">></span> value<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token keyword">catch</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>undefined<span class="token punctuation">,</span>onRejected<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="Promise-resolve函数"><a href="#Promise-resolve函数" class="headerlink" title="Promise.resolve函数"></a>Promise.resolve函数</h3><p>返回的是一个成功的promise对象</p><pre class=" language-js"><code class="language-js">Promise<span class="token punctuation">.</span>resolve <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      value<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>        v <span class="token operator">=</span><span class="token operator">></span> <span class="token function">resolve</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span>        r <span class="token operator">=</span><span class="token operator">></span> <span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject"></a>Promise.reject</h3><p>返回一个失败的promise对象</p><pre class=" language-js"><code class="language-js">Promise<span class="token punctuation">.</span>reject <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">reject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h3><pre class=" language-js"><code class="language-js">Promise<span class="token punctuation">.</span>all <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 成功的个数</span>  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 成功的结果</span>  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>promises<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      promises<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>        v <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          count<span class="token operator">++</span><span class="token punctuation">;</span>          arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">===</span> promises<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        r <span class="token operator">=</span><span class="token operator">></span> <span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race"></a>Promise.race</h3><pre class=" language-js"><code class="language-js">Promise<span class="token punctuation">.</span>race <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>promises<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      promises<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>        v <span class="token operator">=</span><span class="token operator">></span> <span class="token function">resolve</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span>        r <span class="token operator">=</span><span class="token operator">></span> <span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="回调函数异步执行"><a href="#回调函数异步执行" class="headerlink" title="回调函数异步执行"></a>回调函数异步执行</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'ok'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>    v <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">333</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输出：111 333 222</span><span class="token comment" spellcheck="true">// 因为then里面指定的回调是异步执行的，等同步执行完毕之后它才会执行</span></code></pre><p>解决：</p><p>在then方法和callback方法中的立即执行加上一个定时器</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 加上定时器是因为要使得then指定的回调是异步执行的</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span>onResolved<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="async与await"><a href="#async与await" class="headerlink" title="async与await"></a>async与await</h2><h3 id="async函数"><a href="#async函数" class="headerlink" title="async函数"></a>async函数</h3><p>1、async函数的返回值是promise对象</p><p>2、promise对象的结果由async函数执行的返回值决定</p><p>async有点像then方法，它的返回规则与then方法中的规则一致</p><p>如果async函数中返回的是非promise 则成功，且值为该值</p><p>否则返回该promise的执行结果</p><h3 id="await表达式"><a href="#await表达式" class="headerlink" title="await表达式"></a>await表达式</h3><p>await返回的是promise成功的值，功能主要是对他后面接的promise对象的成功值进行获取。</p><p>1、await右侧的表达式一般为 promise 对象, 但也可以是其它的值</p><p>2、如果表达式是 promise 对象, await 返回的是 promise 成功的值</p><p>3、如果表达式是其它值, 直接将此值作为 await 的返回值</p><p>ps：</p><p>await 必须写在 async 函数中, 但 async 函数中可以没有 await</p><p>如果 await 的 promise 失败了, 就会抛出异常, 需要通过 try…catch 捕获处理</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>使用async和await对多个文件值进行获取</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 对多个文件进行值的获取</span><span class="token comment" spellcheck="true">// 还是使用nodejs的fs读取模块</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'util'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> mineReadFile <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">promisify</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span>readFile<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 声明main方法为一个异步方法</span><span class="token comment" spellcheck="true">// 在里面使用await接收文件结果</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">try</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> data1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">mineReadFile</span><span class="token punctuation">(</span><span class="token string">'./content.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    data1 <span class="token operator">=</span> data1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> data2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">mineReadFile</span><span class="token punctuation">(</span><span class="token string">'./content2.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    data2 <span class="token operator">=</span> data2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> data3 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">mineReadFile</span><span class="token punctuation">(</span><span class="token string">'./content3.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    data3 <span class="token operator">=</span> data3<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data1 <span class="token operator">+</span> data2 <span class="token operator">+</span> data3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>使用async和await进行Ajax发送请求</p><p>需要将ajax封装成一个Promise对象（这一步就是axios做的事情，它是基于promise的基本方式对ajax进行封装的包）</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>面经</title>
      <link href="/2023/06/05/mian-jing/"/>
      <url>/2023/06/05/mian-jing/</url>
      
        <content type="html"><![CDATA[<h3 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h3><p>webpack是一个用于现代js应用程序的静态模块打包工具，当webpack处理应用程序时，它会在内部从一个或者多个入口点构建一个依赖图（dependency graph），然后将你的项目中所需的每一个模块组合成一个或者多个bundles，它们均为静态资源，用于展示你的内容</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>基于node.js 使用npm包管理器来安装webpack：本地安装</p><p>1、新建一个工程目录，并执行npm的初始化命令</p><p>​ mkdir webpack_init &amp;&amp; cd webpack_init </p><p>​  pm init</p><p>2、命令行输入项目的基本信息，如：名称、版本、描述、仓库地址等信息，成功后工程目录中会出现package.json文件</p><p>3、安装webpack的命令</p><p>​ npm install webpack webpack-cli –save-dev</p><p>​全局安装webpack-cli:</p><p>​ npm i -g webpack-cli</p><p>查看安装是否成功执行</p><pre><code>D:\webpack_init&gt;webpack-cli -v  System:    OS: Windows 10 10.0.19044    CPU: (16) x64 AMD Ryzen 7 5800H with Radeon Graphics    Memory: 7.13 GB / 13.86 GB  Binaries:    Node: 16.16.0 - D:\Program Files(x86)\nodejs\node.EXE    Yarn: No HADOOP_CONF_DIR set.Please specify it either in yarn-env.cmd or in the environment. - D:\hadoop-3.1.0\bin\yarn.CMD    npm: 8.11.0 - D:\Program Files(x86)\nodejs\npm.CMD  Browsers:    Edge: Spartan (44.19041.1266.0), Chromium (111.0.1661.44)    Internet Explorer: 11.0.19041.1566  Packages:    webpack: ^5.76.2 =&gt; 5.76.2    webpack-cli: ^5.0.1 =&gt; 5.0.1</code></pre><p>4、打包的第一个应用</p><p>index.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>practice<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./dist/main.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>src&#x2F;index.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> helloWorld <span class="token keyword">from</span> <span class="token string">'./hello.js'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">component</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token function">helloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> element<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>src&#x2F;hello.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">'hello world!!!'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="核心概念-入口"><a href="#核心概念-入口" class="headerlink" title="核心概念-入口"></a>核心概念-入口</h4><h5 id="资源处理流程"><a href="#资源处理流程" class="headerlink" title="资源处理流程"></a>资源处理流程</h5><p>webpack 是一个现代 JavaScript 应用程序的静态模块打包工具。当 webpack 处理应用程序时，它会在内部构建一个 依赖图(dependency graph)，此依赖图会映射项目所需的每个模块，并生成一个或多个 bundle。</p><p>bundle</p><p>代码分离是webpack的特性之一，使用entry配置入口起点，会将代码分成源代码和分发代码，其中源代码是开发编辑的代码，分发代码是经过webpack构建，可能经过转义、压缩或者优化后的代码，这些代码存放于bundle中，可以被浏览器等环境直接运行。</p><p>依赖图 dependency graph</p><p>打包步骤总结</p><p>1、我们工程的依赖路径index.js -&gt; hello.js -&gt; message.js</p><p>2、根据 webpack.config.js 中定义的 entry 解析入口（index.js）文件，找到他的依赖</p><p>3、递归的构建依赖关系图</p><p>4、将所有内容打包到 webpack.config.js 定义的 output 文件</p><h4 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h4><p>插件：用户对某个现有的架构进行扩展</p><p>webpack中的插件就是对webpack现有功能的各种扩展，比如打包优化、文件压缩等等</p><p>loader和plugin的区别</p><p>loader：主要用户转换某些类型的模块，它是一个转换器</p><p>plugin的使用：</p><p>1、通过npm安装需要使用的plugin（某些webpack已经内置的插件不需要安装）</p><p>2、在webpack.config.js中的plugins中配置插件</p><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><p><a href="https://blog.csdn.net/fmk1023/article/details/111381876">(95条消息) vue学习笔记（超详细）_vue笔记_fmk1023的博客-CSDN博客</a></p><p>Vue是一个渐进式的框架</p><p>引入</p><p>1、直接CDN引入</p><p>开发环境版本&#x2F;生产环境版本</p><p>2、下载和引入</p><p>3、NPM安装</p><p>​通过webpack和cli的使用</p><p>Vue的MVVM</p><p>M:model 数据模型 数据层 数据可能是一些固定的数据，更多的是来自服务器，从网络上请求下来的数据</p><p>V：view 视觉层 前端开发中，通常是DOM层 给用户展示各种信息</p><p>VM：View-model 视图模型层 view和model沟通的桥梁 作用：1、data binding数据绑定  2、DOM listener 当DOM发生一些事件（滚动、点击、touch等等），可以进行监听，并在需要的情况下改变对应的data</p><p>语法</p><p>v-once</p><p>v-html</p><p>v-bind 动态绑定属性 简写 ：</p><p>v-if v-else-if v-else</p><p>v-show: 元素显示 dom增加一个行内样式display：none</p><p>v-on:绑定事件监听 简写@</p><p>v-for遍历数组</p><p>v-model表单绑定：实现表单元素和数据的双向绑定 radio checkbox select </p><p>修饰符</p><p>lazy：可以让数据只有在失去焦点或者回车的时候才会更新</p><input type="text" v-model.lazy="输入"><p>number：在默认情况下，（前景：输入框中无论输入字母还是数字，都会被当作字符串类型进行处理）作用：当作数字类型进行处理</p><p>trim：可以过滤掉内容左右两边的空格</p><p>检测数组更新：</p><p>Vue是响应式，所以当数据发生变化时，Vue会自动检测数据变化，视图会发生对应的更新</p><img src='https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/vue%E6%95%B0%E7%BB%84%E5%93%8D%E5%BA%94%E5%BC%8F%E6%96%B9%E6%B3%95.jpg' width='600px' align='left'><img src='https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/vue%E6%95%B0%E7%BB%84%E6%9C%AA%E5%93%8D%E5%BA%94.jpg' width='600px' align='left'><p>计算属性</p><p>computed</p><p>computed&#x2F;methods的区别</p><p>methods：每次都会调用</p><p>computed：计算机会缓存，不变的情况下只调用一次</p><p>fulters过滤器 ？？？</p><h4 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h4><p>基本步骤</p><p>1、调用Vue.extend()方法-构建组件构造器</p><p>2、调用Vue.component()方法-注册组件</p><p>3、在Vue实例的作用范围内-使用组件</p><p>组件分类</p><p>全局组件</p><img src='https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/Vue%E5%85%A8%E5%B1%80%E7%BB%84%E4%BB%B6.jpg' width='300px' align='left'><p>局部组件</p><img src='https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/vue%E5%B1%80%E9%83%A8%E7%BB%84%E4%BB%B6.jpg' width='300px' align='left'><p>父组件&#x2F;子组件</p><p>1、当子组件注册到父组件的components时，Vue会编译好父组件的模块</p><p>2、该模块的内容已经决定了父组件将要渲染的HTML (相当于父组件中已经有子组件中的内容了)</p><p>vue为了简化注册组件的过程，提供了注册的语法糖，省去了调用Vue.extend()的步骤，而是可以直接使用一个对象来代替</p><p>eg</p><img src='https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/vue%E7%9C%81%E5%8E%BBextend%E6%AD%A5%E9%AA%A4%E5%AE%9E%E4%BE%8B.jpg' width='300px' align='left'><p>组件模板抽离写法</p><img src='https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/%E7%BB%84%E4%BB%B6%E6%8A%BD%E7%A6%BB%E5%86%99%E6%B3%951.jpg' width='400px' align='left'><p>放入标签</p><img src='https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/%E7%BB%84%E4%BB%B6%E6%8A%BD%E7%A6%BB%E5%86%99%E6%B3%952.jpg' width='400px' align='left'><p>组件不能访问vue实例数据</p><p>组件是一个单独功能模块的封装，这个模块有自己的html模板，也应该有属于自己的data</p><p>Vue.component(‘cpn’, {<br>    template: ‘#cpn’,<br>    data() {<br>        return {<br>            title: ‘哈哈哈’<br>        }<br>    }<br>})</p><p>&#x2F;&#x2F; <strong>data属性必须是一个函数, 返回必须是一个对象</strong></p><h4 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h4><p>父子组件的通信</p><p>1、通过props向子组件传递数据</p><p>父组件访问子组件方式</p><p>$children: this.$children 是一个数组类型，它包含所有子组件对象</p><p>$refs:拿指定的子组件</p><p>子组件访问父组件方式</p><ul><li><p>$parent: 上一级父组件</p></li><li><p>$root: 根组件</p></li></ul><h4 id="插槽slot"><a href="#插槽slot" class="headerlink" title="插槽slot"></a>插槽slot</h4><p>作用：组件的插槽是为了让我们封装的组件更加具有扩展性，让使用者可以决定组件内部的一些内容到底是什么</p><p>基本使用</p><p>​具名插槽</p><p>​作用域插槽</p><h4 id="Vue-Cli"><a href="#Vue-Cli" class="headerlink" title="Vue Cli"></a>Vue Cli</h4><p>cli：Command-Line Interface命令行界面，俗称脚手架</p><p>Vue Cli是官方发布的vue.js项目脚手架，可以快速搭建vue开发环境以及webpack配置</p><p>Vue cli使用前提 -安装node 安装webpack</p><p>vue cli3</p><p>基于webpack 4 打造 移除了static文件夹，增加了public文件夹，并且index.html移动到了public中</p><h4 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h4><p>routing路由：通过互联网把信息从源地址传输到目的地址的活动</p><p>路由表：本质上就是一个映射表，决定了数据包的指向</p><p>后端路由阶段</p><p><strong>早期的网站开发整个HTML页面是由服务器来渲染</strong></p><p>服务器直接生产渲染好对应的HTML页面, 返回给客户端进行展示<br>一个页面有自己对应的网址, 也就是URL.<br>URL会发送到服务器,<br>服务器会通过正则对该URL进行匹配,并且最后交给一个Controller进行处理.<br>Controller进行各种处理, 最终生成HTML或者数据, 返回给前端.<br>这就完成了一个IO操作.</p><p>上述的操作就是后端路由</p><p>当我们页面中需要请求不同的路径内容时, 交给服务器来进行处理, 服务器渲染好整个页面, 并且将页面返回给客户端<br>这种情况下渲染好的页面, 不需要单独加载任何的js和css, 可以直接交给浏览器展示, 这样也有利于SEO的优化</p><p>缺点</p><ul><li><p>一种情况是整个页面的模块由后端人员来编写和维护的</p></li><li><p>另一种情况是前端开发人员如果要开发页面,需要通过PHP和Java等语言来编写页面代码</p></li><li><p>而且通常情况下HTML代码和数据以及对应的逻辑会混在一起, 编写和维护都是非常糟糕的事情</p></li></ul><p>前端路由阶段</p><p>前后端分离阶段</p><p>随着ajax的出现，有了前后端分离的开发模式</p><p>后端只提供API来返回数据，前端通过ajax获取数据，并且可以通过js将数据渲染到页面中</p><p>前后端责任清晰，后端专注于数据处理，前端专注于交互和可视化上</p><p>移动端（android&#x2F;IOS)出现之后,后端不需要进行任何处理，依然使用之前的一套API即可</p><p>前端渲染</p><p>浏览器中显示的网页中大部分内容, 都是由前端写的JS代码在浏览器中执行,最终渲染出来</p><p>前端路由核心：改变URL，但是页面不进行整体的刷新</p><p>如何实现：</p><p>1、URL的hash</p><p>URL的hash也就是#，本质上是改变window.location的href属性</p><p>通过直接赋值location.hash来改变href, 但页面不刷新</p><p>2、html5的history模式</p><p>history接口是HTML5新增的, 它有五种模式改变URL而不刷新页面</p><p>①. history.pushState() –&gt; 入栈<br>②. history.replaceState()<br>③. history.go()<br>④. history.back() 等价于 history.go(-1) –&gt; 后退<br>⑤. history.forward() 等价于 history.go(1) –&gt; 前进</p><ol><li>什么是前端渲染, 什么是后端渲染?<br>前端渲染：</li></ol><p>指的是后端返回JSON数据，前端利用预先写的html模板，循环读取JSON数据，拼接字符串（es6的模板字符串特性大大减少了拼接字符串的的成本），并插入页面。</p><p>好处：网络传输数据量小。不占用服务端运算资源（解析模板），模板在前端（很有可能仅部分在前端），改结构变交互都前端自己来了，改完自己调就行。</p><p>坏处：前端耗时较多，对前端工作人员水平要求相对较高。前端代码较多，因为部分以前在后台处理的交互逻辑交给了前端处理。占用少部分客户端运算资源用于解析模板。</p><p>后端渲染：</p><p>前端请求，后端用后台模板引擎直接生成html，前端接受到数据之后，直接插入页面。</p><p>好处：前端耗时少，即减少了首屏时间，模板统一在后端。前端（相对）省事，不占用客户端运算资源（解析模板）</p><p>坏处：占用服务器资源。</p><p>前端渲染与后端渲染对比：</p><p>后端渲染：<br>页面呈现速度：快，受限于用户的带宽<br>流量消耗：少一点点（可以省去前端框架部分的代码）<br>可维护性：差（前后端东西放一起，掐架多年，早就在闹分手啦）<br>seo友好度：好<br>编码效率：低（这个跟不同的团队不同，可能不对）</p><p>前端渲染：<br>页面呈现速度：主要受限于带宽和客户端机器的好坏，优化的好，可以逐步动态展开内容，感觉上会更快一点</p><p>流量消耗：多一点点（一个前端框架大概50KB）当然，有的用后端渲染的项目前端部分也有在用框架</p><p>可维护性：好，前后端分离，各施其职，代码一目明了。<br>SEO友好度：差，大量使用ajax，多数浏览器不能抓取ajax数据。<br>编码效率：高，前后端各自只做自己擅长的东西，后端最后只输出接口，不用管页面呈现，只要前后端人员能力不错，效率不会低</p><p>2、前后端分离</p><p>前端人员和后端人员约定好接口后，前端人员彻底不用再关心业务处理是怎么回事，他只需要把界面做好就可以了，后端人员也不用再关系前端界面是什么样的，他只需要做好业务逻辑处理即可。服务的切离，代码管理，服务部署也都独立出来分别管理，系统的灵活性也获得了极大的提升。总结，任何系统架构设计，实际上是对组织结构在系统上进行映射，前后端分离，就是在对前端开发人员和后端开发人员的工作进行解耦，尽量减少他她们之间的交流成本，帮助他她们更能专注于自己擅长的工作。</p><ol start="3"><li>什么是前端路由, 什么是后端路由?<br>A. 什么是前端路由？</li></ol><p>很重要的一点是页面不刷新，前端路由就是把不同路由对应不同的内容或页面的任务交给前端来做，每跳转到不同的URL都是使用前端的锚点路由. 随着（SPA）单页应用的不断普及，前后端开发分离，目前项目基本都使用前端路由，在项目使用期间页面不会重新加载</p><p>B. 什么是后端路由？</p><p>浏览器在地址栏中切换不同的url时，每次都向后台服务器发出请求，服务器响应请求，在后台拼接html文件传给前端显示, 返回不同的页面, 意味着浏览器会刷新页面，网速慢的话说不定屏幕全白再有新内容。后端路由的另外一个极大的问题就是 前后端不分离。</p><p>优点：分担了前端的压力，html和数据的拼接都是由服务器完成。</p><p>缺点：当项目十分庞大时，加大了服务器端的压力，同时在浏览器端不能输入制定的url路径进行指定模块的访问。另外一个就是如果当前网速过慢，那将会延迟页面的加载，对用户体验不是很友好。</p><p>C. 什么时候使用前端路由？</p><p>在单页面应用，大部分页面结构不变，只改变部分内容的使用</p><p>D. 前端路由有什么优点和缺点？</p><p>优点:</p><p>用户体验好，和后台网速没有关系，不需要每次都从服务器全部获取，快速展现给用户</p><p>可以再浏览器中输入指定想要访问的url路径地址。</p><p>实现了前后端的分离，方便开发。有很多框架都带有路由功能模块</p><p>缺点:</p><p>使用浏览器的前进，后退键的时候会重新发送请求，没有合理地利用缓存</p><p>单页面无法记住之前滚动的位置，无法在前进，后退的时候记住滚动的位置</p><p>目前前端流行的三大框架，都有自己的路由实现</p><p>vue：vue-router</p><p>vue-router是Vue.js官方的路由插件，它和vue.js是深度集成的，适合用于构建单页面应用<br>我们可以访问其官方网站对其进行学习: <a href="https://router.vuejs.org/zh/">https://router.vuejs.org/zh/</a><br>vue-router是基于路由和组件的<br>路由用于设定访问路径, 将路径和组件映射起来.<br>在vue-router的单页面应用中, 页面的路径的改变就是组件的切换.</p><h3 id="for-in和for-of的区别"><a href="#for-in和for-of的区别" class="headerlink" title="for in和for of的区别"></a>for in和for of的区别</h3><p>都可以进行遍历</p><p>for in</p><p>​遍历数组的索引index </p><p>​更适合遍历对象，遍历数组会存在一些问题 例如：index索引为字符串类型的数字，不能直接进行几何运算</p><p>​遍历数组所有的可枚举属性，包括原型，使用hasOwnProperty（）方法可以判断某属性是不是该对象的实例属性</p><p>for of （ES6）</p><p>​遍历数组的元素值（value，不包括原型</p><p>​适合遍历数、数组对象、字符串、map、set等拥有迭代器对象iterator的集合，但是不能遍历对象，想要遍历对象可以使用for in 或者内建的Object.keys()方法</p><p>&#x2F;&#x2F; for in<br>var obj &#x3D; {a:1, b:2, c:3}</p><p>for (let key in obj) {<br>  console.log(key)<br>}<br>&#x2F;&#x2F; a b c</p><p>&#x2F;&#x2F;for of<br>const array1 &#x3D; [‘a’, ‘b’, ‘c’]</p><p>for (const val of array1) {<br>  console.log(val)<br>}<br>&#x2F;&#x2F; a b c</p><h3 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h3><p>是网页属性中一个非常重要的属性（可以实现元素并排），一开始设计的初衷是为了网页的文字环绕效果</p><p>css样式表中使用float表示，它有</p><p>属性值：none （不浮动） left（左浮动） right（右浮动） inherit（继承父元素的浮动属性）</p><p>浮动的元素脱离了标准文档流（元素排版布局过程中，元素会默认从左到右，从上到下的流式排列方式），即脱标</p><p>浮动的元素互相贴靠</p><p>清除浮动的方式</p><p>1、父盒子设置固定高度</p><p>对于不知道高度的盒子不适合</p><p>2、内墙法</p><p>在浮动元素后面加一个空的块级元素（div）且该元素设置clear：both属性（清除浮动元素对我左右两边的影响）</p><p>3、伪元素清除法</p><p>.clearfix:after{<br>    content:’.’; &#x2F;&#x2F;给<code>.clearfix</code>元素内部最后添加一个内容，该内容为行内元素<br>    display: block; &#x2F;&#x2F;设置该元素为块级元素，符合内墙法的需求<br>    clear: both; &#x2F;&#x2F;清除浮动的方法。必须要写<br>    overflow: hidden;  &#x2F;&#x2F;如果用<code>display:none;</code>,那么就不能满足该元素是块级元素了。<code>overflow:hidden;</code>表示隐藏元素，与<code>display:none;</code>不同的是，前者隐藏元素，该元素占位置，而后者不占位置。<br>    height: 0;<br>}</p><h3 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h3><p>块级格式化上下文</p><p>浮动不会影响其它BFC中元素的布局，而清除只能清除同一BFC中在它前面的元素的浮动</p><p>只要让父盒子形成了BFC区域，那么它就只会清除区域中浮动元素带来的影响</p><p>Box 盒子，页面的基本构成元素，分为inline、block、inline-block三种类型的BOX</p><p>FC：Formatting Context 是W3C的规范中的一种概念，它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其它元素的关系和相互作用，分类BFC和IFC</p><p>BFC(Block formatting context)直译为”块级格式化上下文”。它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。</p><p>BFC布局规则</p><p>1.内部的Box会在垂直方向，一个接一个地放置。</p><p>2.Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠</p><p>3.每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</p><p>4.BFC的区域不会与float 元素重叠。</p><p>5.BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</p><p>6.计算BFC的高度时，浮动元素也参与计算</p><p>哪些元素会生成BFC</p><p>1.根元素</p><p>2.float属性不为none</p><p>3.position为absolute或fixed</p><p>4.display为inline-block</p><p>5.overflow不为visible</p><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><p>用于指定一个元素在文档中的定位方式</p><p>static</p><p>relative 并未脱离文档流</p><p>absolute 脱离了文档流 以最近的非静态定位的父元素进行定位，如果没有的话，则以页面左上角进行定位</p><p>fixed 脱离了文档流，以浏览器视口本身进行定位</p><h3 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h3><p>1、设置父元素display:flex;</p><p>2、设置justify-content: center；水平居中 </p><p>3、align-items：center； 垂直居中</p><h4 id="轴"><a href="#轴" class="headerlink" title="轴"></a>轴</h4><p>在 flex 布局中，<code>flex-direction</code> 属性决定主轴的方向(row,column,row-reverse,column-reverse)，交叉轴的方向由主轴确定。</p><p>主轴：main axis</p><p>主轴的起始端由 <code>flex-start</code> 表示，末尾段由 <code>flex-end</code> 表示。不同的主轴方向对应的起始端、末尾段的位置也不相同。</p><p>交叉轴：cross axis</p><h4 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h4><p>父容器可以统一设置子容器的排列方式，子容器也可以单独设置自身的排列方式，如果两者同时设置，以子容器的设置为准。<code>justify-content</code> 属性决定子容器沿主轴的排列方式，<code>align-items</code> 属性决定子容器沿着交叉轴的排列方式。</p><h5 id="父容器"><a href="#父容器" class="headerlink" title="父容器"></a>父容器</h5><ul><li><p>设置子容器沿主轴排列：<strong>justify-content</strong>    </p><p><strong>flex-start</strong>：起始端对齐 </p><p><strong>flex-end</strong>：末尾段对齐 </p><p><strong>center</strong>：居中对齐</p><p><strong>space-around</strong>：子容器沿主轴均匀分布，位于首尾两端的子容器到父容器的距离是子容器间距的一半。</p><img src="https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/space-around.jpg" style="zoom:40%;"  align='left' /><p><strong>space-between</strong>：子容器沿主轴均匀分布，位于首尾两端的子容器与父容器相切。</p><img src="https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/space-between.jpg" style="zoom:40%;" align='left' /></li><li><p>设置子容器如何沿交叉轴排列：<strong>align-items</strong></p><p>flex-start</p><p>flex-end</p><p>center</p><p>baseline 基线对齐，这里的baseline默认是指首行文字，所有子容器向基线对齐</p><img src="https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/baseline.jpg" style="zoom:33%;" align = 'left' /><p><strong>stretch</strong>：子容器沿交叉轴方向的尺寸拉伸至与父容器一致。</p><img src="https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/stretch.jpg" style="zoom:40%;" align='left' /></li></ul><p>设置换行方式：<strong>flex-wrap</strong></p><img src="https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/flex-wrap.jpg" style="zoom:33%;" align='left'/><p>轴向与换行组合设置：<strong>flex-flow</strong> (flex-direction 与 flex-wrap 的组合)</p><p>flex-flow: row wrap</p><p>多行沿交叉轴对齐：<strong>align-content</strong></p><p>当子容器多行排列时，设置行与行之间的对齐方式。</p><p><strong>flex-start</strong>：起始端对齐</p><img src="D:\study\实习\起始端对齐.jpg" style="zoom:33%;" align='left'/><p><strong>flex-end</strong>：末尾段对齐</p><img src="D:\study\实习\末尾端对齐.jpg" style="zoom:33%;" align='left' /><p><strong>center</strong>：居中对齐</p><p><strong>space-around</strong>：等边距均匀分布</p><p><strong>space-between</strong>：等间距均匀分布</p><p><strong>stretch</strong>：拉伸对齐</p><h5 id="子容器"><a href="#子容器" class="headerlink" title="子容器"></a>子容器</h5><ul><li><p>在主轴上如何伸缩：<strong>flex</strong></p><p>子容器是有弹性的（flex 即弹性），它们会自动填充剩余空间，子容器的伸缩比例由 <code>flex</code> 属性确定。</p><p><code>flex</code> 的值可以是无单位数字（如：1, 2, 3），也可以是有单位数字（如：15px，30px，60px），还可以是 <code>none</code> 关键字。子容器会按照 <code>flex</code> 定义的尺寸比例自动伸缩，如果取值为 <code>none</code> 则不伸缩</p><p><code>flex</code> 是多个属性的缩写，允许 1 - 3 个值连用，但通常用 1 个值就可以满足需求，它的全部写法可参考下图。</p><img src="D:\study\实习\flex属性填写.jpg" style="zoom:33%;" align='left'/></li></ul><p>设置基准大小：<strong>flex-basis</strong></p><p>表示在不伸缩的情况下子容器的原始尺寸，主轴为横向时代表宽度，主轴为纵向时代表高度。</p><p>设置扩展比例：**flex-grow **子容器弹性伸展的比例</p><p>如图，剩余空间按 1:2 的比例分配给子容器。</p><img src="https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/flex-grow.jpg" style="zoom:33%;" align='left'/><p>设置收缩比例：<strong>flex-shrink</strong></p><p>子容器弹性收缩的比例。如图，超出的部分按 1:2 的比例从给子容器中减去。</p><img src="https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/flex-shrink.jpg" style="zoom:33%;" align='left'/><p>设置排列顺序：<strong>order</strong></p><p>改变子容器的排列顺序，覆盖 HTML 代码中的顺序，默认值为 0，可以为负值，数值越小排列越靠前。</p><img src="https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/order.jpg" style="zoom:33%;" align='left'/><ul><li><p>单独设置子容器如何沿交叉轴排列：<strong>align-self</strong></p><p><strong>flex-start</strong>：起始端对齐</p><p><strong>flex-end</strong>：末尾段对齐</p><p><strong>center</strong>：居中对齐</p><p><strong>baseline</strong>：基线对齐</p><p><strong>stretch</strong>：拉伸对齐</p></li></ul><h3 id="grid布局"><a href="#grid布局" class="headerlink" title="grid布局"></a>grid布局</h3><p>grid布局即网格布局，是一种新的css布局模型，比较擅长将一个页面划分为几个主要区域，以及定义这些区域的大小、位置、层次等关系，是目前唯一一种css二维布局</p><p>声明：</p><p>display：grid（块级元素）&#x2F;inline-grid（行内元素）</p><p>网格轨道：</p><p>grid-template-columns 列宽</p><p>grid-template-rows 行高</p><p>网格单元：</p><p>一个网格单元是在一个网格元素中最小的单位， 从概念上来讲其实它和表格的一个单元格很像。</p><p>网格线：</p><p>划分网格的线，称为”网格线”。应该注意的是，当我们定义网格时，我们定义的是网格轨道，而不是网格线。Grid 会为我们创建编号的网格线来让我们来定位每一个网格元素。m 列有 m + 1 根垂直的网格线，n 行有 n + 1 跟水平网格线。</p><p>repeat（次数，数值）</p><p>auto-fill关键字：表示自动填充，让一行（或者一列）中尽可能容纳更多的单元格</p><p>fr关键字：</p><p>fr单位代表网格容器中可用空间的一等份，<code>grid-template-columns: 200px 1fr 2fr</code> 表示第一个列宽设置为 200px，后面剩余的宽度分为两部分，宽度分别为剩余宽度的 1&#x2F;3 和 2&#x2F;3。</p><p>minmax（）函数：</p><p>我们有时候想给网格元素一个最小和最大的尺寸，<code>minmax()</code> 函数产生一个长度范围，表示长度就在这个范围之中都可以应用到网格项目中。它接受两个参数，分别为最小值和最大值。<code>grid-template-columns: 1fr 1fr minmax(300px, 2fr)</code> 的意思是，第三个列宽最少也是要 300px，但是最大不能大于第一第二列宽的两倍。</p><p>auto关键字：</p><p>由浏览器决定长度。通过 <code>auto</code> 关键字，我们可以轻易实现三列或者两列布局。<code>grid-template-columns: 100px auto 100px</code> 表示第一第三列为 100px，中间由浏览器决定长度。</p><p><code>grid-row-gap</code> 属性、<code>grid-column-gap</code> 属性分别设置行间距和列间距。<code>grid-gap</code> 属性是两者的简写形式。<code>grid-row-gap: 10px</code> 表示行间距是 10px，<code>grid-column-gap: 20px</code> 表示列间距是 20px。<code>grid-gap: 10px 20px</code> 实现的效果是一样的。</p><p>grid-template-areas：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">.</span>wrapper <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  display<span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  grid<span class="token operator">-</span>gap<span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>  grid<span class="token operator">-</span>template<span class="token operator">-</span>columns<span class="token punctuation">:</span> 120px  120px  120px<span class="token punctuation">;</span>  grid<span class="token operator">-</span>template<span class="token operator">-</span>areas<span class="token punctuation">:</span>    <span class="token string">". header  header"</span>    <span class="token string">"sidebar content content"</span><span class="token punctuation">;</span>  background<span class="token operator">-</span>color<span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>  color<span class="token punctuation">:</span> #<span class="token number">444</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p> 上面代码表示划分出 6 个单元格，<code>.</code> 符号代表空的单元格，也就是没有用到该单元格</p><p>用于定义区域，一个区域由一个或者多个单元格组成，一般这个属性跟网格元素的 <code>grid-area</code> 一起使用，我们在这里一起介绍。 <code>grid-area</code> 属性指定项目放在哪一个区域。</p><pre class=" language-css"><code class="language-css"><span class="token number">.</span>sidebar &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">grid-area</span><span class="token punctuation">:</span> sidebar<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>content &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">grid-area</span><span class="token punctuation">:</span> content<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>header &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">grid-area</span><span class="token punctuation">:</span> header<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p>以上代码表示将类 <code>.sidebar</code> <code>.content</code> <code>.header</code>所在的元素放在上面 <code>grid-template-areas</code> 中定义的 <code>sidebar</code> <code>content</code> <code>header</code> 区域中.</p><p>grid-auto-flow:</p><p>控制自动布局算法怎样运作，精确指定在网格中被自动布局的元素怎样排列。默认的放置顺序是”先行后列”，即先填满第一行，再开始放入第二行，即下图英文数字的顺序 <code>one</code>,<code>two</code>,<code>three</code>…。这个顺序由 <code>grid-auto-flow</code> 属性决定，默认值是 <code>row</code>。</p><p><code>grid-auto-flow: row dense</code>，表示尽可能填满表格</p><p><code>justify-items</code> 属性设置单元格内容的水平位置（左中右），<code>align-items</code> 属性设置单元格的垂直位置（上中下）</p><p>.container {<br>  justify-items: start | end | center | stretch;<br>  align-items: start | end | center | stretch;<br>}</p><ul><li>start：对齐单元格的起始边缘</li></ul><img src="https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/grid-start.jpg" style="zoom:33%;" align='left' /><ul><li>end：对齐单元格的结束边缘</li></ul><img src="https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/grid-end.jpg" style="zoom:33%;" align='left'/><ul><li><p>center：单元格内部居中</p></li><li><p>stretch：拉伸，占满单元格的整个宽度（默认值）</p></li></ul><p><code>justify-content</code> 属性是整个内容区域在容器里面的水平位置（左中右），<code>align-content</code> 属性是整个内容区域的垂直位置（上中下）。它们都有如下的属性值。</p><p>.container {<br>  justify-content: start | end | center | stretch | space-around | space-between | space-evenly;<br>  align-content: start | end | center | stretch | space-around | space-between | space-evenly;<br>}</p><img src="https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/grid-justify-content.jpg" style="zoom:33%;" align='left' /><img src="https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/grid-justigy-content2.jpg" style="zoom:33%;" align='left'/><h3 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h3><p>使用多个参数的函数转化为一系列使用一个参数的函数的技术，它返回一个新的函数，这个新函数去处理剩余的参数</p><p>bind、apply、call的用法</p><p>相同点：改变this的指向，接收的第一个参数都是this要指向的对象</p><p>不同点：bind和call传参相同，多个参数依次传入，apply传入数组，call和apply都是对函数进行直接调用，bind不会立即调用函数，而是立即返回一个修改this后的函数，需要调用这个函数才会执行</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span> <span class="token string">"xiaoming"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span>    sayHello<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span>job<span class="token punctuation">,</span>hobby<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`我叫$&amp;#123;this.name&amp;#125;,今年$&amp;#123;this.age&amp;#125;岁，我的工作是$&amp;#123;job&amp;#125;,我的爱好是$&amp;#123;hobby&amp;#125;.`</span></span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">'程序员'</span><span class="token punctuation">,</span><span class="token string">'看美女'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span> <span class="token string">'lihua'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">30</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 开始调用call</span>obj<span class="token punctuation">.</span>sayHello<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj2<span class="token punctuation">,</span><span class="token string">'设计师'</span><span class="token punctuation">,</span><span class="token string">'画画'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 开始调用apply</span>obj<span class="token punctuation">.</span>sayHello<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj2<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'设计师'</span><span class="token punctuation">,</span><span class="token string">'画画'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 开始调用bind</span><span class="token keyword">var</span> hh <span class="token operator">=</span> obj<span class="token punctuation">.</span>sayHello<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj2<span class="token punctuation">,</span><span class="token string">'设计师'</span><span class="token punctuation">,</span><span class="token string">'画画'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">hh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 手撕call</span><span class="token comment" spellcheck="true">// 1、改变this指向</span><span class="token comment" spellcheck="true">// 2、执行函数fn</span>Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myCall <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>_this<span class="token punctuation">,</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>_this<span class="token punctuation">)</span> _this <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 改变this指向 通过原型我们知道调用call的肯定是函数，this本来是指向调用call的那个函数的</span>    <span class="token comment" spellcheck="true">// 现在使用_this.fn来接收原来的this，就是改变了this的指向</span>    _this<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 调用完就删除拓展属性</span>    <span class="token keyword">delete</span> _this<span class="token punctuation">.</span>fn    <span class="token keyword">return</span> res<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调用</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>v <span class="token operator">+</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>sum<span class="token punctuation">.</span><span class="token function">myCall</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>v<span class="token punctuation">:</span><span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 6</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 手撕apply</span>Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myApply <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>_this<span class="token punctuation">,</span>args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>_this<span class="token punctuation">)</span> _this <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>    _this<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>    <span class="token keyword">delete</span> _this<span class="token punctuation">.</span>fn    <span class="token keyword">return</span> res<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 手撕bind</span>Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myBind <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>_this<span class="token punctuation">,</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将原函数的this传递给fn</span>    <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token comment" spellcheck="true">// 返回一个新函数 返回的新函数也是可以继续传递参数的</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token operator">...</span>args2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">F</span><span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">,</span><span class="token operator">...</span>args2<span class="token punctuation">)</span><span class="token punctuation">:</span>fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>_this<span class="token punctuation">,</span>args<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>args2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>promise的用法</p><p>回调函数：将一个方法func2作为参数传入到另一个方法func1中，当func1执行到某一步或者满足某种条件的时候才执行传入的参数func2</p><p>Promise是ES6引入的异步编程的新解决方案</p><p>Promise对象的三种状态：初始化、成功、失败pending-进行中、resolved-已完成、rejected-已失败</p><p>解决</p><ul><li><p>回调地狱，代码难以维护， 常常第一个的函数的输出是第二个函数的输入这种现象</p></li><li><p>promise 可以支持多个并发的请求，获取并发请求中的数据</p></li><li><p>这个 promise 可以解决异步的问题，本身不能说 promise 是异步的</p></li></ul><p>基本用法</p><p>构造 promise 实例，然后调用 .then.then.then 的编写代码方式，就是 promise。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 调用Promise构造函数</span><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 做一些事情</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果p的状态被resolve了，就进入这里</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果p的状态被reject</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 调用 Promise 对象的then方法，两个参数为函数</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 成功</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>season<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 失败</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>season<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>声明一个Promise对象</p><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 这两个方法主要是用来修改状态的</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"开始求婚。"</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"。。。。。"</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"考虑一下。"</span><span class="token punctuation">)</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isHandsome <span class="token operator">||</span> isRich<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 当我们调用 resolve 函数的时候，Promise 的状态就变成 resolved</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'我同意！'</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 当我们调用 reject 函数的时候，Promise 的状态就变成 reject</span>            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">"拒绝：我们八字不合"</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 如果一个 promise 已经被兑现（resolved）或被拒绝（rejected），那么我们也可以说它处于已敲定（settled）状态。</span></code></pre><p>Promise.prototype.catch()方法 用来捕获Promise的错误</p><p>和then的第二个参数一样，用来指定reject的回调，用法：</p><p>在执行resolve的回调时，也就是then的第一个参数时，如果抛出异常了（出错了），那么并不会报错卡死js，而是会进到这个catch方法中</p><pre class=" language-js"><code class="language-js">promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'this is success callback!'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span> <span class="token punctuation">(</span>    <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>Promise.all()方法：可以并行的执行异步操作，并且在一个回调中处理所有的返回数据，在所有异步操作执行完后才执行回调。</p><pre class=" language-js"><code class="language-js">Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">runAsync1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">runAsync2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">runAsync3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>手撕promise.all代码题</p><p>Promise.race()</p><p>OSI七层模型</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typescript-李立超老师</title>
      <link href="/2023/06/05/typescript-li-li-chao-lao-shi/"/>
      <url>/2023/06/05/typescript-li-li-chao-lao-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="typescript"><a href="#typescript" class="headerlink" title="typescript"></a>typescript</h1><h2 id="TypeScript中的基本类型"><a href="#TypeScript中的基本类型" class="headerlink" title="TypeScript中的基本类型"></a><strong>TypeScript中的基本类型</strong></h2><ul><li><p>类型声明</p><ul><li><p>类型声明是TS非常重要的一个特点；</p></li><li><p>通过类型声明可以指定TS中变量（参数、形参）的类型；</p></li><li><p>指定类型后，当为变量赋值时，TS编译器会自动检查值是否符合类型声明，符合则赋值，否则报错；</p></li><li><p>简而言之，类型声明给变量设置了类型，使得变量只能存储某种类型的值；</p></li><li><p>语法：</p><ul><li><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> 变量<span class="token punctuation">:</span> 类型<span class="token punctuation">;</span><span class="token keyword">let</span> 变量<span class="token punctuation">:</span> 类型 <span class="token operator">=</span> 值<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>参数<span class="token punctuation">:</span> 类型<span class="token punctuation">,</span> 参数<span class="token punctuation">:</span> 类型<span class="token punctuation">)</span><span class="token punctuation">:</span> 类型<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">...</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ul></li></ul></li><li><p>自动类型判断</p><ul><li>TS拥有自动的类型判断机制</li><li>当对变量的声明和赋值是同时进行的，TS编译器会自动判断变量的类型</li><li>所以如果你的变量的声明和赋值时同时进行的，可以省略掉类型声明</li></ul></li><li><p>类型：</p><table><thead><tr><th align="center"><strong>类型</strong></th><th align="center"><strong>例子</strong></th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td align="center">number</td><td align="center">1, -33, 2.5</td><td align="center">任意数字</td></tr><tr><td align="center">string</td><td align="center">‘hi’, “hi”, <code>hi</code></td><td align="center">任意字符串</td></tr><tr><td align="center">boolean</td><td align="center">true、false</td><td align="center">布尔值true或false</td></tr><tr><td align="center">字面量</td><td align="center">其本身</td><td align="center">限制变量的值就是该字面量的值</td></tr><tr><td align="center">any</td><td align="center">*</td><td align="center">任意类型</td></tr><tr><td align="center">unknown</td><td align="center">*</td><td align="center">类型安全的any</td></tr><tr><td align="center">void</td><td align="center">空值（undefined）</td><td align="center">没有值（或undefined）</td></tr><tr><td align="center">never</td><td align="center">没有值</td><td align="center">不能是任何值</td></tr><tr><td align="center">object</td><td align="center">{name:’孙悟空’}</td><td align="center">任意的JS对象</td></tr><tr><td align="center">array</td><td align="center">[1,2,3]</td><td align="center">任意JS数组</td></tr><tr><td align="center">tuple</td><td align="center">[4,5]</td><td align="center">元素，TS新增类型，固定长度数组</td></tr><tr><td align="center">enum</td><td align="center">enum{A, B}</td><td align="center">枚举，TS中新增类型</td></tr></tbody></table></li><li><p>number</p><ul><li><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> decimal<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token keyword">let</span> hex<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0xf00d</span><span class="token punctuation">;</span><span class="token keyword">let</span> binary<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0b1010</span><span class="token punctuation">;</span><span class="token keyword">let</span> octal<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0o744</span><span class="token punctuation">;</span><span class="token keyword">let</span> big<span class="token punctuation">:</span> bigint <span class="token operator">=</span> 100n<span class="token punctuation">;</span></code></pre></li></ul></li><li><p>boolean</p><ul><li><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> isDone<span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>string</p><ul><li><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> color<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">"blue"</span><span class="token punctuation">;</span>color <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span><span class="token keyword">let</span> fullName<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token template-string"><span class="token string">`Bob Bobbington`</span></span><span class="token punctuation">;</span><span class="token keyword">let</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">37</span><span class="token punctuation">;</span><span class="token keyword">let</span> sentence<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token template-string"><span class="token string">`Hello, my name is $&amp;#123;fullName&amp;#125;.I'll be $&amp;#123;age + 1&amp;#125; years old next month.`</span></span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>字面量</p><ul><li><p>也可以使用字面量去指定变量的类型，通过字面量可以确定变量的取值范围</p></li><li><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> color<span class="token punctuation">:</span> <span class="token string">'red'</span> <span class="token operator">|</span> <span class="token string">'blue'</span> <span class="token operator">|</span> <span class="token string">'black'</span><span class="token punctuation">;</span><span class="token keyword">let</span> num<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">4</span> <span class="token operator">|</span> <span class="token number">5</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>any</p><ul><li><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> d<span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>d <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>d <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>unknown</p><ul><li><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> notSure<span class="token punctuation">:</span> unknown <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>notSure <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>void</p><ul><li><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> unusable<span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token operator">=</span> undefined<span class="token punctuation">;</span></code></pre></li></ul></li><li><p>never</p><ul><li><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">error</span><span class="token punctuation">(</span>message<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> never <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>object（没啥用）</p><ul><li><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> obj<span class="token punctuation">:</span> object <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>array</p><ul><li><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> list<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> list<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>tuple</p><ul><li><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> x<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> </code></pre></li></ul></li><li><p>enum</p><ul><li><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> Color <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  Red<span class="token punctuation">,</span>  Green<span class="token punctuation">,</span>  Blue<span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> c<span class="token punctuation">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>Green<span class="token punctuation">;</span><span class="token keyword">enum</span> Color <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  Red <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>  Green<span class="token punctuation">,</span>  Blue<span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> c<span class="token punctuation">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>Green<span class="token punctuation">;</span><span class="token keyword">enum</span> Color <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  Red <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>  Green <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>  Blue <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> c<span class="token punctuation">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>Green<span class="token punctuation">;</span></code></pre></li></ul></li><li><p>类型断言</p><ul><li><p>有些情况下，变量的类型对于我们来说是很明确，但是TS编译器却并不清楚，此时，可以通过类型断言来告诉编译器变量的类型，断言有两种形式：</p><ul><li><p>第一种</p><ul><li><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> someValue<span class="token punctuation">:</span> unknown <span class="token operator">=</span> <span class="token string">"this is a string"</span><span class="token punctuation">;</span><span class="token keyword">let</span> strLength<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span>someValue as <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span></code></pre></li></ul></li><li><p>第二种</p><ul><li><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> someValue<span class="token punctuation">:</span> unknown <span class="token operator">=</span> <span class="token string">"this is a string"</span><span class="token punctuation">;</span><span class="token keyword">let</span> strLength<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span>someValue<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span></code></pre></li></ul></li></ul></li></ul></li></ul><h2 id="编译选项"><a href="#编译选项" class="headerlink" title="编译选项"></a>编译选项</h2><h3 id="自动编译文件"><a href="#自动编译文件" class="headerlink" title="自动编译文件"></a>自动编译文件</h3><p>编译文件时，使用 -w 指令后，TS编译器会自动监视文件的变化，并在文件发生变化时对文件进行重新编译。</p><p>示例：</p><pre class=" language-powershell"><code class="language-powershell">  tsc xxx<span class="token punctuation">.</span>ts <span class="token operator">-</span>w</code></pre><h3 id="自动编译整个项目"><a href="#自动编译整个项目" class="headerlink" title="自动编译整个项目"></a>自动编译整个项目</h3><p>如果直接使用tsc指令，则可以自动将当前项目下的所有ts文件编译为js文件。</p><p><strong>但是能直接使用tsc命令的前提时，要先在项目根目录下创建一个ts的配置文件 tsconfig.json</strong></p><p>tsconfig.json是一个JSON文件，添加配置文件后，只需只需 tsc 命令即可完成对整个项目的编译</p><p>配置选项：</p><h4 id="include"><a href="#include" class="headerlink" title="include"></a><strong>include</strong></h4><ul><li>定义希望被编译文件所在的目录</li><li>默认值：[“**&#x2F;*“]</li></ul><p>示例：</p><pre class=" language-json"><code class="language-json">  <span class="token property">"include"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"src/**/*"</span><span class="token punctuation">,</span> <span class="token string">"tests/**/*"</span><span class="token punctuation">]</span></code></pre><p>上述示例中，所有src目录和tests目录下的文件都会被编译</p><h4 id="exclude"><a href="#exclude" class="headerlink" title="exclude"></a><strong>exclude</strong></h4><ul><li>定义需要排除在外的目录</li><li>默认值：[“node_modules”, “bower_components”, “jspm_packages”]</li></ul><p>示例：</p><pre class=" language-json"><code class="language-json">  <span class="token property">"exclude"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/hello/**/*"</span><span class="token punctuation">]</span></code></pre><p>上述示例中，src下hello目录下的文件都不会被编译</p><h4 id="extends"><a href="#extends" class="headerlink" title="extends"></a><strong>extends</strong></h4><ul><li>定义被继承的配置文件</li></ul><p>示例：</p><pre class=" language-json"><code class="language-json"><span class="token property">"extends"</span><span class="token operator">:</span> <span class="token string">"./configs/base"</span></code></pre><p>上述示例中，当前配置文件中会自动包含config目录下base.json中的所有配置信息</p><h4 id="files"><a href="#files" class="headerlink" title="files"></a><strong>files</strong></h4><ul><li>指定被编译文件的列表，<strong>只有需要编译的文件少时才会用到</strong></li></ul><p>示例：</p><pre class=" language-json"><code class="language-json"><span class="token property">"files"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"core.ts"</span><span class="token punctuation">,</span>    <span class="token string">"sys.ts"</span><span class="token punctuation">,</span>    <span class="token string">"types.ts"</span><span class="token punctuation">,</span>    <span class="token string">"scanner.ts"</span><span class="token punctuation">,</span>    <span class="token string">"parser.ts"</span><span class="token punctuation">,</span>    <span class="token string">"utilities.ts"</span><span class="token punctuation">,</span>    <span class="token string">"binder.ts"</span><span class="token punctuation">,</span>    <span class="token string">"checker.ts"</span><span class="token punctuation">,</span>    <span class="token string">"tsc.ts"</span>  <span class="token punctuation">]</span></code></pre><ul><li>列表中的文件都会被TS编译器所编译</li></ul><h4 id="compilerOptions"><a href="#compilerOptions" class="headerlink" title="compilerOptions"></a>compilerOptions</h4><ul><li>编译选项是配置文件中非常重要也比较复杂的配置选项</li><li>在compilerOptions中包含多个子选项，用来完成对编译的配置</li></ul><p>项目选项：</p><ul><li><p>target</p><ul><li><p>设置ts代码编译的目标版本</p></li><li><p>可选值：</p><ul><li>ES3（默认）、ES5、ES6&#x2F;ES2015、ES7&#x2F;ES2016、ES2017、ES2018、ES2019、ES2020、ESNext</li></ul></li><li><p>示例：</p><ul><li><pre class=" language-json"><code class="language-json"><span class="token property">"compilerOptions"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"ES6"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>如上设置，我们所编写的ts代码将会被编译为ES6版本的js代码</p></li></ul></li><li><p>lib</p><ul><li><p>指定代码运行时所包含的库（宿主环境）</p></li><li><p>可选值：</p><ul><li>ES5、ES6&#x2F;ES2015、ES7&#x2F;ES2016、ES2017、ES2018、ES2019、ES2020、ESNext、DOM、WebWorker、ScriptHost ……</li></ul></li><li><p>示例：</p><ul><li><pre class=" language-json"><code class="language-json"><span class="token property">"compilerOptions"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"ES6"</span><span class="token punctuation">,</span>    <span class="token property">"lib"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"ES6"</span><span class="token punctuation">,</span> <span class="token string">"DOM"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"dist"</span><span class="token punctuation">,</span>    <span class="token property">"outFile"</span><span class="token operator">:</span> <span class="token string">"dist/aa.js"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ul></li></ul></li><li><p>module</p><ul><li><p>设置编译后代码使用的模块化系统</p></li><li><p>可选值：</p><ul><li>CommonJS、UMD、AMD、System、ES2020、ESNext、None</li></ul></li><li><p>示例：</p><ul><li><pre class=" language-typescript"><code class="language-typescript"><span class="token string">"compilerOptions"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token string">"module"</span><span class="token punctuation">:</span> <span class="token string">"CommonJS"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ul></li></ul></li><li><p>outDir</p><ul><li><p>编译后文件的所在目录</p></li><li><p>默认情况下，编译后的js文件会和ts文件位于相同的目录，设置outDir后可以改变编译后文件的位置</p></li><li><p>示例：</p><ul><li><pre class=" language-json"><code class="language-json"><span class="token property">"compilerOptions"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"dist"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li><li><p>设置后编译后的js文件将会生成到dist目录</p></li></ul></li></ul></li><li><p>outFile</p><ul><li><p>将所有的文件编译为一个js文件</p></li><li><p>默认会将所有的编写在全局作用域中的代码合并为一个js文件，如果module制定了None、System或AMD则会将模块一起合并到文件之中</p></li><li><p>示例：</p><ul><li><pre class=" language-json"><code class="language-json"><span class="token property">"compilerOptions"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"outFile"</span><span class="token operator">:</span> <span class="token string">"dist/app.js"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ul></li></ul></li><li><p>rootDir</p><ul><li><p>指定代码的根目录，默认情况下编译后文件的目录结构会以最长的公共目录为根目录，通过rootDir可以手动指定根目录</p></li><li><p>示例：</p><ul><li><pre class=" language-json"><code class="language-json"><span class="token property">"compilerOptions"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"rootDir"</span><span class="token operator">:</span> <span class="token string">"./src"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ul></li></ul></li><li><p>allowJs</p><ul><li>是否对js文件编译</li></ul></li><li><p>checkJs</p><ul><li><p>是否对js文件进行检查</p></li><li><p>示例：</p><ul><li><pre class=" language-json"><code class="language-json"><span class="token property">"compilerOptions"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"allowJs"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"checkJs"</span><span class="token operator">:</span> <span class="token boolean">true</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ul></li></ul></li><li><p>removeComments</p><ul><li>是否删除注释</li><li>默认值：false</li></ul></li><li><p>noEmit</p><ul><li>不对代码进行编译</li><li>默认值：false</li></ul></li><li><p>sourceMap</p><ul><li>是否生成sourceMap</li><li>默认值：false</li></ul></li><li><p>严格检查</p><ul><li>strict<ul><li>启用所有的严格检查，默认值为true，设置后相当于开启了所有的严格检查</li></ul></li><li>alwaysStrict<ul><li>总是以严格模式对代码进行编译</li></ul></li><li>noImplicitAny<ul><li>禁止隐式的any类型</li></ul></li><li>noImplicitThis<ul><li>禁止类型不明确的this</li></ul></li><li>strictBindCallApply<ul><li>严格检查bind、call和apply的参数列表</li></ul></li><li>strictFunctionTypes<ul><li>严格检查函数的类型</li></ul></li><li>strictNullChecks<ul><li>严格的空值检查</li></ul></li><li>strictPropertyInitialization<ul><li>严格检查属性是否初始化</li></ul></li></ul></li><li><p>额外检查</p><ul><li>noFallthroughCasesInSwitch<ul><li>检查switch语句包含正确的break</li></ul></li><li>noImplicitReturns<ul><li>检查函数没有隐式的返回值</li></ul></li><li>noUnusedLocals<ul><li>检查未使用的局部变量</li></ul></li><li>noUnusedParameters<ul><li>检查未使用的参数</li></ul></li></ul></li><li><p>高级</p><ul><li>allowUnreachableCode<ul><li>检查不可达代码</li><li>可选值：<ul><li>true，忽略不可达代码</li><li>false，不可达代码将引起错误</li></ul></li></ul></li><li>noEmitOnError<ul><li>有错误的情况下不进行编译</li><li>默认值：false</li></ul></li></ul></li></ul><h2 id="TypeScript打包"><a href="#TypeScript打包" class="headerlink" title="TypeScript打包"></a>TypeScript打包</h2><h3 id="webpack整合"><a href="#webpack整合" class="headerlink" title="webpack整合"></a>webpack整合</h3><p>通常情况下，实际开发中我们都需要使用构建工具对代码进行打包；</p><p>TS同样也可以结合构建工具一起使用，下边以webpack为例介绍一下如何结合构建工具使用TS；</p><p>步骤如下：</p><h4 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h4><p>进入项目根目录，执行命令 <code> npm init -y</code>，创建package.json文件（管理我们的项目）</p><h4 id="下载构建工具"><a href="#下载构建工具" class="headerlink" title="下载构建工具"></a>下载构建工具</h4><p>命令如下：</p><p><code>npm i -D webpack webpack-cli webpack-dev-server typescript ts-loader clean-webpack-plugin html-webpack-plugin</code></p><p>共安装了7个包:</p><ul><li>webpack：构建工具webpack</li><li>webpack-cli：webpack的命令行工具</li><li>webpack-dev-server：webpack的开发服务器</li><li>typescript：ts编译器</li><li>ts-loader：ts加载器，用于在webpack中编译ts文件</li><li>html-webpack-plugin：webpack中html插件，用来自动创建html文件</li><li>clean-webpack-plugin：webpack中的清除插件，每次构建都会先清除目录</li></ul><h4 id="配置webpack"><a href="#配置webpack" class="headerlink" title="配置webpack"></a>配置webpack</h4><p>根目录下创建webpack的配置文件<code>webpack.config.js</code>：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 引入一个包 nodejs中的一个模块，帮助我们拼接路径</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> CleanWebpackPlugin <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"clean-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// webpack中的所有的配置信息都应该写在module.exports中</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   optimization<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       minimize<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// 关闭代码压缩，可选</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 指定入口文件</span>   entry<span class="token punctuation">:</span> <span class="token string">"./src/index.ts"</span><span class="token punctuation">,</span>   devtool<span class="token punctuation">:</span> <span class="token string">"inline-source-map"</span><span class="token punctuation">,</span>   devServer<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       contentBase<span class="token punctuation">:</span> <span class="token string">'./dist'</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 指定打包文件所在目录</span>   output<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 指定打包文件的目录</span>       path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token comment" spellcheck="true">// 打包后文件的文件</span>       filename<span class="token punctuation">:</span> <span class="token string">"bundle.js"</span><span class="token punctuation">,</span>              environment<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           arrowFunction<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// 关闭webpack的箭头函数，可选</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>   resolve<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">".ts"</span><span class="token punctuation">,</span> <span class="token string">".js"</span><span class="token punctuation">]</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 指定webpack打包时要使用模块</span>   module<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 指定要加载的规则</span>       rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>           <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               test<span class="token punctuation">:</span> <span class="token regex">/\.ts$/</span><span class="token punctuation">,</span>               use<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                   loader<span class="token punctuation">:</span> <span class="token string">"ts-loader"</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>               exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span>           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token punctuation">]</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>   plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>       <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           title<span class="token punctuation">:</span><span class="token string">'TS测试'</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="配置TS编译选项"><a href="#配置TS编译选项" class="headerlink" title="配置TS编译选项"></a>配置TS编译选项</h4><p>根目录下创建tsconfig.json，配置可以根据自己需要</p><pre class=" language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token property">"compilerOptions"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"ES2015"</span><span class="token punctuation">,</span>       <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"ES2015"</span><span class="token punctuation">,</span>       <span class="token property">"strict"</span><span class="token operator">:</span> <span class="token boolean">true</span>   &amp;#<span class="token number">125</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="修改package-json配置"><a href="#修改package-json配置" class="headerlink" title="修改package.json配置"></a>修改package.json配置</h4><p>修改package.json添加如下配置</p><pre class=" language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span>   ...   <span class="token property">"scripts"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="token punctuation">,</span>       <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"webpack"</span><span class="token punctuation">,</span>       <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"webpack serve --open chrome.exe"</span>   &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>   ...&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="项目使用"><a href="#项目使用" class="headerlink" title="项目使用"></a>项目使用</h4><p>在src下创建ts文件，并在并命令行执行<code>npm run build</code>对代码进行编译；</p><p>或者执行<code>npm start</code>来启动开发服务器；</p><br/><h3 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h3><p>除了webpack，开发中还经常需要结合babel来对代码进行转换；</p><p>以使其可以兼容到更多的浏览器，在上述步骤的基础上，通过以下步骤再将babel引入到项目中；</p><blockquote><p>  虽然TS在编译时也支持代码转换，但是只支持简单的代码转换；</p><p>  对于例如：Promise等ES6特性，TS无法直接转换，这时还要用到babel来做转换；</p></blockquote><p>安装依赖包：</p><p>   <code>npm i -D @babel/core @babel/preset-env babel-loader core-js</code></p><p>共安装了4个包，分别是：</p><ul><li><p>@babel&#x2F;core：babel的核心工具</p></li><li><p>@babel&#x2F;preset-env：babel的预定义环境</p></li><li><p>@babel-loader：babel在webpack中的加载器</p></li><li><p>core-js：core-js用来使老版本的浏览器支持新版ES语法</p></li></ul><p>修改webpack.config.js配置文件</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">...</span>module<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            test<span class="token punctuation">:</span> <span class="token regex">/\.ts$/</span><span class="token punctuation">,</span>            use<span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    loader<span class="token punctuation">:</span> <span class="token string">"babel-loader"</span><span class="token punctuation">,</span>                    options<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        presets<span class="token punctuation">:</span> <span class="token punctuation">[</span>                            <span class="token punctuation">[</span>                                <span class="token string">"@babel/preset-env"</span><span class="token punctuation">,</span>                                <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                                    <span class="token string">"targets"</span><span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                                        <span class="token string">"chrome"</span><span class="token punctuation">:</span> <span class="token string">"58"</span><span class="token punctuation">,</span>                                        <span class="token string">"ie"</span><span class="token punctuation">:</span> <span class="token string">"11"</span>                                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>                                    <span class="token string">"corejs"</span><span class="token punctuation">:</span><span class="token string">"3"</span><span class="token punctuation">,</span>                                    <span class="token string">"useBuiltIns"</span><span class="token punctuation">:</span> <span class="token string">"usage"</span>                                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                            <span class="token punctuation">]</span>                        <span class="token punctuation">]</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>                <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    loader<span class="token punctuation">:</span> <span class="token string">"ts-loader"</span><span class="token punctuation">,</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">...</span></code></pre><p>如此一来，使用ts编译后的文件将会再次被babel处理；</p><p>使得代码可以在大部分浏览器中直接使用；</p><p>同时可以在配置选项的targets中指定要兼容的浏览器版本；</p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>要想面向对象，操作对象，首先便要拥有对象；</p><p>要创建对象，必须要先定义类，所谓的类可以理解为对象的模型；</p><p>程序中可以根据类创建指定类型的对象；</p><p>举例来说：</p><p>可以通过Person类来创建人的对象，通过Dog类创建狗的对象，不同的类可以用来创建不同的对象；</p><h3 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> 类名 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    属性名<span class="token punctuation">:</span> 类型<span class="token punctuation">;</span>        <span class="token keyword">constructor</span><span class="token punctuation">(</span>参数<span class="token punctuation">:</span> 类型<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>属性名 <span class="token operator">=</span> 参数<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">方法名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token operator">...</span><span class="token punctuation">.</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>示例：</p><pre class=" language-typescript"><code class="language-typescript">    <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>        age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>            <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`大家好，我是$&amp;#123;this.name&amp;#125;`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>使用类：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'孙悟空'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>可以使用<code>constructor</code>定义一个构造器方法；</p><blockquote><p>  <strong>注1：在TS中只能有一个构造器方法！</strong></p></blockquote><p>例如：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    age<span class="token punctuation">:</span> <span class="token keyword">number</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>同时也可以直接将属性定义在构造函数中：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">public</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>上面两种定义方法是完全相同的！</p><p><strong>注2：子类继承父类时，必须调用父类的构造方法（如果子类中也定义了构造方法）！</strong></p><p>例如：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> num<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>num<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> num<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">X</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>num<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>如果在X类中不调用<code>super</code>将会报错！</p><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>对象实质上就是属性和方法的容器，它的主要作用就是存储属性和方法，这就是所谓的封装</p><p>默认情况下，对象的属性是可以任意的修改的，为了确保数据的安全性，在TS中可以对属性的权限进行设置</p><ul><li><p>静态属性（static）：</p><ul><li>声明为static的属性或方法不再属于实例，而是属于类的属性；</li></ul></li><li><p>只读属性（readonly）：</p><ul><li>如果在声明属性时添加一个readonly，则属性便成了只读属性无法修改</li></ul></li><li><p>TS中属性具有三种修饰符：</p><ul><li>public（默认值），可以在类、子类和对象中修改</li><li>protected ，可以在类、子类中修改</li><li>private ，可以在类中修改</li></ul></li></ul><p>示例：</p><p>public：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 写或什么都不写都是public</span>    <span class="token keyword">public</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可以在类中修改</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`大家好，我是$&amp;#123;this.name&amp;#125;`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//子类中可以修改</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'孙悟空'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'猪八戒'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 可以通过对象修改</span></code></pre><p>protected：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可以修改</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`大家好，我是$&amp;#123;this.name&amp;#125;`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//子类中可以修改</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'孙悟空'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'猪八戒'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 不能修改</span></code></pre><p>private：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可以修改</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`大家好，我是$&amp;#123;this.name&amp;#125;`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//子类中不能修改</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'孙悟空'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'猪八戒'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 不能修改</span></code></pre><h3 id="属性存取器"><a href="#属性存取器" class="headerlink" title="属性存取器"></a>属性存取器</h3><p>对于一些不希望被任意修改的属性，可以将其设置为private</p><p>直接将其设置为private将导致无法再通过对象修改其中的属性</p><p>我们可以在类中定义一组读取、设置属性的方法，这种对属性读取或设置的属性被称为属性的存取器</p><p>读取属性的方法叫做setter方法，设置属性的方法叫做getter方法</p><p>示例：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> _name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'孙悟空'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 实际通过调用getter方法读取name属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 实际通过调用setter方法修改name属性 </span>p1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'猪八戒'</span><span class="token punctuation">;</span> </code></pre><h3 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h3><p>静态属性（方法），也称为类属性。使用静态属性无需创建实例，通过类即可直接使用</p><p>静态属性（方法）使用static开头</p><p>示例：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Tools</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> PI <span class="token operator">=</span> <span class="token number">3.1415926</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token function">sum</span><span class="token punctuation">(</span>num1<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> num2<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Tools<span class="token punctuation">.</span>PI<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Tools<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p>在类中，使用this表示当前对象</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承时面向对象中的又一个特性</p><p>通过继承可以将其他类中的属性和方法引入到当前类中</p><p>示例：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`$&amp;#123;this.name&amp;#125;在汪汪叫！`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'旺财'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dog<span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>通过继承可以在不修改类的情况下完成对类的扩展</p><h3 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h3><p>发生继承时，如果子类中的方法会替换掉父类中的同名方法，这就称为方法的重写</p><p>示例：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`父类中的run方法！`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`$&amp;#123;this.name&amp;#125;在汪汪叫！`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`子类中的run方法，会重写父类中的run方法！`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'旺财'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dog<span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>在子类中可以使用super来完成对父类的引用</strong></p><h3 id="抽象类（abstract-class）"><a href="#抽象类（abstract-class）" class="headerlink" title="抽象类（abstract class）"></a>抽象类（abstract class）</h3><p>抽象类是专门用来被其他类所继承的类，它只能被其他类所继承不能用来创建实例</p><pre class=" language-typescript"><code class="language-typescript">abstract <span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  abstract <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>  <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'动物在叫~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animals</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'狗在跑~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>使用abstract开头的方法叫做抽象方法，抽象方法没有方法体只能定义在抽象类中，继承抽象类时抽象方法必须要实现;</p><h2 id="接口（Interface）"><a href="#接口（Interface）" class="headerlink" title="接口（Interface）"></a>接口（Interface）</h2><p>接口的作用类似于抽象类，不同点在于：接口中的所有方法和属性都是没有实值的，换句话说接口中的所有方法都是抽象方法；</p><p>接口主要负责定义一个类的结构，接口可以去限制一个对象的接口：对象只有包含接口中定义的所有属性和方法时才能匹配接口；</p><p>同时，可以让一个类去实现接口，实现接口时类中要保护接口中的所有属性；</p><p>示例（检查对象类型）：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Person</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>per<span class="token punctuation">:</span> Person<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    per<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span><span class="token string">'孙悟空'</span><span class="token punctuation">,</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Hello, 我是 $&amp;#123;this.name&amp;#125;`</span></span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>示例（实现）：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Person</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>   <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'大家好，我是'</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="泛型（Generic）"><a href="#泛型（Generic）" class="headerlink" title="泛型（Generic）"></a>泛型（Generic）</h2><p>定义一个函数或类时，有些情况下无法确定其中要使用的具体类型（返回值、参数、属性的类型不能确定）；</p><p>此时泛型便能够发挥作用；</p><p>举个例子：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>上例中，test函数有一个参数类型不确定，但是能确定的时其返回值的类型和参数的类型是相同的；</p><p>由于类型不确定所以参数和返回值均使用了any，但是很明显这样做是不合适的：</p><p>首先使用any会关闭TS的类型检查，其次这样设置也不能体现出参数和返回值是相同的类型；</p><h3 id="泛型函数"><a href="#泛型函数" class="headerlink" title="泛型函数"></a>泛型函数</h3><h4 id="创建泛型函数"><a href="#创建泛型函数" class="headerlink" title="创建泛型函数"></a>创建泛型函数</h4><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> test<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>这里的<code>&lt;T&gt;</code>就是泛型；</p><p>T是我们给这个类型起的名字（不一定非叫T），设置泛型后即可在函数中使用T来表示该类型；</p><p>所以泛型其实很好理解，就表示某个类型；</p><p>那么如何使用上边的函数呢？</p><h4 id="使用泛型函数"><a href="#使用泛型函数" class="headerlink" title="使用泛型函数"></a>使用泛型函数</h4><h5 id="方式一（直接使用）："><a href="#方式一（直接使用）：" class="headerlink" title="方式一（直接使用）："></a>方式一（直接使用）：</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></code></pre><p>使用时可以直接传递参数使用，类型会由TS自动推断出来，但有时编译器无法自动推断时还需要使用下面的方式</p><h5 id="方式二（指定类型）："><a href="#方式二（指定类型）：" class="headerlink" title="方式二（指定类型）："></a>方式二（指定类型）：</h5><pre class=" language-typescript"><code class="language-typescript">test<span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></code></pre><p>也可以在函数后手动指定泛型；</p><h4 id="函数中声明多个泛型"><a href="#函数中声明多个泛型" class="headerlink" title="函数中声明多个泛型"></a>函数中声明多个泛型</h4><p>可以同时指定多个泛型，泛型间使用逗号隔开：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> test<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> K<span class="token operator">></span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> T<span class="token punctuation">,</span> b<span class="token punctuation">:</span> K<span class="token punctuation">)</span><span class="token punctuation">:</span> K<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> b<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>test<span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用泛型时，完全可以将泛型当成是一个普通的类去使用；</p><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><p>类中同样可以使用泛型：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  prop<span class="token punctuation">:</span> T<span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>prop<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>prop <span class="token operator">=</span> prop<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="泛型继承"><a href="#泛型继承" class="headerlink" title="泛型继承"></a>泛型继承</h3><p>除此之外，也可以对泛型的范围进行约束</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">MyInter</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  length<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> test<span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">MyInter</span><span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> arg<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>使用T extends MyInter表示泛型T必须是MyInter的子类，不一定非要使用接口类和抽象类同样适用；</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网络部分复习</title>
      <link href="/2023/06/03/wang-luo-bu-fen-fu-xi/"/>
      <url>/2023/06/03/wang-luo-bu-fen-fu-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="TCP与UDP的区别"><a href="#TCP与UDP的区别" class="headerlink" title="TCP与UDP的区别"></a>TCP与UDP的区别</h3><p><strong>连接性</strong><br><strong>TCP是面向连接的协议</strong>，在收发数据前必须和对方建立可靠的连接，建立连接的3次握手、断开连接的4次挥手，为数据传输打下可靠基础;<strong>UDP是一个面向无连接的协议</strong>，数据传输前，源端和终端不建立连接，发送端尽可能快的将数据扔到网络上，接收端从消息队列中读取消息段。</p><p><strong>可靠性</strong><br><strong>TCP提供可靠交付的服务</strong>，传输过程中采用许多方法保证在连接上提供可靠的传输服务，如编号与确认、流量控制、计时器等，确保数据无差错，不丢失，不重复且按序到达;<strong>UDP使用尽可能最大努力交付，但不保证可靠交付</strong>。</p><p><strong>报文首部</strong><br>TCP报文首部有20个字节，额外开销大;<br>UDP报文首部只有8个字节，标题短，开销小。<br>TCP协议面向字节流，将应用层报文看成一串无结构的字节流，分解为多个TCP报文段传输后，在目的站重新装配;<br>UDP协议面向报文，不拆分应用层报文，只保留报文边界，一次发送一个报文，接收方去除报文首部后，原封不动将报文交给上层应用。</p><p><strong>吞吐量控制</strong><br>TCP拥塞控制、流量控制、重传机制、滑动窗口等机制保证传输质量;<br>UDP没有。</p><p><strong>双工性</strong><br>TCP只能点对点全双工通信;<br>UDP支持一对一、一对多、多对一和多对多的交互通信。</p><p>TCP协议的运行可划分为三个阶段：连接创建(connection establishment)、数据传送（data transfer）和连接终止（connection termination）</p><h3 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h3><p>将一个有向无环图(Directed Acyclic Graph简称DAG)进行排序进而得到一个有序的线性序列。</p><h3 id="Trie树"><a href="#Trie树" class="headerlink" title="Trie树"></a>Trie树</h3><p>Trie树又称为字典树和前缀树，它是一种树形结构，哈希树的变种，用于统计、排序和保存大量的字符串</p><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><p>哈希表不保存插入的顺序，不可以按照下标读取元素</p><p>哈希表的查询时间是hashmap.get(key)常数级的查询时间</p><h3 id="GPU渲染"><a href="#GPU渲染" class="headerlink" title="GPU渲染"></a>GPU渲染</h3><p>浏览器在处理下面的css的时候，会使用GPU渲染</p><p>transform（当3D变换的样式出现的时候会使用GPU加速）</p><p>opacity用于指定元素的透明度</p><p>filter修改所有图片的颜色为黑白</p><p>will-change告知浏览器该元素会有哪些变化，使得浏览器提前做好优化准备</p><h3 id="代码题目"><a href="#代码题目" class="headerlink" title="代码题目"></a>代码题目</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>p1<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1</span>    p2<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// undefined</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// then函数都是加在p1上面的，故只能传递p1里面的resolve值，当then函数加载p2上才能打印出p2里的resolve(2)里面的2</span></code></pre><p>谷歌浏览器中的开发工具导航栏显示说明</p><p>Sources是源代码,可以在里面添加断点,调试代码</p><p>Element是元素,可以看到网页的结构</p><p>console是控制台,是用来查看输出的</p><p>Network是网络,可以查看请求返回的数据</p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1 隐式转换 空数组转换为0 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 无 空对象转换成NaN NaN不等于任何东西</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 无 尽管数组内的元素相同，但是这是两个不同的对象</span></code></pre><p>js执行顺序：先执行同步，再执行微服务promise.then 再执行宏服务setTimeout</p><p>盒模型元素的clientWidth：content+padding</p><p>offsetWidth：content+padding+border</p><p>语义化标签：header头部信息</p><p>article定义独立的内容 address定义文档或者文章的作者&#x2F;拥有者的联系信息</p><p>二叉树中，节点个数比边数多1</p><p>css样式优先级</p><p>伪类选择器 eg :active  :checked  :disabled  …</p><p>伪元素选择器 eg  ::before  ::after</p><p>属性选择器</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 存在 title 属性的 &lt;a> 元素 */</span>a[title] &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> purple<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p>!important &gt; 内联样式 &gt; ID选择器 &gt; 类选择器（属性选择器、<strong>伪类选择器</strong>）&gt; 元素选择器（<strong>伪元素选择器</strong>）&gt; 通配符选择器</p><p>需要详细记得js中对数组的操作，map、slice、concat等操作不会改变原数组，改变数组的7个操作有：push、pop、shift、unshift、reverse、sort、splice</p><p><a href="https://blog.csdn.net/xiaolu567/article/details/126443943">(96条消息) 【牛客网-公司真题-前端入门篇】——奇安信秋招笔试-前端-卷1_奇安信笔试题库_小菜要变强的博客-CSDN博客</a></p><h1 id="整理面试知识体系"><a href="#整理面试知识体系" class="headerlink" title="整理面试知识体系"></a>整理面试知识体系</h1><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p><a href="https://juejin.cn/post/6844903936189530120#heading-19">我在9家大厂的前端校招offer心得 - 掘金 (juejin.cn)</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PicGo开发过程</title>
      <link href="/2023/06/01/picgo-kai-fa-guo-cheng/"/>
      <url>/2023/06/01/picgo-kai-fa-guo-cheng/</url>
      
        <content type="html"><![CDATA[<p> PicGo项目</p><ol><li>Main进程主要通过Node.js、Chromium和Native APIs来实现一些系统以及底层的操作，比如创建系统级别的菜单，操作剪贴板，创建APP的窗口等。</li><li>Renderer进程主要通过Chromium来实现APP的图形界面——就是平时我们熟悉的前端开发的部分，不过得到了electron给予的加强，一些Node的模块（比如fs）和一些在Main进程里能用的东西（比如Clipboard）也能在Render进程里使用。</li></ol><p><a href="https://molunerfinn.com/electron-vue-1/#electron-vue%E7%9A%84%E7%AE%80%E8%A6%81%E4%BB%8B%E7%BB%8D">Electron-vue开发实战0——Electron-vue入门 | MARKSZのBlog (molunerfinn.com)</a></p><p><a href="https://github.com/vbenjs/vue-vben-admin">vbenjs&#x2F;vue-vben-admin: A modern vue admin. It is based on Vue3, vite and TypeScript. It’s fast！ (github.com)</a></p><p><a href="https://picgo.github.io/PicGo-Doc/zh/guide/#%E5%BA%94%E7%94%A8%E6%88%AA%E5%9B%BE">PicGo is Here | PicGo</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 vue项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第26章 模块</title>
      <link href="/2023/06/01/di-26-zhang-mo-kuai/"/>
      <url>/2023/06/01/di-26-zhang-mo-kuai/</url>
      
        <content type="html"><![CDATA[<h1 id="第26章-模块"><a href="#第26章-模块" class="headerlink" title="第26章 模块"></a>第26章 模块</h1><h2 id="理解模块模式"><a href="#理解模块模式" class="headerlink" title="理解模块模式"></a>理解模块模式</h2><p>模块模式背后的思想 很简单：把逻辑分块，各自封装，相互独立，每个块自行决定对外暴露什么，同时自行决定引入执行哪 些外部代码。</p><h3 id="模块标识符"><a href="#模块标识符" class="headerlink" title="模块标识符"></a>模块标识符</h3><p>模块标识符是所有模块系统通用的概念。模块系统本质上是键&#x2F;值实体，其中每个模块都有个可用 于引用它的标识符。这个标识符在模拟模块的系统中可能是字符串，在原生实现的模块系统中可能是模 块文件的实际路径。每个模块都会与某个唯一的标识符关联，该标识符可用于检索模块。</p><h3 id="模块依赖"><a href="#模块依赖" class="headerlink" title="模块依赖"></a>模块依赖</h3><p>模块系统的核心是管理依赖。指定依赖的模块与周围的环境会达成一种契约。本地模块向模块系统 声明一组外部模块（依赖），这些外部模块对于当前模块正常运行是必需的。模块系统检视这些依赖， 进而保证这些外部模块能够被加载并在本地模块运行时初始化所有依赖。</p><h3 id="模块加载"><a href="#模块加载" class="headerlink" title="模块加载"></a>模块加载</h3><p>加载模块的概念派生自依赖契约。当一个外部模块被指定为依赖时，本地模块期望在执行它时，依 赖已准备好并已初始化。加载模块涉及执行其中的代码，但必须是在所有依赖都加载 并执行之后。如果浏览器没有收到依赖模块的代码，则必须发送请求并等待网络返回。收到模块代码之 后，浏览器必须确定刚收到的模块是否也有依赖。然后递归地评估并加载所有依赖，直到所有依赖模块 都加载完成。只有整个依赖图都加载完成，才可以执行入口模块。</p><h3 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h3><p>相互依赖的模块必须指定一个模块作为入口（entry point），这也是代码执行的起点。因为 JavaScript 是顺序执行的，并且是单线程的，所以代码必须有执行的起点。模块加载是“阻塞的”，这意味着前置操作必须完成才能执行后续操作。</p><h3 id="异步依赖"><a href="#异步依赖" class="headerlink" title="异步依赖"></a>异步依赖</h3><p>因为 JavaScript 可以异步执行，所以如果能按需加载就好了。换句话说，可以让 JavaScript 通知模块 系统在必要时加载新模块，并在模块加载完成后提供回调。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 在模块 A 里面</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">'moduleB'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>moduleB<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  moduleB<span class="token punctuation">.</span><span class="token function">doStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p>动态依赖</p><p>有些模块系统要求开发者在模块开始列出所有依赖，而有些模块系统则允许开发者在程序结构中动 态添加依赖。动态添加的依赖有别于模块开头列出的常规依赖，这些依赖必须在模块执行前加载完毕。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>loadCondition<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./moduleA'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> </code></pre><p>动态依赖可以支持更复杂的依赖关系，但代价是增加了对模块进行静态分析的难度。</p><h2 id="使用ES6之前的模块加载器"><a href="#使用ES6之前的模块加载器" class="headerlink" title="使用ES6之前的模块加载器"></a>使用ES6之前的模块加载器</h2><h3 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h3><p>CommonJS 模块定义需要使用 require()指定依赖，而使用 exports 对象定义自己的公共 API。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> moduleB <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./moduleB'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  stuff<span class="token punctuation">:</span> moduleB<span class="token punctuation">.</span><span class="token function">doStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span> </code></pre><p>请求模块会加载相应模块，而把模块赋值给变量也非常常见，但赋值给变量不是必需的。调用 require()意味着模块会原封不动地加载进来。</p><p>无论一个模块在 require()中被引用多少次，模块永远是单例。模块第一次加载后会被缓存，后续加载会取得缓存的模块。在 CommonJS 中，模块加载是模块系统执行的同步操作。</p><p>。。。</p><h3 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h3><p>。。。</p><h2 id="使用ES6模块"><a href="#使用ES6模块" class="headerlink" title="使用ES6模块"></a>使用ES6模块</h2><p>ECMAScript 6 模块是作为一整块 JavaScript 代码而存在的。带有 type&#x3D;”module”属性的script标签会告诉浏览器相关代码应该作为模块执行，而不是作为传统的脚本执行。模块可以嵌入在网页中， 也可以作为外部文件引入。</p><h3 id="模块加载-1"><a href="#模块加载-1" class="headerlink" title="模块加载"></a>模块加载</h3><p>ECMAScript 6 模块的独特之处在于，既可以通过浏览器原生加载，也可以与第三方加载器和构建工 具一起加载。</p><p>ES6 模块支持两种导出：命名导出和默认导出。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue核心</title>
      <link href="/2023/05/30/vue-he-xin/"/>
      <url>/2023/05/30/vue-he-xin/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue核心"><a href="#Vue核心" class="headerlink" title="Vue核心"></a>Vue核心</h1><p>插播一条：vscode中隐藏左侧文档栏：ctrl+b</p><h2 id="Vue简介"><a href="#Vue简介" class="headerlink" title="Vue简介"></a>Vue简介</h2><h3 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h3><p>英文官网: <a href="https://vuejs.org/">https://vuejs.org/</a></p><p>中文官网: <a href="https://cn.vuejs.org/">https://cn.vuejs.org/</a></p><h3 id="介绍与描述"><a href="#介绍与描述" class="headerlink" title="介绍与描述"></a>介绍与描述</h3><p>动态构建用户界面的渐进式 JavaScript 框架</p><p>构建用户界面：把数据通过某种办法变成用户界面</p><p>渐近式：Vue可以自底向上逐层的应用，简单应用只需要一个轻量小巧的核心库，复杂应用可以引入各式各样的Vue插件</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>遵循 MVVM 模式</p><p>编码简洁, 体积小, 运行效率高, 适合移动&#x2F;PC 端开发</p><p>它本身只关注 UI, 也可以引入其它第三方库开发项目</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>远程连接服务器</title>
      <link href="/2023/05/28/yuan-cheng-lian-jie-fu-wu-qi/"/>
      <url>/2023/05/28/yuan-cheng-lian-jie-fu-wu-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="远程连接服务器"><a href="#远程连接服务器" class="headerlink" title="远程连接服务器"></a>远程连接服务器</h1><h2 id="生成本地公钥"><a href="#生成本地公钥" class="headerlink" title="生成本地公钥"></a>生成本地公钥</h2><p>打开windows PowerShell，输入命令</p><pre><code>ssh-keygen -t rsa -C:\Users\邹阳</code></pre><p>一直enter，最后生成.ssh文件，其中含有id_rsa私钥id_rsa.pub公钥，在linux生成个人用户时需要使用该公钥创建用户（一般将该公钥发给服务器管理员）</p><h2 id="创建个人用户"><a href="#创建个人用户" class="headerlink" title="创建个人用户"></a>创建个人用户</h2><p>在连接好的linux中创建个人用户zy（这个一般是实验室服务器管理员执行）</p><pre class=" language-linux"><code class="language-linux">// 方式一 (useradd只是创建了一个用户名，并没有在home目录下创建同名文件夹，也没有创建密码，所以需要加上 -m 和 -p)sudo useradd -m 用户名 -p 密码// 方式二 （推荐 在/home目录下会自动创建同名文件夹）sudo adduser 用户名</code></pre><h2 id="连接个人用户"><a href="#连接个人用户" class="headerlink" title="连接个人用户"></a>连接个人用户</h2><h3 id="生成密钥对"><a href="#生成密钥对" class="headerlink" title="生成密钥对"></a>生成密钥对</h3><p>linux私钥生成过程</p><pre><code>1、ssh-keygen -t rsa -b 4096 (这里-b指定了长度，也可以不添加-b参数)2、之后会在/home/zy/.ssh目录中生成两个文件：id_rsa和id_rsa.pub</code></pre><h3 id="检查文件"><a href="#检查文件" class="headerlink" title="检查文件"></a>检查文件</h3><pre><code>// 进入.ssh文件 看authorized_keys文件是否存在，如果有不用操作，没有则创建一个，将id_rsa追加进去。cd .sshtouch authorized_keyscat id_rsa.pub &gt;&gt; authorized_keys  </code></pre><h3 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h3><pre><code>// 修改.ssh的权限为700 读写执行的权力chmod 700 /home/nams/.ssh // authorized_keys的权限为600 读写的权利chmod 600 /home/name/.ssh/authorized_keys</code></pre><h3 id="连接服务器方式"><a href="#连接服务器方式" class="headerlink" title="连接服务器方式"></a>连接服务器方式</h3><p>1）下载finalShell</p><p>使用日常用户：zy </p><p>服务器ip：202.117.21.53 （型号：RTX 3090）</p><p>不使用密码登录，使用私钥登录，这里的私钥可以是本地在windows上面生成的私钥，也可以是linux上面创建了个人用户之后生成的私钥</p><p>ps: 注意本地的私钥要求是pem格式，因此如果要用本地的私钥需要进行转换，转换过程就是在终端中输入如下命令（这里zyy是之前对id_rsa的副本）那么转换后的私钥就是zyy，可以在finalshell中使用了，在finalshell中使用的好处就是可以不用每次在终端登录时输入ip</p><pre><code>ssh-keygen -p -m PEM -f C:\Users\邹阳\.ssh\zyy</code></pre><p>2）windows终端或者git bash连接</p><pre><code>ssh zy@202.117.21.53  // ssh用户名@服务器IP地址</code></pre><p>之后回车登录成功</p><h3 id="连接winSCP"><a href="#连接winSCP" class="headerlink" title="连接winSCP"></a>连接winSCP</h3><p>主要用于本地机器与服务器之间传递文件</p><p>需要用户名（服务器上账号） 主机名（服务器IP地址）私钥（ppk格式，使用本地的私钥或者服务器上私钥然后转换成ppk格式即可）登录</p><h2 id="获取个人账户私钥"><a href="#获取个人账户私钥" class="headerlink" title="获取个人账户私钥"></a>获取个人账户私钥</h2><pre><code>// 方法一：linux中复制 （推荐）然后本地新建一个文件，将复制的内容粘贴到该文件cat id_rsa// 方法二：使用winSCP连接到服务器然后下载文件</code></pre><h2 id="VSCode下连接"><a href="#VSCode下连接" class="headerlink" title="VSCode下连接"></a>VSCode下连接</h2><p>下载remote ssh插件</p><p>点击SSH后面的设置按钮 选择进入config，然后进行配置</p><pre><code># Read more about SSH config files: https://linux.die.net/man/5/ssh_configHost server    // hostname表示IP地址    HostName 10.181.14.168     // user表示用户名    User zy    // 表示个人用户的私钥    IdentityFile C:\Users\邹阳\.ssh\id_rsa</code></pre><p>保存之后进行连接</p><p>问题：</p><p>过程试图写入的管道不存在</p><p>解决：</p><p>1、仔细检查自己的配置</p><p>2、删除掉known_hosts文件（在config文件夹中）</p><p>3、不使用OPENSSH，而是使用git的ssh（在Git\usr\bin\ssh中)</p><p>成功解决</p><p>连接成功之后左下角会显示自己当前已经连接的主机名，可以看到绿色的连接成功标志</p><p>文件也与远程端口的文件同步</p><h2 id="配置服务器tensorflow环境"><a href="#配置服务器tensorflow环境" class="headerlink" title="配置服务器tensorflow环境"></a>配置服务器tensorflow环境</h2><p>1、推荐镜像下载anaconda3</p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/?C=M&O=D">Index of &#x2F;anaconda&#x2F;archive&#x2F; | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></p><p>如果下载不下来，可以使用其它镜像</p><p>2、在服务器中安装anaconda3</p><pre><code>bash Anaconda3-2022.05-Linux-x86_64.sh</code></pre><p>一路yes或者enter键安装，在这里需要注意的是：安装过程中有将path添加到环境变量中，选择yes，如果直接回车或者不添加则之后需要自己配置文件</p><p>3、检查是否安装成功</p><pre><code>conda --versionanaconda -Vpython -V(anaconda 自带的python版本)</code></pre><p>4、配置tensorflow环境</p><p>将清华源默认为下载源</p><pre><code>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/conda config --append channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/fastai/conda config --append channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/conda config --append channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/conda config --set show_channel_urls yes</code></pre><p>创建一个虚拟环境 tensorflow便于之后跑代码</p><pre><code>// 查看你的家目录下有哪些虚拟环境conda env list// 激活虚拟环境env1conda activate env1// 创建一个虚拟环境env1// python=xxx很重要 这代表了你的虚拟环境将会使用的python版本// 不指明的话就会默认使用anaconda里面的python版本，可能会导致后面的pytorch以及TensorFlow因为python版本原因而挂掉。// 如果指定的虚拟环境python版本和anaconda里面自带的版本不一样，那系统会帮你下载安装指定版本的python。conda create --name(-n) env1 python=xxx// 删除一个虚拟环境env1conda remove --name(-n) env1 --(俩-)all</code></pre><pre><code>// conda 会自动安装 cudnn、cudatoolkitconda install tensorflow-gpu==2.6.0</code></pre><p>5、测试GPU是否可用</p><pre><code>pythonimport tensorflow as tftf.test.is_gpu_available()</code></pre><p>7、通过vscode跑代码</p><p>下载python interpreter </p><p>在连接好服务器的页面，Ctrl+Shift+P打开面板命令：python：Select Interpreter，选择配置好的tensorflow 环境作为远程python解释器</p><p>之后运行远程项目即可</p><p>参考文章：</p><p><a href="https://blog.csdn.net/SevenBerry/article/details/129505504">(94条消息) vscode连接远程服务器 + Tensorflow2环境配置 + 深度学习训练_SevenBerry的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/hcmdcyl/article/details/126789229">(94条消息) 配置服务器pytorch&#x2F;TensorFlow环境+远程连接vscode_vscode中配置tensorflow__ccccyl_的博客-CSDN博客</a></p><h2 id="linux命令"><a href="#linux命令" class="headerlink" title="linux命令"></a>linux命令</h2><p>pwd当前路径</p><p>ls命令用于显示指定命令工作目录下的内容，列出目前工作目录所含文件和子目录</p>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 winSCP finalShell VSCode Linux windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CNN for sentence classification</title>
      <link href="/2023/05/26/cnn-for-sentence-classification/"/>
      <url>/2023/05/26/cnn-for-sentence-classification/</url>
      
        <content type="html"><![CDATA[<h1 id="Convolutional-Neural-Networks-for-Sentence-Classification"><a href="#Convolutional-Neural-Networks-for-Sentence-Classification" class="headerlink" title="Convolutional Neural Networks for Sentence Classification"></a>Convolutional Neural Networks for Sentence Classification</h1><p>2014年</p><h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><p><a href="https://www.bilibili.com/video/BV1H4411d7AA/?spm_id_from=333.337.search-card.all.click&vd_source=8536a8e0f7f03641eaba2d84d7583bd8">张文涛 - CNN for Text Classification_哔哩哔哩_bilibili</a></p><p>上面的视频进行了一个详细的概括。</p><img src='https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/Snipaste_2023-05-27_17-03-05.jpg'><p>这个架构与cnn的普通架构非常相似，但是在输入层不是图片的原始三维数据，而是单词的向量表示（word embedding）</p><p>$x_i$表示句子中的第i个单词k维的单词向量</p><p>长度为n的句子可以被表示为：$x_{1:n} &#x3D; x_1 \bigoplus x_2 \bigoplus … \bigoplus x_n$</p><p>卷积核（feature、filter）w：应用于一个由h个单词组成的窗口中来提取一个新的特征</p><p>例如：</p><p>从第i个单词到第i+h-1个单词提取到的特征为（即$c_i$是一个feature或者说是一个filter）：$c_i &#x3D; f(w·x_{i+h-1} + b)$</p><p>b表示偏置项，f是一个非线性的激活函数，将这样的一个filter应用到每个可能的窗口中（这些窗口由一个长度为n的句子组成，{ $ x_{1:h},x_{2:h+1},…,x_{n-h+1:n}$}），可以得到一个feature map { $C &#x3D; [c_1,c_2,…,c_{n-h+1}]$ }。</p><p>池化层使用max pooling（因为是时间维度的，也称为max-over-time pooling）{ $ \hat{c} &#x3D; max{ c}$ } （一个对应的卷积核生成一个$ \hat{c}$，所以如果有多个卷积核，就会对应多个$ \hat{c}$</p><p>全连接层：（其中添加了一个dropout）</p><p>${z &#x3D; \hat{c_1},…\hat{c_m}}$ </p><p>${y &#x3D; w\cdot(z \circ r)+b}$</p><p>${\circ}$：表示逐元素乘法 </p><p>dropout一般只使用在全连接层上,防止过拟合，只在训练的时候使用</p><p>（1）取平均的作用：先回到标准的模型即没有dropout，我们用相同的训练数据去训练5个不同的神经网络，一般会得到5个不同的结果，此时我们可以采用 “5个结果取均值”或者“多数取胜的投票策略”去决定最终结果。例如3个网络判断结果为数字9,那么很有可能真正的结果就是数字9，其它两个网络给出了错误结果。这种“综合起来取平均”的策略通常可以有效防止过拟合问题。因为不同的网络可能产生不同的过拟合，取平均则有可能让一些“相反的”拟合互相抵消。dropout掉不同的隐藏神经元就类似在训练不同的网络，随机删掉一半隐藏神经元导致网络结构已经不同，整个dropout过程就相当于对很多个不同的神经网络取平均。而不同的网络产生不同的过拟合，一些互为“反向”的拟合相互抵消就可以达到整体上减少过拟合。</p><p>（2）减少神经元之间复杂的共适应关系：因为dropout程序导致两个神经元不一定每次都在一个dropout网络中出现。这样权值的更新不再依赖于有固定关系的隐含节点的共同作用，阻止了某些特征仅仅在其它特定特征下才有效果的情况 。迫使网络去学习更加鲁棒的特征 ，这些特征在其它的神经元的随机子集中也存在。换句话说假如我们的神经网络是在做出某种预测，它不应该对一些特定的线索片段太过敏感，即使丢失特定的线索，它也应该可以从众多其它线索中学习一些共同的特征。从这个角度看dropout就有点像L1，L2正则，减少权重使得网络对丢失特定神经元连接的鲁棒性提高。</p><img src='https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/Snipaste_2023-05-28_14-54-33.jpg'><p>这篇文章的dropout层讲解详细</p><p><a href="https://zhuanlan.zhihu.com/p/59988106">《CNN for Sentence Classification》（textcnn）阅读笔记 - 知乎 (zhihu.com)</a></p><h2 id="coding"><a href="#coding" class="headerlink" title="coding"></a>coding</h2><p>代码：<a href="https://github.com/dennybritz/cnn-text-classification-tf">dennybritz&#x2F;cnn-text-classification-tf: Convolutional Neural Network for Text Classification in Tensorflow (github.com)</a></p><p>代码作者的blog：<a href="https://dennybritz.com/posts/wildml/implementing-a-cnn-for-text-classification-in-tensorflow/">Implementing a CNN for Text Classification in TensorFlow · Denny’s Blog (dennybritz.com)</a></p><h3 id="详情"><a href="#详情" class="headerlink" title="详情"></a>详情</h3><p>数据： <a href="http://www.cs.cornell.edu/people/pabo/movie-review-data/">Movie Review data from Rotten Tomatoes</a></p><p>包含10,662 句子评论 2万的单词量 </p><p>dev set：10%</p><p>原论文对数据集进行了10倍的交叉验证</p><h4 id="data-pre-processing-：data-helpers-py"><a href="#data-pre-processing-：data-helpers-py" class="headerlink" title="data pre-processing ：data_helpers.py"></a>data pre-processing ：data_helpers.py</h4><p>1、加载原始数据文件</p><p>2、使用与原始论文相同的代码清理文本数据。</p><p>3、填充每个句子的长度为59个单词长度，将特殊的<pad>标记附加到所有的其它句子中，使其成为59个单词</p><p>4、建立一个词汇索引，将每个词映射到0-18765之间的整数，每个句子成为一个整数的向量</p><h4 id="model："><a href="#model：" class="headerlink" title="model："></a>model：</h4><p>change：原论文是直接获取到了vord2vec词向量表示，这里从头开始学习嵌入</p><p>不对权重向量实施L2的规范约束（因为有一篇论文当中写明了这样的一个constraints对最终结果影响不大）</p><p>原论文中有两个数据通道（static and non-static） 这里只使用了1个</p><h4 id="Implement："><a href="#Implement：" class="headerlink" title="Implement："></a>Implement：</h4><p>这里涉及到tensorflow2.0的知识，建议所有的代码都在看完了6小时后的tensorflow课程之间进行学习</p><p><a href="https://www.bilibili.com/video/BV1B7411L7Qt?p=9&spm_id_from=pageDriver&vd_source=8536a8e0f7f03641eaba2d84d7583bd8">2.1-预备知识_哔哩哔哩_bilibili</a></p><p>课程笔记代码在c盘下的下载里面</p>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文 kimCNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CNN解读</title>
      <link href="/2023/05/26/cnn/"/>
      <url>/2023/05/26/cnn/</url>
      
        <content type="html"><![CDATA[<h1 id="CNN"><a href="#CNN" class="headerlink" title="CNN"></a>CNN</h1><h2 id="卷积层"><a href="#卷积层" class="headerlink" title="卷积层"></a>卷积层</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>将图片分割成不同的区域，对于每个小区域，它对应的特征是不一样的，选择一种计算方法，对每个小区域，它应该的特征值是等于多少的。</p><p>图像颜色通道</p><p>RGB（3 channel）所以一般来说cnn的输入是三维的，eg 32x32x3 （前两维是一张图像的像素大小，后一维是深度，表示3张图像，对应不同的通道）</p><img src='https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/Snipaste_2023-05-26_15-53-28.jpg'><p>卷积是可以多次操作的，可以在上一次卷积得到的结果下再次进行卷积，只要卷积的filter的第三维维度需要与input的第三维维度保持相同即可。</p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><h4 id="滑动窗口步长-stride"><a href="#滑动窗口步长-stride" class="headerlink" title="滑动窗口步长 stride"></a>滑动窗口步长 stride</h4><p>步长为1表示input中的窗口的移动的长度，移动越小，提取的特征细粒度越小，特征越丰富，常见：1</p><h4 id="卷积核尺寸"><a href="#卷积核尺寸" class="headerlink" title="卷积核尺寸"></a>卷积核尺寸</h4><p>filter的尺寸大小，3x3 4x4… 尺寸越小，细粒度越小，特征越丰富，常见：3 x 3</p><h4 id="边缘填充-zero-padding"><a href="#边缘填充-zero-padding" class="headerlink" title="边缘填充 zero-padding"></a>边缘填充 zero-padding</h4><p>pad：就是上图中那圈灰色的0部分，添加的原因：可以观察到在计算feature map的时候，中间的值可能会参与到多次的计算中，比如第一张图中的第二行第三列中的1，它参与了第一个特征计算，也参与了移动窗格后的特征计算，计算了两次，但是它左侧的1就只计算了1次，这样边缘的特征值的权重相当于小于中间的特征值，但是目前来说特征本身的重要性是没有区别的，所以需要增强边界特征值的参与，就边缘填充一圈0。</p><p>作用：弥补边界信息缺失，利用不充分的缺点</p><p>添加的次数人为定义</p><h4 id="卷积核个数"><a href="#卷积核个数" class="headerlink" title="卷积核个数"></a>卷积核个数</h4><p>表示想要得到的feature map的个数</p><h3 id="卷积结果计算公式"><a href="#卷积结果计算公式" class="headerlink" title="卷积结果计算公式"></a>卷积结果计算公式</h3><p>长度：$H_2 &#x3D; \frac{H_1 - F_H + 2P}{S} + 1$</p><p>宽度：$W_2 &#x3D; \frac{W_1 - F_W + 2P}{S} + 1$</p><p>W1、H1：输入的宽度、长度</p><p>W2、H2：输出特征图的宽度、长度</p><p>F：卷积核的长度核宽度</p><p>S：滑动窗口的步长</p><p>P：边界填充（加几圈）</p><h3 id="卷积参数共享"><a href="#卷积参数共享" class="headerlink" title="卷积参数共享"></a>卷积参数共享</h3><p>这里的卷积参数指的是卷积核中的数值，如果对于每个小区域都采用不同的卷积核，那么参数会非常大，并且会造成模型的过拟合，计算速度慢等问题，所以对于原图像中的每个小区域都采用相同的卷积核。</p><p>例如，input：32*32*3的图像 filter：10个5*5*3，所需的权重参数？</p><p>5x5x3 &#x3D; 75，表示每个卷积核只需要75个参数，此时有10个不同的卷积核，就需要750个参数，加上b参数，每个卷积核都应该对应一个偏置参数，最终只需要750+10 &#x3D; 760个权重参数。</p><h2 id="池化层"><a href="#池化层" class="headerlink" title="池化层"></a>池化层</h2><p>进行压缩，因为卷积层主要是提取特征（越多越好），但是并不是所有的特征都有用，且计算量庞大，所以引进池化层进行压缩，或者叫做downsampling（下采样）。</p><h3 id="最大池化-MAX-POOLING"><a href="#最大池化-MAX-POOLING" class="headerlink" title="最大池化 MAX POOLING"></a>最大池化 MAX POOLING</h3><img src='https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/Snipaste_2023-05-26_16-37-52.jpg'><h2 id="整体网络架构"><a href="#整体网络架构" class="headerlink" title="整体网络架构"></a>整体网络架构</h2><p>(CONV卷积层+RELU激活层) + (CONV+RELU) + POOL池化层 + (CONV+RELU) + (CONV+RELU) + POOL + FC(全连接层)</p><p>观察可知：一般conv都是紧跟relu层，且两个卷积之后就是一层池化，最后池化之后得到的也会是一个3维的数据，例如32x32x3，但是我们一般使用CNN来做分类，输出的数据不是我们想要的，所以需要进行全连接层的转化，全连接层需要输出的维度为（10240，k），k表示最后分类的类别数，10240是前面3维数据的拉长，因为全连接层不能接收一个3维的数据，所以将3维数据拉长，得到一个1维的但是大小为10240的数据。</p><p>只有带参数的才能称之为一层神经网络，conv和fc带参数，所以上述共有7层神经网络</p><h2 id="经典网络架构"><a href="#经典网络架构" class="headerlink" title="经典网络架构"></a>经典网络架构</h2><h3 id="Alexnet"><a href="#Alexnet" class="headerlink" title="Alexnet"></a>Alexnet</h3><h3 id="vgg"><a href="#vgg" class="headerlink" title="vgg"></a>vgg</h3><p>14年网络</p><p>卷积核基本是3x3 且层数基本是16或者19层，做出了一个改进，就是pool层之后特征被压缩了，但是他会通过将图像double翻倍（这里没有听太明白，之后看看论文再来填坑）来弥补掉那些损失的特征，所以改进之后的性能优势更大了，但是相对来说（对于Alexnet）跑的时间也会越来越长。</p><p>之后出现了一个情况，就是网络越深但是性能并没有更好，因为对于越深的网络它的特征可能损失比较明显，不能保证之后的性能更好，就是有些层并没有作用，反而可能有副作用，所以提出了一个解决方法：Resnet（残差网络，主要解决深层网络遇到的问题）</p><h3 id="Resnet"><a href="#Resnet" class="headerlink" title="Resnet"></a>Resnet</h3><p>15年，这个网络比较好，就是经过验证之后的baseline，最好是来做特征提取，不建议做成分类，因为一个问题是分类还是回归决定于损失函数和最后的层是怎么连接的。50多层和101层是比较常见的层数。</p><img src='https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/Snipaste_2023-05-26_17-05-14.jpg'><h2 id="感受野"><a href="#感受野" class="headerlink" title="感受野"></a>感受野</h2><img src='https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/Snipaste_2023-05-26_17-21-57.jpg'><p>相似的，可以得到如果有3个卷积层的话，那么它的感受野就是7x7的</p><p>根据感受野可以提出疑问：为什么不直接用7x7的卷积核，而是使用3个3x3的卷积核</p><p>解释：</p><p>假设输入大小为h x w x c，并且都是用c个卷积核（得到c个特征图），计算一下各自所需要的参数</p><p>一个7x7卷积核所需参数：</p><p>c（7x7xc） &#x3D; 49$c^2$</p><p>3个3x3的：</p><p>3x c x （3x3xc） &#x3D; 27$c^2$</p><p>所以，堆叠小的卷积核所需参数少，卷积过程多，特征提取仔细，加入的非线性变换也随之增多，这个也是VGG网络的基本出发点，用小的卷积核来完成特征提取操作。</p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p> torchvision：pytorch的一个工具集，主要处理图像视频，它包含了一些常用的数据集、模型、转换函数等等，包括图片分类、语义切分、目标识别、实例分割、关键点检测、视频分类等工具。</p><p>图像识别实战</p><p>数据增强 Data Augmentation</p><p>对原始图像进行反转、放大、缩小、旋转不同的角度</p><p>这里对于图像识别的代码跳过，主要想要实现textCNN的代码</p>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文 cnn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue源码解析二-插件</title>
      <link href="/2023/05/25/vue-yuan-ma-jie-xi-er-cha-jian/"/>
      <url>/2023/05/25/vue-yuan-ma-jie-xi-er-cha-jian/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DKN:Deep Knowledge-Aware Network for News Recommendation</title>
      <link href="/2023/05/25/dkn-deep-knowledge-aware-network-for-news-recommendation/"/>
      <url>/2023/05/25/dkn-deep-knowledge-aware-network-for-news-recommendation/</url>
      
        <content type="html"><![CDATA[<h1 id="DKN"><a href="#DKN" class="headerlink" title="DKN"></a>DKN</h1><p>2018</p><h2 id="introduction"><a href="#introduction" class="headerlink" title="introduction"></a>introduction</h2><p>本文提出了一种深度知识感知网络——DKN，它是一个基于内容的深度推荐框架，用于点击率预测。</p><p>面临的问题：</p><p>新闻文章具有高度的时间敏感性，其相关性在短时间内很快失效。用户对于新闻的话题度都是很敏感的。根据用户对新闻的阅读历史来动态地衡量用户的兴趣是关键所在。新闻语言是高度浓缩的，由大量的知识实体和常识组成。</p><p>解决：</p><p>DKN基于内容的点击率（CTR）预测模型，输入：一条候选新闻和一个用户的点击历史，输出：用户点击新闻的概率</p><h2 id="preliminaries"><a href="#preliminaries" class="headerlink" title="preliminaries"></a>preliminaries</h2><p>知识基础</p><p>KGE（Knowledge Graph Embedding）: translation-based knowledge graph embedding methods(TransE、TransH、TransR、TransD)，using margin-based ranking loss</p><p>kim-CNN：Convolutional Neural Networks for Sentence Classification</p><h2 id="Problem-Formulation"><a href="#Problem-Formulation" class="headerlink" title="Problem Formulation"></a>Problem Formulation</h2><p>给定一个用户user i，他过去的点击历史记为{t1,t2,t3, …, tN}，tN表示新闻的标题，N代表过去用户点击过的新闻总数。</p><p>每个标题都是一个词序列t &#x3D; {w1,w2,w3, …, wn}，标题中的单词有对应的知识图谱中的一个实体。</p><p>本文要解决的是给定用户的点击历史，以及标题单词和知识图谱中实体的关系，需要预测：一个用户是否会点击某一个特定的新闻tj。</p><h2 id="DKN-Framework"><a href="#DKN-Framework" class="headerlink" title="DKN Framework"></a>DKN Framework</h2><p>DKN将一条候选新闻和一条用户点击的新闻作为输入。对于每条新闻，都使用专门设计的KCNN来处理其标题并生成嵌入向量。通过KCNN，我们获得了一组用户点击历史的嵌入向量。为了获得用户对当前候选新闻的最终嵌入，我们使用了一种基于注意力的方法来自动将候选新闻与他点击的每条新闻进行匹配，并用不同的权重聚合用户的历史兴趣。</p><p><img src="C:\Users\邹阳\AppData\Roaming\Typora\typora-user-images\image-20230601141817092.png" alt="image-20230601141817092"></p><h3 id="Knowledge-distillation-知识提炼"><a href="#Knowledge-distillation-知识提炼" class="headerlink" title="Knowledge distillation 知识提炼"></a>Knowledge distillation 知识提炼</h3><p><img src="C:\Users\邹阳\AppData\Roaming\Typora\typora-user-images\image-20230601141801470.png" alt="image-20230601141801470"></p><p>4个步骤</p><p>从新闻内容提取实体，并进行实体链接（通过将新闻中的知识实体与知识图谱中的预定义实体相关联来取消文本歧义）</p><p>用文中包含的实体构建出一个子图，再对每一个实体从图谱中提取邻居实体（一跳范围）进行扩充</p><p>对子图做graph embedding， 可用方法有transE，transH等等</p><p>由于即使graph embedding已经基本保留了知识图谱的结构信息，但是效果还是不够好，所以这里引入“上下文”信息做辅助。所谓“上下文”指节点的邻居节点集。</p><p><img src="C:\Users\邹阳\AppData\Roaming\Typora\typora-user-images\image-20230601143015786.png" alt="image-20230601143015786"></p><p>4.4：基于注意力的用户兴趣提取细节</p>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文 新闻推荐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue.js源码解析一</title>
      <link href="/2023/05/23/vue-js-yuan-ma-jie-xi-yi/"/>
      <url>/2023/05/23/vue-js-yuan-ma-jie-xi-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="依赖追踪"><a href="#依赖追踪" class="headerlink" title="依赖追踪"></a>依赖追踪</h1><p>前三章主要讲解的是响应式系统，vue侦测数据的变化，当数据变化时，会通知视图进行响应的更新。</p><p>侦测一个对象的变化 Object.defineProperty(后面会使用ES6的Proxy)</p><pre class=" language-js"><code class="language-js">Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>key<span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这里都有固定的含义 javascript中自己查找含义</span>    <span class="token comment" spellcheck="true">// enumerable: false,</span>    <span class="token comment" spellcheck="true">// writable: true,</span>    <span class="token comment" spellcheck="true">// configurable: true,</span>    <span class="token comment" spellcheck="true">// 每当从obj的key中读取数据时，get函数被触发，修改key数据时，set被触发</span>    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`getting key "$&amp;#123;key&amp;#125;": $&amp;#123;oldvalue&amp;#125;`</span></span><span class="token punctuation">)</span>        <span class="token keyword">return</span> oldvalue    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token keyword">set</span><span class="token punctuation">(</span>newvalue<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`setting key "$&amp;#123;key&amp;#125;" to: $&amp;#123;newvalue&amp;#125;`</span></span><span class="token punctuation">)</span>        oldvalue <span class="token operator">=</span> newvalue    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>先收集依赖，把用到数据的地方收集起来，然后等属性发生变化时，把之前收集好的依赖循环触发一遍，即getter中收集依赖，setter中触发依赖</p><p>个人感觉书籍上讲解的很麻烦，还是尤雨溪作者本人讲解的简易版本比较清楚</p><h2 id="getter和setter函数重写"><a href="#getter和setter函数重写" class="headerlink" title="getter和setter函数重写"></a>getter和setter函数重写</h2><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> practice <span class="token number">1</span>：<span class="token keyword">try</span> to complete getter and setter <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment" spellcheck="true">// 这里判断是否是对象数据</span>    <span class="token keyword">function</span> isObject <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">'Object'</span>       <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>       <span class="token operator">&amp;&amp;</span> obj <span class="token operator">!==</span> <span class="token keyword">null</span>      <span class="token operator">&amp;&amp;</span> obj <span class="token operator">!==</span> undefined    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> convert <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Implement this!</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> key <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> oldvalue <span class="token operator">=</span> obj<span class="token punctuation">.</span>key        Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>key<span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 这里都有固定的含义 javascript中自己查找含义</span>          <span class="token comment" spellcheck="true">// enumerable: false,</span>          <span class="token comment" spellcheck="true">// writable: true,</span>          <span class="token comment" spellcheck="true">// configurable: true,</span>          <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`getting key "$&amp;#123;key&amp;#125;": $&amp;#123;oldvalue&amp;#125;`</span></span><span class="token punctuation">)</span>            <span class="token keyword">return</span> oldvalue          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>          <span class="token keyword">set</span><span class="token punctuation">(</span>newvalue<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`setting key "$&amp;#123;key&amp;#125;" to: $&amp;#123;newvalue&amp;#125;`</span></span><span class="token punctuation">)</span>            oldvalue <span class="token operator">=</span> newvalue          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h2 id="dependency-tracking"><a href="#dependency-tracking" class="headerlink" title="dependency-tracking"></a>dependency-tracking</h2><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> practice <span class="token number">2</span><span class="token punctuation">:</span><span class="token keyword">try</span> to complete <span class="token keyword">class</span> <span class="token class-name">Dep</span> and <span class="token keyword">function</span> autorun <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>     they realize the <span class="token keyword">function</span> <span class="token keyword">of</span> dependency tracking 跟踪依赖     how to realize it<span class="token punctuation">:</span>    <span class="token number">1</span>、<span class="token keyword">class</span> <span class="token class-name">Dep</span> has two <span class="token keyword">function</span><span class="token punctuation">:</span> <span class="token operator">-</span>depend <span class="token operator">-</span>notify    <span class="token number">2</span>、<span class="token keyword">if</span> you call <span class="token keyword">function</span> dep<span class="token punctuation">.</span>notity<span class="token punctuation">,</span>then autorun will execute<span class="token punctuation">.</span>    <span class="token number">3</span>、autorun will execute the <span class="token keyword">function</span> dep<span class="token punctuation">.</span>depend<span class="token punctuation">,</span>then it will console<span class="token punctuation">.</span>log <span class="token string">"updatesd"</span>  <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>script<span class="token operator">></span>    window<span class="token punctuation">.</span>Dep <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">Dep</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subscriber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Implement this</span>      <span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// whole point：通过这个activeUpdate确保在update执行的时候，</span>        <span class="token comment" spellcheck="true">// 我们能够通过depend（依赖类）访问到update</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>activeUpdate<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// now we get the current update function that's being executed</span>          <span class="token comment" spellcheck="true">// then we need to register the current active update as a subscriber</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>subscriber<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeUpdate<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// run all subscribers</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subscriber<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>sub <span class="token operator">=</span><span class="token operator">></span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> activeUpdate<span class="token punctuation">;</span>    <span class="token keyword">function</span> autorun <span class="token punctuation">(</span>update<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 这里使用一个包装函数 在执行update的时候 activeUpdate肯定是不为空的</span>      <span class="token comment" spellcheck="true">// 因此可以通过activeUpdate的状态看是否在执行更新函数 </span>      <span class="token comment" spellcheck="true">// 从而实现自动化更新</span>      <span class="token keyword">function</span> <span class="token function">wrappedUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        activeUpdate <span class="token operator">=</span> wrappedUpdate<span class="token punctuation">;</span>        <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        activeUpdate <span class="token operator">=</span> <span class="token keyword">null</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token function">wrappedUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">autorun</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h2 id="mini-observer"><a href="#mini-observer" class="headerlink" title="mini-observer"></a>mini-observer</h2><ul><li><code>observe()</code> converts修改 the properties in the received object and make them reactive. For each converted property, it gets assigned a <code>Dep</code> instance which keeps track of a list of subscribing update functions, and triggers them to re-run when its setter is invoked.</li><li><code>autorun()</code> takes an update function and re-runs it when properties that the update function subscribes to have been mutated修改. An update function is said to be “subscribing” to a property if it relies on that property during its evaluation.</li></ul><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> practice <span class="token number">3</span><span class="token punctuation">:</span> miniwacther <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>     <span class="token keyword">in</span> <span class="token keyword">this</span> practice<span class="token punctuation">,</span> you need to connect practice1 and practice2<span class="token punctuation">,</span> when     a object execute setter or getter<span class="token punctuation">,</span> autorun should register the update    through dep<span class="token punctuation">.</span>depend<span class="token punctuation">,</span>then execute dep<span class="token punctuation">.</span>notify to achive the update<span class="token punctuation">.</span>  <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">function</span> isObject <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">'object'</span>          <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>          <span class="token operator">&amp;&amp;</span> obj <span class="token operator">!==</span> <span class="token keyword">null</span>          <span class="token operator">&amp;&amp;</span> obj <span class="token operator">!==</span> undefined    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> observe <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>          Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>key <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> internalValue <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">// 每个对象的每个属性都新建了一个dep类来保存它的依赖</span>        <span class="token keyword">let</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">get</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 收集依赖</span>            dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> internalValue          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>          <span class="token keyword">set</span> <span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> isChanged <span class="token operator">=</span> internalValue <span class="token operator">!==</span> newValue            <span class="token keyword">if</span> <span class="token punctuation">(</span>isChanged<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              internalValue <span class="token operator">=</span> newValue              <span class="token comment" spellcheck="true">// 修改依赖</span>              dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        window<span class="token punctuation">.</span>Dep <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">Dep</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      constructor <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>          depend <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>activeUpdate<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// register the current active update as a subscriber</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeUpdate<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>          notify <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// run all subscriber functions</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>subscriber <span class="token operator">=</span><span class="token operator">></span> <span class="token function">subscriber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> activeUpdate        <span class="token keyword">function</span> autorun <span class="token punctuation">(</span>update<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">function</span> wrappedUpdate <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        activeUpdate <span class="token operator">=</span> wrappedUpdate        <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        activeUpdate <span class="token operator">=</span> <span class="token keyword">null</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token function">wrappedUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文一</title>
      <link href="/2023/05/23/lun-wen-yi/"/>
      <url>/2023/05/23/lun-wen-yi/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="/pdf/论文整理.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="基于知识图谱的深度推荐系统研究-王越群-2022-06"><a href="#基于知识图谱的深度推荐系统研究-王越群-2022-06" class="headerlink" title="基于知识图谱的深度推荐系统研究 王越群 2022.06"></a>基于知识图谱的深度推荐系统研究 王越群 2022.06</h3><h4 id="论文内容"><a href="#论文内容" class="headerlink" title="论文内容"></a>论文内容</h4><p>以下是对于基于知识图谱的深度推荐系统研究一文王越群博士的论文深度解析。</p><p>该文提出了三种深度推荐系统研究方法</p><p>1、基于游走策略的知识图谱图卷积网络深度推荐模型</p><p>2、基于知识图谱作为辅助信息的多模态多任务深度推荐模型</p><p>3、基于知识图谱的波纹传播与多任务学习结合的深度推荐模型</p><p>目前感觉第二种方法比较适合</p><h4 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h4><h5 id="推荐系统的五个发展阶段"><a href="#推荐系统的五个发展阶段" class="headerlink" title="推荐系统的五个发展阶段"></a>推荐系统的五个发展阶段</h5><p>1、协同过滤阶段 2、逻辑回归阶段 3、因子分解机阶段 4、组合模型阶段</p><p>5、深度学习阶段</p><ul><li><p>…</p></li><li><p>近些年的改进方向 </p><ul><li><p>引入注意力机制（在结果输出之前，进行注意力权重的分配，提升推荐准确性）</p></li><li><p>融合序列模型（使用序列模型模拟用户行为或用户兴趣的演化趋势 eg：深度兴趣进化网络模型 DIEN 26）</p></li><li><p>结合强化学习（提升模型的在线学习效率和实时更新速度 eg：深度强化学习网络模型DRN 27 ）</p></li><li><p>结合辅助信息的深度模型（在不同的深度学习模型中加入不同领域的信息挖掘技术，如融合NLP技术，将文本信息进行挖掘 eg：面向新闻推荐的深度知识感知网络模型 DKN 28，通过图像识别技术，将海报、图像、头像信息融入到推荐系统中）</p></li><li><p>图结构化信息推荐 </p><p>由于推荐系统的输入数据可以以二部图、知识图谱形式进行表示，所以可以通过图挖掘技术进行深度推荐。本文中的三种研究方法都是基于图结构化信息推荐</p></li></ul></li></ul><h5 id="知识图谱特征向量与推荐系统的融合方式"><a href="#知识图谱特征向量与推荐系统的融合方式" class="headerlink" title="知识图谱特征向量与推荐系统的融合方式"></a>知识图谱特征向量与推荐系统的融合方式</h5><p>知识图谱属于一种异构图结构，知识图谱与推荐系统的融合方式有三种类型：基于向量化的方法、基于路径的方法以及基于联合的融合方法</p><ul><li><p>基于向量化的方法</p><p>将推荐数据组成的知识图谱信息进行向量化处理，通过用户属性或者item属性构造知识图谱的拓扑结构并进行特征表示学习，以提升用户或者item的内容丰富程度。</p><p>DKN模型：DKN 模型则是将新闻的标题、文本词汇信息以及上下文信息作为项目的辅助信息，进行特征挖掘。分别使用 TransE 模型[29]、 Word2vec 模型[36]等模型学习文本信息的多维度表示，并使用注意力机制将多重向量结果进行卷积处理，最后与用户向量使用内积的形式预测推荐结果。  </p></li><li><p>基于路径的方法</p><p>采用设定游走策略或者元路径的方式，将推荐任务转换为图的链接预测问题。</p></li><li><p>联合融合方法</p><p>联合的融合方法是将基于路径的方法与基于向量的方法相互结合，RippleNet模型。。。</p></li></ul><p>基于向量化的融合方式、基于路径的融合方式在获取知识图谱实体或关系的向量表示后，仍有三种常见的方法将知识图谱的向量化结果融入到推荐系统中去，分别为依次训练、联合训练和交替训练三种方式。</p><ul><li><p>依次训练</p><p>DKN模型</p></li><li><p>联合训练</p><p>RippleNet模型、KGCN模型</p></li><li><p>交替训练</p><p>MKR模型</p></li></ul><h5 id="辅助信息与推荐系统融合"><a href="#辅助信息与推荐系统融合" class="headerlink" title="辅助信息与推荐系统融合"></a>辅助信息与推荐系统融合</h5><ul><li>辅助信息可以分为两类：结构化数据（平面特征、同质性网络结构特征、特征层级与知识图谱等）和非结构化数据（文本特征、图像特征、视频特征）</li></ul><h5 id="知识图谱特征学习模型"><a href="#知识图谱特征学习模型" class="headerlink" title="知识图谱特征学习模型"></a>知识图谱特征学习模型</h5><ul><li><p>基于距离的翻译模型</p><p>TransE[29]、 TransR[32]、 TransD[31]、 TransH[30]</p></li><li><p>基于语义的匹配模型</p></li><li><p>基于路径的嵌入学习</p></li></ul><h5 id="评价指标"><a href="#评价指标" class="headerlink" title="评价指标"></a>评价指标</h5><h4 id="SIMKR模型"><a href="#SIMKR模型" class="headerlink" title="SIMKR模型"></a>SIMKR模型</h4><p>基于知识图谱作为辅助信息的多模态多任务深度推荐模型</p><p>针对第二中方法提出了SIMKR模型（</p><p>多模态：将项目的属性划分了三类(文本类型、多值属性类型、其它类型属性)，基于多模态思想，对于每一种属性的特征学习采用不同的方法</p><p>项目属性集$ A &#x3D; A^T ∩ A^M ∩ A^E$</p><p>$A^T$: 文本类型，多个词语构成，自身的内在含义价值高于分析结构带来的价值，使用text-CNN模型进行特征提取</p><p>处理：TextCNN处理</p><p>$A^M$: 多值属性类型，合在一起会导致相同的关联属性在训练中被忽略，分开会导致知识图谱的体量增加且引入多对多、一对多的关系会造成提取效果差。</p><p>处理：索引矩阵和one-hot编码</p><p>$A^E$: 其它类型属性，其自身含义贡献较小，且这些属性与实体之间是一对一的关系，将这些属性与实体之间组成三元组关系，其结构信息更加具备挖掘意义。</p><img src='https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/SI-MKR%E6%A8%A1%E5%9E%8B.jpg'><h4 id="消融实验"><a href="#消融实验" class="headerlink" title="消融实验"></a>消融实验</h4><p>类似于控制变量法，常用于神经网路中验证某一模块的效果。eg，为了提升baseline的性能，增加了A，B两个模块，为了验证A、B两个模块确实有效，进行消融实验</p><ol><li><p>在baseline的基础上增加模块A，比较效果</p></li><li><p>在baseline的基础上增加模块B，比较效果</p></li><li><p>在baseline的基础上同时增加模块A,B，比较效果</p></li></ol><p>结果表明</p><p>1）实验1和实验2的效果不如实验3，那么A+B是有效果的。</p><p>2）若实验1和实验2分别都优于只有baseline的情况，则A,B均有一定的效果。</p>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多模态 知识图谱 推荐系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>职业规划</title>
      <link href="/2023/05/22/zhi-ye-gui-hua/"/>
      <url>/2023/05/22/zhi-ye-gui-hua/</url>
      
        <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/6888951180677316622">前端工程师的职业发展规划 - 掘金 (juejin.cn)</a></p><p>目前先提升自己的技术能力。</p>]]></content>
      
      
      <categories>
          
          <category> 目标 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bom&amp;&amp;Dom</title>
      <link href="/2023/05/20/bom-dom/"/>
      <url>/2023/05/20/bom-dom/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="/pdf/dom&amp;bom-day1.pdf" width="100%" height="550" type="application/pdf"></div><div class="row">    <embed src="/pdf/dom&amp;bom-day2.pdf" width="100%" height="550" type="application/pdf"></div><div class="row">    <embed src="/pdf/dom&amp;bom-day3.pdf" width="100%" height="550" type="application/pdf"></div><div class="row">    <embed src="/pdf/dom&amp;bom-day4.pdf" width="100%" height="550" type="application/pdf"></div><div class="row">    <embed src="/pdf/dom&amp;bom-day5.pdf" width="100%" height="550" type="application/pdf"></div><div class="row">    <embed src="/pdf/dom&amp;bom-day6.pdf" width="100%" height="550" type="application/pdf"></div><div class="row">    <embed src="/pdf/dom&amp;bom-day7.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第1/2章 什么是javascript</title>
      <link href="/2023/05/20/di-1-2-zhang-shi-me-shi-javascript/"/>
      <url>/2023/05/20/di-1-2-zhang-shi-me-shi-javascript/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="/pdf/论文整理.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第25章 客户端存储</title>
      <link href="/2023/05/19/di-25-zhang-ke-hu-duan-cun-chu/"/>
      <url>/2023/05/19/di-25-zhang-ke-hu-duan-cun-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="第25章-客户端存储"><a href="#第25章-客户端存储" class="headerlink" title="第25章 客户端存储"></a>第25章 客户端存储</h1><p>Web应用程序的出现，直接在客户端存储用户信息的需求也随之出现，无论是登录信息、个人偏好还是其它数据，与特定用户相关的信息应该保存在用户的机器上。</p><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p>最初用于在客户端存储会话信息。cookie要求服务器在响应HTTP请求时，通过发送Set-Cookie HTTP 头部包含会话信息</p><pre><code>HTTP/1.1 200 OK Content-type: text/html // 设置了一个名为name，值为value的cookie，名和值在发送时都会经过URL编码Set-Cookie: name=value Other-header: other-header-value// 浏览器会存储这些会话信息，并在之后的每个请求中都会通过 HTTP 头部 cookie 再将它们发回服务器GET /index.jsl HTTP/1.1 Cookie: name=value Other-header: other-header-value </code></pre><h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><p>cookie是与特定域绑定的，设置 cookie 后，它会与请求一起发送到创建它的域。这个限制能保证 cookie 中存储的信息只对被认可的接收者开放，不被其他域访问。</p><p>不超过 300 个 cookie，每个 cookie 不超过 4096 字节，每个域不超过 20 个 cookie，每个域能设置的 cookie 总数也是受限的，但不同浏览器的限制不同。</p><h3 id="构成"><a href="#构成" class="headerlink" title="构成"></a>构成</h3><p>name：唯一标识cookie的名称。不区分大小写</p><p>value：存储在cookie里的字符串值。这个值必须经过URL编码。</p><p>域domain：cookie有效的域。发送到这个域的所有请求都会包含对应的cookie。</p><p>path：<strong>请求URL中包含这个路径才会把cookie发送到服务器。</strong></p><p>过期时间expires：表示何时删除cookie的时间戳</p><p>这些参数在 Set-Cookie 头部中使用分号加空格隔开：</p><pre><code>HTTP/1.1 200 OK Content-type: text/html // 部设置一个名为&quot;name&quot;的 cookie，这个 cookie 在 2007 年 1 月 22 日 7:10:24 过期，对www.wrox.com 及其他 wrox.com 的子域（如 p2p.wrox.com）有效。// 安全标志 secure 是 cookie 中唯一的非名/值对，只需一个 secure 就可以了Set-Cookie: name=value; expires=Mon, 22-Jan-07 07:10:24 GMT; domain=.wrox.com ; secureOther-header: other-header-value</code></pre><p>安全标志secure：设置之后，只在使用SSL安全连接的情况下才会把cookie发送到服务器。 <strong>域、路径、过期时间和secure标志用于告诉浏览器什么情况下应该在请求中包含cookie。</strong>这些参数并不会随请求发送给服务器，实际发送的只有cookie的名&#x2F;值对。</p><h3 id="JavaScript中的cookie"><a href="#JavaScript中的cookie" class="headerlink" title="JavaScript中的cookie"></a>JavaScript中的cookie</h3><p>document.cookie 返回包含页面中所有 有效 cookie 的字符串（根据域、路径、过期时间和安全设置），以分号分隔</p><pre><code>name1=value1;name2=value2;name3=value3 </code></pre><p>document.cookie &#x3D; “name &#x3D; XXX”就可以设置，但是最好还是使用encodeURICompnent()对名称和值进行编码</p><pre class=" language-js"><code class="language-js">document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span><span class="token string">"Nicholas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>因为在 JavaScript 中读写 cookie 不是很直观，所以可以通过辅助函数来简化相应的操作。与 cookie 相关的基本操作有读、写和删除。这些在 CookieUtil 对象中表示</p><pre><code>// 设置 cookie CookieUtil.set(&quot;name&quot;, &quot;Nicholas&quot;); CookieUtil.set(&quot;book&quot;, &quot;Professional JavaScript&quot;); // 读取 cookie alert(CookieUtil.get(&quot;name&quot;)); // &quot;Nicholas&quot; alert(CookieUtil.get(&quot;book&quot;)); // &quot;Professional JavaScript&quot; // 删除 cookie CookieUtil.unset(&quot;name&quot;); CookieUtil.unset(&quot;book&quot;); // 设置有路径、域和过期时间的 cookie CookieUtil.set(&quot;name&quot;, &quot;Nicholas&quot;, &quot;/books/projs/&quot;, &quot;www.wrox.com&quot;,  new Date(&quot;January 1, 2010&quot;)); // 删除刚刚设置的 cookie CookieUtil.unset(&quot;name&quot;, &quot;/books/projs/&quot;, &quot;www.wrox.com&quot;); // 设置安全 cookie CookieUtil.set(&quot;name&quot;, &quot;Nicholas&quot;, null, null, null, true); </code></pre><h2 id="Web-storage"><a href="#Web-storage" class="headerlink" title="Web storage"></a>Web storage</h2><p>WebStorage的目的是<strong>解决通过客户端存储不需要频繁发送回服务器的数据时使用cookie的问题</strong>。</p><p>WebStorage定义了两个对象：localStorage和sessionStorage。localStorage是永久存储机制，sessionStorage是跨会话的存储机制。</p><h3 id="storage类型"><a href="#storage类型" class="headerlink" title="storage类型"></a>storage类型</h3><p>Storage类型用于保存名&#x2F;值对数据，有以下方法：</p><p>clear()：删除所有值；不在Firefox中实现</p><p>getItem（name）：取得给定name的值</p><p>key（index）：取得给定数值位置的名称</p><p>removeItem（name）：删除给定name的名&#x2F;值对</p><p>setItem（name, value）：设置给定name的值。 <strong>Storage类型只能存储字符串</strong>。非字符串数据在存储之前会自动转换为字符串</p><h3 id="SessionStorage"><a href="#SessionStorage" class="headerlink" title="SessionStorage"></a>SessionStorage</h3><p>sessionStorage对象<strong>只存储会话数据</strong>，这意味着数据只会存储到浏览器关闭。这跟浏览器关闭时 会消失的会话 cookie 类似。</p><p>因为 sessionStorage 对象是 Storage 的实例，所以可以通过使用 setItem()方法或直接给属 性赋值给它添加数据。</p><pre><code>// 使用方法存储数据sessionStorage.setItem(&quot;name&quot;, &quot;Nicholas&quot;); // 使用属性存储数据sessionStorage.book = &quot;Professional JavaScript&quot;; // 使用方法取得数据let name = sessionStorage.getItem(&quot;name&quot;); // 使用属性取得数据let book = sessionStorage.book; // 可以结合 sessionStorage 的 length 属性和 key()方法遍历所有的值for (int i = 0,len = sessionStorage.length;i&lt;len;i++) &#123;    let key = sessionStorage.key(i);    let value = sessionStorage.getItem(key);    alert(`$&#123;key&#125; = $&#123;value&#125; `);&#125;// 也可以使用 for-in 循环迭代 sessionStorage 的值for (let key in sessionStorage) &#123;    let value = sessionStorage.getItem(key);    alert(`$&#123;key&#125; = $&#123;value&#125; `);&#125;// 使用 delete 删除值delete sessionStorage.name; // 使用方法删除值sessionStorage.removeItem(&quot;book&quot;); </code></pre><p>sessionStorage 对象应该主要用于存储只在会话期间有效的小块数据。如果需要跨会话持久存储 数据，可以使用localStorage.</p><h3 id="LocalStorage"><a href="#LocalStorage" class="headerlink" title="LocalStorage"></a>LocalStorage</h3><p>要访问同一个localStorage对象，页面必须来自同一个域（子域不可以）、在相同的端口上使用相同的协议。</p><pre><code>// 使用方法存储数据localStorage.setItem(&quot;name&quot;, &quot;Nicholas&quot;); // 使用属性存储数据localStorage.book = &quot;Professional JavaScript&quot;; // 使用方法取得数据let name = localStorage.getItem(&quot;name&quot;); // 使用属性取得数据let book = localStorage.book;</code></pre><p>它与sessionStorage的区别就是，存储在 localStorage 中的数据会保留到通过 JavaScript 删除或者用户清除浏览器缓存。localStorage 数据不受页面刷新影响，也不会因关闭窗口、标签页或重新启动浏览 器而丢失。</p><h3 id="存储事件"><a href="#存储事件" class="headerlink" title="存储事件"></a>存储事件</h3><p>每当Storage对象发生变化时，都会在文档上触发storage事件。</p><p>这个事件的 事件对象有如下 4 个属性。</p><p>domain：存储变化对应的域。 </p><p>key：被设置或删除的键。 </p><p>newValue：键被设置的新值，若键被删除则为 null。 </p><p>oldValue：键变化之前的值。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 监听storage事件</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"storage"</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Storage changed for $&amp;#123;event.domain&amp;#125;'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="限制-1"><a href="#限制-1" class="headerlink" title="限制"></a>限制</h3><p>客户端数据的大小限制是按照每个源（协议、域和端口）来设置的，因此每个源有固定大小的数 据存储空间。</p><p>不同浏览器给 localStorage 和 sessionStorage 设置了不同的空间限制，但大多数会限制为每 个源 5MB。</p><h2 id="IndexedDB"><a href="#IndexedDB" class="headerlink" title="IndexedDB"></a>IndexedDB</h2><p>Indexed Database API简称IndexedDB，是浏览器中存储结构化数据的一个方案。绝大多数 IndexedDB 操作要求添加 onerror 和 onsuccess 事件处理程序来确 定输出。</p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>IndexedDB 是类似于 MySQL 或 Web SQL Database 的数据库。IndexedDB使用对象存储而不是表格保存数据。</p><p>1、打开数据库，建立数据库连接</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> db<span class="token punctuation">,</span> request<span class="token punctuation">,</span> version <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1参数：数据库名称 2参数：指定版本号</span>request <span class="token operator">=</span> indexedDB<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span> version<span class="token punctuation">)</span><span class="token punctuation">;</span> request<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  <span class="token comment" spellcheck="true">// 如果打开数据库期间发生了错误，event.target.errorCode中就会存储表示问题的错误码</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Failed to open: $&amp;#123;event.target.errorCode&amp;#125;`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> request<span class="token punctuation">.</span>onsuccess <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 如果成功的话可以通过 event.target.result访问数据库实例了，这个实例会被保存在db中</span> db <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span> </code></pre><p>2、使用对象存储</p><p>创建对象存储前，思考需要存储什么类型的数据</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 适合作为对象存储键 全局唯一</span> username<span class="token punctuation">:</span> <span class="token string">"007"</span><span class="token punctuation">,</span>  firstName<span class="token punctuation">:</span> <span class="token string">"James"</span><span class="token punctuation">,</span>  lastName<span class="token punctuation">:</span> <span class="token string">"Bond"</span><span class="token punctuation">,</span>  password<span class="token punctuation">:</span> <span class="token string">"foo"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><p>3、事务完成其它操作</p><p>事务要通过调用数据库对象的 transaction()方法创建。</p><pre><code>// 简易创建事务方法let transaction = db.transaction();// 指定一个或多个要访问的对象存储的名称 以确保在事务期间只加载 users 对象存储的信息let transaction = db.transaction(&quot;users&quot;); // 访问多个对象存储，可以给第一个参数传入一个字符串数组let transaction = db.transaction([&quot;users&quot;, &quot;anotherStore&quot;]); // 每个事务都以只读方式访问数据。要修改访问模式，可以传入第二个参数。&quot;readonly&quot;、&quot;readwrite&quot;或&quot;versionchange&quot;let transaction = db.transaction(&quot;users&quot;, &quot;readwrite&quot;); </code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第18章 动画与Canvas图形</title>
      <link href="/2023/05/19/di-18-zhang-dong-hua-yu-canvas-tu-xing/"/>
      <url>/2023/05/19/di-18-zhang-dong-hua-yu-canvas-tu-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="第18章-动画与Canvas图形"><a href="#第18章-动画与Canvas图形" class="headerlink" title="第18章 动画与Canvas图形"></a>第18章 动画与Canvas图形</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>屏幕、窗口、文档之间的区别</title>
      <link href="/2023/05/16/ping-mu-chuang-kou-wen-dang-zhi-jian-de-qu-bie/"/>
      <url>/2023/05/16/ping-mu-chuang-kou-wen-dang-zhi-jian-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<h3 id="屏幕、窗口、文档之间的区别"><a href="#屏幕、窗口、文档之间的区别" class="headerlink" title="屏幕、窗口、文档之间的区别"></a>屏幕、窗口、文档之间的区别</h3><h4 id="屏幕"><a href="#屏幕" class="headerlink" title="屏幕"></a>屏幕</h4><blockquote><p>屏幕尺寸是屏幕的宽度和高度：显示器或移动屏幕。window.screen是保存屏幕尺寸信息的对象。</p></blockquote><ul><li><strong>screen.width</strong>：屏幕的宽。</li><li><strong>screen.height</strong>：屏幕的高。</li></ul><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1107d8d8506d47cd9f0dcc2c07f1a0d9~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="img" style="zoom:40%;" align='left' /><h5 id="可用屏幕尺寸"><a href="#可用屏幕尺寸" class="headerlink" title="可用屏幕尺寸"></a>可用屏幕尺寸</h5><blockquote><p>可用的屏幕大小由活动屏幕的宽度和高度组成，没有操作系统工具栏。</p></blockquote><ul><li><strong>screen.availWidth</strong>：可利用的宽，等于屏幕的宽。</li><li><strong>screen.availHeight</strong>：可利用的高，等于屏幕的高减去 mac 顶部栏或 windows 底部栏。</li></ul><h5 id="屏幕距离"><a href="#屏幕距离" class="headerlink" title="屏幕距离"></a>屏幕距离</h5><ul><li><strong>screenTop</strong>：浏览器窗口左上角到屏幕上边缘的距离。</li><li><strong>screenLeft</strong>：浏览器窗口左上角到屏幕左边缘的距离。 <code>Firefox</code> 浏览器不支持上述属性，但是可以使用👇:</li><li><strong>screenX</strong>：等于 screenLeft。</li><li><strong>screenY</strong>：等于 screenTop。</li></ul><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/651192c54f874591bd8864cc5c62dd2a~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="img" style="zoom: 40%;" align='left' /><h4 id="window窗口"><a href="#window窗口" class="headerlink" title="window窗口"></a>window窗口</h4><blockquote><p>窗口的外部大小由整个浏览器窗口的宽度和高度组成，包含地址栏，选项卡栏和其他浏览器面板。</p></blockquote><ul><li>window.outerWidth：浏览器窗口的宽。</li><li>window.outerHeight：浏览器窗口的高。</li></ul><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/63dcd2ec483344b6b4658939538c44c5~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="img" style="zoom: 40%;" align='left' /><h5 id="窗口内部尺寸"><a href="#窗口内部尺寸" class="headerlink" title="窗口内部尺寸"></a>窗口内部尺寸</h5><blockquote><p>窗口的内部大小（也称为视口大小）由显示网页的视口的宽度和高度组成，包含滚动条。</p></blockquote><ul><li><strong>window.innerWidth</strong>：视口的宽。</li><li><strong>window.innerHeight</strong>：视口的高。</li></ul><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/537ec6617dc24480869890c70c03a2a9~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="img" style="zoom: 40%;" align='left' />]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第17章 事件</title>
      <link href="/2023/05/16/di-17-zhang-shi-jian/"/>
      <url>/2023/05/16/di-17-zhang-shi-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="第17章-事件"><a href="#第17章-事件" class="headerlink" title="第17章 事件"></a>第17章 事件</h1><h2 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h2><p>事件流描述了页面接收事件的顺序</p><h3 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h3><p>IE事件流被称为事件冒泡，事件冒泡中事件被定义为从最具体的元素（文档树中最深的节点）开始触发，然后向上传播至没有那么具体的元素（文档）。</p><h3 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h3><p>事件捕获从最不具体的节点应该最先收到事件，而最具体的节点应该最后收到事件。</p><p>因为事件捕获实际上是为了在事件到达最终目标前拦截事件。</p><h3 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h3><p>事件流分为3个阶段：事件捕获、到达目标和事件冒泡，事件捕获最先发生，为提前拦截事件提供了可能性，然后，实际的目标元素接收到事件，最后一个阶段是冒泡，最迟要在这个阶段响应事件。</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Event Bubbling Example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myDiv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Click Me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>点击页面中的div位置后，事件流的阶段</p><img src='https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/%E4%BA%8B%E4%BB%B6%E6%B5%81%E9%98%B6%E6%AE%B5.jpg' width='50%' align='left'><p>在 DOM 事件流中，实际的目标（div元素）在捕获阶段不会接收到事件。这是因为捕获阶段从 document 到html再到body就结束了。下一阶段，即会在div元素上触发事件的“到达目标” 阶段，通常在事件处理时被认为是冒泡阶段的一部分（稍后讨论）。然后，冒泡阶段开始，事件反向传 播至文档。</p><h2 id="事件处理程序（事件监听器）"><a href="#事件处理程序（事件监听器）" class="headerlink" title="事件处理程序（事件监听器）"></a>事件处理程序（事件监听器）</h2><p>为响应事件而调用的函数</p><h3 id="html事件处理程序"><a href="#html事件处理程序" class="headerlink" title="html事件处理程序"></a>html事件处理程序</h3><p>相当于在行内添加事件</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>button<span class="token punctuation">'</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>Click<span class="token punctuation">'</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>console.log(<span class="token punctuation">'</span>click<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- 这里能够调用showMessage方法是因为作为事件处理程序执行的代码可以访问全局作用域中的一切 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Click Me<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>showMessage()<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">function</span> <span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> </code></pre><h3 id="DOM0事件处理程序"><a href="#DOM0事件处理程序" class="headerlink" title="DOM0事件处理程序"></a>DOM0事件处理程序</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myBtn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// this指向元素本身</span>btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// myBtn</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>btn <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="DOM2事件处理程序"><a href="#DOM2事件处理程序" class="headerlink" title="DOM2事件处理程序"></a>DOM2事件处理程序</h3><p>（通过这种方式可以为同一个元素添加多个事件）</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myBtn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// myBtn</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>btn <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true 为捕获阶段触发，false为非捕获阶段触发</span></code></pre><p>IE事件处理程序</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myBtn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">"onclick"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Clicked"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p>在DOM中发生事件时，所有相关信息都会被收集并且存储在一个名为<strong>event</strong>的对象中。这个对象包含了一些基本信息，比如导致事件的元素、发生的事件类型，以及可能与特定事件相关的任何其它数据。例如：鼠标操作导致的事件会生成鼠标位置信息，而键盘操作导致的事件会生成与被按下的键有关的信息。</p><h3 id="DOM事件对象"><a href="#DOM事件对象" class="headerlink" title="DOM事件对象"></a>DOM事件对象</h3><p>event对象是传给事件处理程序的唯一参数</p><p>在事件处理程序内部，this指向currentTarget的值，target指向事件的实际目标。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myBtn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 因为事件处理程序直接添加在了意图的目标，所以this、currentTarget、target的值是一样的</span>btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>currentTarget <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true </span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true </span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这个事件处理程序是添加在按钮的父节点上body，所以this和currentTarget都指向body，但是target指向myBtn</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>currentTarget <span class="token operator">===</span> document<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true </span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> document<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true </span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target <span class="token operator">===</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myBtn"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true </span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>event.type属性表示事件类型，在一个处理程序处理多个事件时很有用</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myBtn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> handler <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">switch</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token string">"click"</span><span class="token punctuation">:</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Clicked"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token string">"mouseover"</span><span class="token punctuation">:</span>         event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token string">"mouseout"</span><span class="token punctuation">:</span>      event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span> btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> handler<span class="token punctuation">;</span> btn<span class="token punctuation">.</span>onmouseover <span class="token operator">=</span> handler<span class="token punctuation">;</span> btn<span class="token punctuation">.</span>onmouseout <span class="token operator">=</span> handler<span class="token punctuation">;</span> </code></pre><p>event.preventDefault()方法用于阻止特定事件的默认动作(比如a标签的href)。 </p><p>event.stopPropagation()用于取消后续事件捕获或冒泡。</p><p>event.eventPhase可以确定事件流的状态：1：捕获阶段，2目标调用，3冒泡阶段。</p><blockquote><p>event对象只在事件处理程序执行期间存在，一旦执行完毕，就会被销毁</p></blockquote><h2 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h2><p>DOM3 Events定义了如下事件类型</p><h3 id="用户界面事件（UIEvent）"><a href="#用户界面事件（UIEvent）" class="headerlink" title="用户界面事件（UIEvent）"></a>用户界面事件（UIEvent）</h3><p>涉及与<strong>BOM交互</strong>的通用浏览器事件</p><h4 id="load"><a href="#load" class="headerlink" title="load"></a>load</h4><ul><li>在window上当页面加载完成后触发</li><li>在frameset上当所有窗格frame都加载完成后触发</li><li>在img元素上当图片加载完成后触发</li><li>在object元素上当相应对象加载完成后触发</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 通过两种方式指定load事件处理程序</span><span class="token comment" spellcheck="true">// 第一种：使用js方式</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"load"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Loaded!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 第二种：向body元素添加onload属性 一般来说，都可以通过给body元素上对应的属性赋值来指定，但是实际开发中尽量使用js方式</span><span class="token operator">&lt;</span>body onload<span class="token operator">=</span><span class="token string">"console.log('Loaded!')"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></code></pre><h4 id="abort"><a href="#abort" class="headerlink" title="abort"></a>abort</h4><p>在object元素上当相应对象加载完成前被用户提前终止下载时触发。</p><h4 id="error"><a href="#error" class="headerlink" title="error"></a>error</h4><ul><li>在window上当JavaScript报错时触发</li><li>在img元素上当无法加载指定图片时触发</li><li>在object元素上当无法加载相应对象时触发</li><li>在窗套上当一个或多个窗格无法完成加载时触发。</li></ul><h4 id="select"><a href="#select" class="headerlink" title="select"></a>select</h4><p>在文本框（input或textarea）上当用户选择了一个或多个字符时触发。</p><h4 id="resize"><a href="#resize" class="headerlink" title="resize"></a>resize</h4><p>在window或窗格上当窗口或窗格被缩放时触发。</p><h4 id="scroll"><a href="#scroll" class="headerlink" title="scroll"></a>scroll</h4><h4 id="unload"><a href="#unload" class="headerlink" title="unload"></a>unload</h4><p>在<strong>文档卸载</strong>完成后触发，unload事件一般是在<strong>从一个页面导航到另一个页面时触发</strong>，最常用于清理引用，以避免内存泄漏。</p><h4 id="resize-1"><a href="#resize-1" class="headerlink" title="resize"></a>resize</h4><p>当浏览器窗口被缩放到新高度或宽度时，会触发resize事件。、</p><h3 id="焦点事件（FocusEvent）"><a href="#焦点事件（FocusEvent）" class="headerlink" title="焦点事件（FocusEvent）"></a>焦点事件（FocusEvent）</h3><p>在元素获得和失去焦点时触发</p><p>blur：当元素失去焦点时触发。这个事件不冒泡，所有浏览器都支持</p><p>focus：当元素获得焦点时触发。这个事件不冒泡，所有浏览器都支持 focusin（冒泡版）</p><p>focusout：当元素失去焦点时触发，这个事件是blur的通用版</p><h3 id="鼠标事件（MouseEvent）"><a href="#鼠标事件（MouseEvent）" class="headerlink" title="鼠标事件（MouseEvent）"></a>鼠标事件（MouseEvent）</h3><p>使用鼠标在页面上执行某些操作时触发</p><p>click：在用户单击鼠标主键（通常是左键）或按键盘回车键时触发。这主要是基于无障碍的考虑，让键盘和鼠标都可以触发onclick事件处理程序</p><p>dblclick：在用户双击鼠标主键（通常是左键）时触发。这个事件不是在DOM2 Events中定义的，但得到了很好的支持，DOM3Events将其进行了标准化</p><p>mousedown：在用户按下任意鼠标键时触发。这个事件不能通过键盘触发</p><p>mouseenter：在用户把鼠标光标从元素外部移到元素内部时触发。<strong>这个事件不冒泡</strong>，也不会在光标经过后代元素时触发。mouseenter事件不是在DOM2 Events中定义的，而是DOM3Events中新增的事件</p><p>mouseleave：在用户把鼠标光标从元素内部移到元素外部时触发。这个事件不冒泡，也不会在光标经过后代元素时触发。mouseleave事件不是在DOM2 Events中定义的，而是DOM3Events中新增的事件</p><p>窗口坐标</p><p>event对象的clientX和clientY属性中</p><p>页面坐标</p><p>event对象的pageX和pageY，在页面没有滚动的时候，pageX和pageY与clientX和clientY的值相同</p><p>屏幕坐标</p><p>event对象的screenX和screenY属性获取鼠标光标在屏幕上的坐标</p><h3 id="键盘事件（KeyboardEvent）"><a href="#键盘事件（KeyboardEvent）" class="headerlink" title="键盘事件（KeyboardEvent）"></a>键盘事件（KeyboardEvent）</h3><p>使用键盘在页面上执行某些操作时触发</p><p>keydown：在按键被按下时触发</p><p>keypress，用户按下键盘上某个键并产生字符时触发，而且持续按住会重复触发。Esc键也会触发这个事件。DOM3 Events废弃了keypress事件，而推荐textInput事件</p><p>keyup，用户释放键盘上某个键时触发。 输入事件只有一个，即textInput。textInput会在文本被插入到文本框之前触发。</p><p>如果一个字符键被按住不放，keydown和keypress就会重复触发，直到这个键被释放</p><h3 id="滚轮事件（WheelEvent）"><a href="#滚轮事件（WheelEvent）" class="headerlink" title="滚轮事件（WheelEvent）"></a>滚轮事件（WheelEvent）</h3><p>使用鼠标滚轮（或类似设备）时触发</p><h3 id="输入事件（InputEvent）"><a href="#输入事件（InputEvent）" class="headerlink" title="输入事件（InputEvent）"></a>输入事件（InputEvent）</h3><p>向文档中输入文本时触发</p><h3 id="合成事件（CompositionEvent）"><a href="#合成事件（CompositionEvent）" class="headerlink" title="合成事件（CompositionEvent）"></a>合成事件（CompositionEvent）</h3><p>在使用某种IME（InputMethod Editor，输入法编辑器）输入字符时触发</p><p>IME通常需要同时按下多个键才能输入一个字符。合成事件用于检测和控制这种输入</p><h2 id="内存与性能"><a href="#内存与性能" class="headerlink" title="内存与性能"></a>内存与性能</h2><p>在js中，页面中事件处理程序的数量与页面整体性能直接相关</p><ul><li><p>每个函数都是对象，都占用内存空间，对象越多，性能越差。</p></li><li><p>为指定事件处理程序所需访问DOM的次数会先期造成整个页面交互的延迟。</p></li></ul><p>事件委托</p><p>事件委托利用事件冒泡，可以只使用一个事件处理程序来管理一种类型的事件。</p><p>使用事件委托，只要给所有元素共同的祖先节点添加一个事件处理程序，就可以解决问题。</p><p>删除事件处理程序</p><p>事件处理程序越多，页面性能越差，应该即时删除不用的事件处理程序。</p><ol><li>删除带有事件处理程序的元素，removeChild()或replaceChild()删除节点。innerHTML需要手动删除程序。</li><li>在onunload事件处理程序中趁页面尚未卸载先删除所有事件处理程序。</li></ol><p>模拟事件</p><p>DOM事件模拟</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 创建一个event对象</span>document<span class="token punctuation">.</span><span class="token function">createEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">:</span>String<span class="token punctuation">)</span></code></pre><p>自定义DOM事件</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客优化一</title>
      <link href="/2023/05/16/bo-ke-you-hua/"/>
      <url>/2023/05/16/bo-ke-you-hua/</url>
      
        <content type="html"><![CDATA[<h3 id="gitcalendar中提交次数不显示"><a href="#gitcalendar中提交次数不显示" class="headerlink" title="gitcalendar中提交次数不显示"></a>gitcalendar中提交次数不显示</h3><p>原因：github中url传回来的数据count里面为空，且为object对象</p><p>解决：在gitcalendar.pug和gitcalendar-js.pug中修改count部分内容为intensity（String类型）即可</p><h3 id="添加简易sh运行脚本"><a href="#添加简易sh运行脚本" class="headerlink" title="添加简易sh运行脚本"></a>添加简易sh运行脚本</h3><p>添加sh运行脚本(文件后缀名为.sh)</p><h4 id="git-pull"><a href="#git-pull" class="headerlink" title="git-pull"></a>git-pull</h4><pre><code>// 拉取github中远程仓库的最新更改git pull</code></pre><h4 id="git-push"><a href="#git-push" class="headerlink" title="git-push"></a>git-push</h4><pre><code>// 添加到缓存git add .// 添加提交时的注释git commit -m &quot;deploy from hexo-admin&quot;// 提交到远程仓库git push</code></pre><h4 id="hexo-publish"><a href="#hexo-publish" class="headerlink" title="hexo-publish"></a>hexo-publish</h4><pre><code>// 清空本地缓存后重新部署到博客页面hexo cleanhexo generatehexo depoly</code></pre><p>在git bash中运行sh脚本</p><p>.&#x2F;hexo-publish.sh</p><h3 id="修改post文章的front-matter"><a href="#修改post文章的front-matter" class="headerlink" title="修改post文章的front-matter"></a>修改post文章的front-matter</h3><p>Blogroot\scaffolds\post.md中修改即可</p><p>添加文章封面：cover</p><p>添加文章页面顶部图片：top_img</p><h3 id="修改过程中遇到的小bug"><a href="#修改过程中遇到的小bug" class="headerlink" title="修改过程中遇到的小bug"></a>修改过程中遇到的小bug</h3><p>在解决上述问题的同时，遇到电脑突然重启，然后hexo d突然结束，下一次再hexo d时会报错：</p><p>cannot lock ref ‘HEAD’: unable to resolve reference ‘refs&#x2F;heads&#x2F;master’: reference broken</p><p>原因：在git进行push或者hexo d的时候改变了一些.deploy_git文件下的内容。</p><p>解决：</p><p>1、删除.deploy_git文件夹（物理性删除)</p><p>2、git bash中输入git config –global core.autocrlf false命令</p><p>3、hexo-publish.sh脚本运行</p><h3 id="使用github-action实现全自动部署"><a href="#使用github-action实现全自动部署" class="headerlink" title="使用github action实现全自动部署"></a>使用github action实现全自动部署</h3><h4 id="部署时报错"><a href="#部署时报错" class="headerlink" title="部署时报错"></a>部署时报错</h4><p><strong>fatal: the remote end hung up unexpectedly</strong><br><strong>Everything up-to-date</strong><br><strong>FATAL Something’s wrong. Maybe you can find the solution here: <a href="https://hexo.io/docs/troubleshooting.html">https://hexo.io/docs/troubleshooting.html</a></strong><br><strong>Error: Spawn failed</strong><br>    at ChildProcess.<anonymous> (D:\Blog\node_modules\hexo-util\lib\spawn.js:51:21)<br>    at ChildProcess.emit (node:events:527:28)<br>    at ChildProcess.cp.emit (D:\Blog\node_modules\cross-spawn\lib\enoent.js:34:29)<br>    at Process.ChildProcess._handle.onexit (node:internal&#x2F;child_process:291:12)</p><h4 id="github-action"><a href="#github-action" class="headerlink" title="github action"></a>github action</h4><p><a href="https://github.com/features/actions">Github Action</a>是 GitHub于2018年10月推出的一个<strong>CI（持续集成Continuous Integration）\CD（持续交付Continuous Delivery、持续部署Continuous Deployment）服务</strong>。</p><p>每次部署Hexo都需要运行指令三件套，随着文章越来越多，编译的时间也越来越长，通过<code>Github Action</code>，我们只需要在每次完成博客的编写或修改以后，将改动直接<code>push</code>到远程仓库，之后的编译部署的工作统统交给<code>CI</code>来完成即可，如果是看过<a href="https://akilar.top/posts/54c08a4b/">Coding部署教程</a>的小伙伴，应该对这种持续部署的操作有所感触。</p><pre><code># 在记事本中逐个记录，方便替换，以下为我的示例[Blogroot]：D:\Blog[SourceRepo]：YangZouy/Hexo[SiteBlogRepo]  [GithubBlogRepo]：YangZouy.github.io[SiteUsername]  [GithubUsername]：YangZouy[SiteToken]  [GithubToken]：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[GithubEmail]：3075879316@qq.com</code></pre><blockquote><p>这里补充一些常用的github命令</p><pre><code>// 初始化gitgit init// 简历本地仓库与远程仓库的链接git remote add origin ssh/http链接（远程仓库）// 要是提示origin已经存在，那么执行git remote rm origin// 把项目推送到远程仓库// .为全部的意思，把项目所有文件加到缓存区git add .// 把缓存区里的文件提交到本地仓库git commit -m &quot;注释&quot;// 将远程仓库与本地仓库同步git pull --rebase orgin main// 把仓库中的文件推送到github仓库git push -u origin main// 添加分支maingit branch -M main// 创建分支git branch 分支名// 切换分支git checkout 分支// 查看所有分支git branch -a // 分支合并git merge 分支 (把分支合并到当前分支)// 删除本地分支git branch -d 分支// 重命名分支git branch -m 旧分支 新分支 </code></pre></blockquote><p>在部署时遇到的问题：</p><p>1、本地分支master与远程分支main的不同导致commit时不成功，本地分支改名成main后在.&#x2F;github&#x2F;workflows&#x2F;autodeploy.yml文件中依旧需要写成master:main </p><p>2、这里在私人仓库中需要添加GITHUBUSERNAME、GITHUBEMAIL、GITHUBTOKEN </p>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第16章 DOM2和DOM3</title>
      <link href="/2023/05/11/di-16-zhang-dom2-he-dom3/"/>
      <url>/2023/05/11/di-16-zhang-dom2-he-dom3/</url>
      
        <content type="html"><![CDATA[<h1 id="第16章-DOM2和DOM3"><a href="#第16章-DOM2和DOM3" class="headerlink" title="第16章 DOM2和DOM3"></a>第16章 DOM2和DOM3</h1><p>DOM的演进，里面的API方法用的不多， 目前不详细读</p><h2 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h2><p>html的样式有3中定义方式：外部样式表&lt;link&gt;、文档样式表&lt;style&gt;、元素特定样式（使用style属性）</p><h3 id="存取元素样式"><a href="#存取元素样式" class="headerlink" title="存取元素样式"></a>存取元素样式</h3><img src="https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/CSS%E5%B1%9E%E6%80%A7%E4%B8%8Estyle%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%AD%89%E4%BB%B7%E5%B1%9E%E6%80%A7%E5%AF%B9%E6%AF%94.jpg" width="600px" align='left'/><p>大多数属性名会这样直接转换过来，但是float不能，因为它是js的保留字，它在style对象中对应的属性应该是cssFloat。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 设置背景颜色</span>myDiv<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 修改大小</span>myDiv<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">"100px"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置边框</span>myDiv<span class="token punctuation">.</span>style<span class="token punctuation">.</span>border <span class="token operator">=</span> <span class="token string">"1px solid black"</span><span class="token punctuation">;</span> </code></pre><p>除了设置style属性之外， 还可以进行获取</p><pre class=" language-html"><code class="language-html">// 通过style属性设置的值通过style对象获取<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myDiv<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">25</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myDiv<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgrountColor<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myDiv<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>剩下的之后再读</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第3章 语言基础</title>
      <link href="/2023/05/10/di-3-zhang-yu-yan-ji-chu/"/>
      <url>/2023/05/10/di-3-zhang-yu-yan-ji-chu/</url>
      
        <content type="html"><![CDATA[<h4 id="第3章-语言基础"><a href="#第3章-语言基础" class="headerlink" title="第3章 语言基础"></a>第3章 <code>语言基础</code></h4><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><p>区分大小写，ECMAScript中一切都区分大小写</p><p>标识符：变量、函数、属性或者函数参数的名称，可以由一个或者多个下列字符组成：</p><p>第一个字符必须是一个字母、下划线或者美元符号</p><p>剩下的其他字符可以是字母、下划线、美元符号或者数字</p><p>推荐使用驼峰大小写形式，不是强制性，但是这种形式跟ECMAscript内置函数和对象的命名方式一致，所以算是最佳实践。</p><p>严格模式：ES5新增的概念，严格模式是一种不同的js解析和执行模型，ES3的一些不规范写法在这种模式下会被处理，对于不安全的活动将抛出错误。使用需要在脚本开头加上：</p><p>“use strict”;</p><p>也可以单独指定一个函数在严格模式下执行，只要把这个预处理指令放到函数体开头</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token string">"use strict"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 函数体 </span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> </code></pre><p>严格模式会影响 JavaScript 执行的很多方面，因此本书在用到它时会明确指出来。所有现代浏览器 都支持严格模式。</p><p>语句</p><p>1、尽量加上；（加分号有助于防止省略造成的问题，便于开发者通过删除空行来压缩代码，某些情况下可以提升性能）</p><p>2、尽量使用代码块，即使if中要执行的只有一条语句，在控制语句中使用的代码块可以让内容更加清晰，在需要修改代码时也可以减少出错的可能性。</p><h5 id="关键字与保留字"><a href="#关键字与保留字" class="headerlink" title="关键字与保留字"></a>关键字与保留字</h5><p>关键字有特殊的用途，比如表示控制语句中的开始和结束，或者执行特定的操作，保留字在语言中没有特定的用途，但它们是保留给将来做关键字用的。</p><p>一般，都不要使用关键字和保留字作为标识符和属性名，以确保兼容过去和未来的ECMAScript版本。</p><h5 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h5><p>变量可以用于保存任何类型的数据，每个变量都只不过是一个用户保存任意值的命名占位符。</p><p>const和let只能在ES6或者更晚的版本中使用，var在所有版本中都可以使用</p><h6 id="var声明作用域"><a href="#var声明作用域" class="headerlink" title="var声明作用域"></a>var声明作用域</h6><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">"hi"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 局部变量</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 出错！</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  message <span class="token operator">=</span> <span class="token string">"hi"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 全局变量 在函数外部可以访问 </span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "hi" </span></code></pre><p>虽然可以通过省略 var 操作符定义全局变量，但不推荐这么做。在局部作用域中定 义的全局变量很难维护，也会造成困惑。这是因为不能一下子断定省略 var 是不是有意而 为之。在严格模式下，如果像这样给未声明的变量赋值，则会导致抛出 ReferenceError。</p><h6 id="var声明提升"><a href="#var声明提升" class="headerlink" title="var声明提升"></a>var声明提升</h6><p>将var的变量声明都拉到当前作用域的顶部</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined </span><span class="token comment" spellcheck="true">// 上述代码等价于</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> age<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  age <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span></code></pre><h6 id="let声明"><a href="#let声明" class="headerlink" title="let声明"></a>let声明</h6><p>let声明的范围是块作用域，而var声明的范围是函数作用域，块作用域是函数作用域的子集，因此适用于var的作用域限制同样也适用于let</p><p>let不允许<strong>同一个作用域</strong>中出现冗余声明</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> age<span class="token punctuation">;</span> <span class="token keyword">let</span> age<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// SyntaxError；标识符 age 已经声明过了</span><span class="token comment" spellcheck="true">// 但是下面的代码可以，因为age不在同一个作用域</span><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 30 </span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 26 </span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> </code></pre><p>并且对声明冗余报错不会因混用let和var而受影响</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> name<span class="token punctuation">;</span> <span class="token keyword">let</span> name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// SyntaxError </span><span class="token keyword">let</span> age<span class="token punctuation">;</span> <span class="token keyword">var</span> age<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// SyntaxError</span></code></pre><p>1、暂时性死区</p><p>2、全局声明</p><p>let声明的变量不会在作用域中被提升，let在全局作用域中声明的变量不会成为window对象的属性（var声明的变量会）</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'Matt'</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'Matt' </span><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span></code></pre><p>3、条件声明</p><p>不能使用let进行条件声明</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'Nicholas'</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">36</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span> <span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token comment" spellcheck="true">// 假设脚本不确定页面中是否已经声明了同名变量</span> <span class="token comment" spellcheck="true">// 那它可以假设还没有声明过</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> name <span class="token operator">===</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> name<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// name 被限制在 if &amp;#123;&amp;#125; 块的作用域内</span> <span class="token comment" spellcheck="true">// 因此这个赋值形同全局赋值</span> name <span class="token operator">=</span> <span class="token string">'Matt'</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果 age 没有声明过，则会报错</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">catch</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> age<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// age 被限制在 catch &amp;#123;&amp;#125;块的作用域内</span> <span class="token comment" spellcheck="true">// 因此这个赋值形同全局赋值</span> age <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h6 id="const声明"><a href="#const声明" class="headerlink" title="const声明"></a>const声明</h6><p>与let基本相同，但是它声明变量时必须同时初始化变量，且尝试修改const声明会导致运行时错误。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span> age <span class="token operator">=</span> <span class="token number">36</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// TypeError: 给常量赋值</span><span class="token comment" spellcheck="true">// const 也不允许重复声明</span><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'Matt'</span><span class="token punctuation">;</span> <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'Nicholas'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// SyntaxError</span><span class="token comment" spellcheck="true">// const 声明的限制只适用于它指向的变量的引用。换句话说，如果 const 变量引用的是一个对象，</span><span class="token comment" spellcheck="true">// 那么修改这个对象内部的属性并不违反 const 的限制。</span><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span> person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Matt'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ok</span></code></pre><h6 id="声明风格以及最佳实践"><a href="#声明风格以及最佳实践" class="headerlink" title="声明风格以及最佳实践"></a>声明风格以及最佳实践</h6><p>1、不使用var</p><p>2、const优先，let次之</p><h5 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h5><h6 id="typeof操作符"><a href="#typeof操作符" class="headerlink" title="typeof操作符"></a>typeof操作符</h6><p>因为ES的类型系统是松散的，所以需要确定任意变量的数据类型</p><p>可以识别出基本数据类型（Number、Boolean、undefined、String、function、Symbol）</p><p>object类型和null会显示出object</p><p>但是调用typeof null返回的是object，这是因为特殊值null被认为是一个空对象的引用。</p><p>严格来讲，函数在 ECMAScript 中被认为是对象，并不代表一种数据类型。可是， 函数也有自己特殊的属性。为此，就有必要通过 typeof 操作符来区分函数和其他对象。</p><h6 id="undefined-类型"><a href="#undefined-类型" class="headerlink" title="undefined 类型"></a>undefined 类型</h6><p>Undefined 类型只有一个值，就是特殊值 undefined。当使用 var 或 let 声明了变量但没有初始 化时，就相当于给变量赋予了 undefined 值。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> message<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这个变量被声明了，只是值为 undefined </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "undefined" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "undefined" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "undefined"</span></code></pre><p>message声明了但是未赋值，age并没有被声明，即使未初始化的变量会被自动赋予 undefined 值，<strong>但我们仍然建议在声明变量的 同时进行初始化。</strong>这样，当 typeof 返回”undefined”时，你就会知道那是因为给定的变 量尚未声明，而不是声明了但未初始化。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> message<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这个变量被声明了，只是值为 undefined </span><span class="token comment" spellcheck="true">// age 没有声明 </span><span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 这个块不会执行</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>message<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 这个块会执行</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 这里会报错</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> </code></pre><h6 id="null类型"><a href="#null类型" class="headerlink" title="null类型"></a>null类型</h6><p>null值表示一个空对象指针，这也是给typeof传一个null会返回object的原因。</p><p>在定义将来要保存对象值的变量时，建议使用null来初始化，不要使用其他值，这样，只要检查这个变量的值是不是null就可以知道这个变量是否在后来被重新赋予了一个对象的引用。</p><p>undefined值是由null值派生来的，null &#x3D;&#x3D; undefined （true）null是一个假值，因此，如果需要，可以用更简洁的方式检测它。<strong>不过要记住，也有很多其他可 能的值同样是假值。所以一定要明确自己想检测的就是 null 这个字面值，而不仅仅是假值。</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token keyword">let</span> age<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// age现在是undefined</span><span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 这个块不会执行</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>message<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 这个块会执行</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 这个块不会执行</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 这个块会执行</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  </code></pre><h6 id="boolean类型"><a href="#boolean类型" class="headerlink" title="boolean类型"></a>boolean类型</h6><p>true和false</p><p>虽然布尔值只有两个，但是所有其他ES类型的值都有相应布尔值的等价形式，可以调用Boolean()将其他类型的值转换为布尔值。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">"Hello world!"</span><span class="token punctuation">;</span><span class="token keyword">let</span> messageToBoolean <span class="token operator">=</span> <span class="token function">Boolean</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><img src='https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/%E4%B8%8D%E5%90%8C%E7%B1%BB%E5%9E%8B%E4%B8%8Eboolean%E5%80%BC%E7%9A%84%E8%BD%AC%E6%8D%A2.jpg' width='800px' align='left'><p>理解上述转换非常重要，像if等流控制语句会自动执行其他类型值到布尔值的转换。</p><h6 id="Number类型"><a href="#Number类型" class="headerlink" title="Number类型"></a>Number类型</h6><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> intNum <span class="token operator">=</span> <span class="token number">56</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 整数</span><span class="token keyword">let</span> octalNum <span class="token operator">=</span> <span class="token number">070</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 八进制的56 前缀必须是0然后是相应的八进制数字 0-7</span><span class="token keyword">let</span> octalNum2 <span class="token operator">=</span> <span class="token number">079</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 含有非法数字9 所以会认为是无效的八进制值，当成79处理</span><span class="token comment" spellcheck="true">// 八进制字面量在严格模式下是无效的，会导致javascript引擎抛出语法错误</span><span class="token keyword">let</span> hexNUm1 <span class="token operator">=</span> <span class="token number">0xA</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 前缀是0x（区分大小写） 然后是十六进制数字（0-9&amp;&amp; A-F）十六进制中大小写均可</span></code></pre><p>由于 JavaScript 保存数值的方式，实际中可能存在正零（+0）和负零（0）。正零和 负零在所有情况下都被认为是等同的，这里特地说明一下。</p><p>1、浮点值</p><p>要定义浮点值，数值中必须包含小数点，而且小数点后面必须至少有一个数字。</p><p>因为存储浮点值使用的内存空间是存储整数值的两倍，所以 ECMAScript 总是想方设法把值转换为 整数。在小数点后面没有数字的情况下，数值就会变成整数。类似地，如果数值本身就是整数，只是小 数点后面跟着 0（如 1.0），那它也会被转换为整数。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> floatNum1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 小数点后面没有数字，当成整数 1 处理</span><span class="token keyword">let</span> floatNum2 <span class="token operator">=</span> <span class="token number">10.0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 小数点后面是零，当成整数 10 处理</span></code></pre><p>对于非常大或非常小的数值，浮点值可以用科学记数法来表示。科学记数法用于表示一个应该乘以 10 的给定次幂的数值。ECMAScript 中科学记数法的格式要求是一个数值（整数或浮点数）后跟一个大 写或小写的字母 e，再加上一个要乘的 10 的多少次幂。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> floatNum <span class="token operator">=</span> <span class="token number">3.125e7</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 等于 31250000 </span></code></pre><p>2、值的范围</p><p>ES可以表示的最小的数值：Number.MIN_VALUE，这个值在多数浏览器中是 5e-324；</p><p>ES可以表示的最大的数值：Number.MAX_VALUE</p><p>如果某个计算得到的数值超过了js可以表示的范围，那么这个值会被自动转换为一个特殊的Infinity（无穷值）</p><p>要确定一个值是不是有限大（即介于 JavaScript 能表示的 最小值和最大值之间），可以使用 isFinite()函数，如下所示：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> result <span class="token operator">=</span> Number<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">+</span> Number<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isFinite</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false </span></code></pre><p>3、NaN（Not a Number）</p><p>表示本来要返回数值的操作 失败了（而不是抛出错误）。</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// NaN </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0</span><span class="token operator">/</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Infinity </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">/</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -Infinity</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false NaN 不等于包括 NaN 在内的任何值 任何涉及 NaN 的操作始终返回 NaN（如 NaN/10）</span><span class="token comment" spellcheck="true">// ECMAScript 提供了 isNaN()函数。该函数接收一个参数，可以是任意数据类型，然后判断这个参数是否“不是数值” 任何不能转换为数值的值都会导致这个函数返回true。</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false，10 是数值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false，可以转换为数值 10 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true，不可以转换为数值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false，可以转换为数值 1 </span></code></pre><p>4、数值转换</p><p>Number()、parseInt()和 parseFloat()。Number()是 转型函数，可用于任何数据类型。后两个函数主要用于将字符串转换为数值。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"1234blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1234 </span><span class="token keyword">let</span> num2 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// NaN</span><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"0xAF"</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 175 指定了16进制的情况下，可以省略0x</span><span class="token keyword">let</span> num2 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 8，按八进制解析</span></code></pre><h6 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h6><p>1、字符字面量</p><table><thead><tr><th align="center">字符字面量</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">\n</td><td align="center">换行</td></tr><tr><td align="center">\t</td><td align="center">制表</td></tr><tr><td align="center">\b</td><td align="center">退格</td></tr><tr><td align="center">\r</td><td align="center">回车</td></tr><tr><td align="center">\f</td><td align="center">换页</td></tr><tr><td align="center">\\</td><td align="center">反斜杠</td></tr><tr><td align="center">\‘</td><td align="center">单引号，在字符串以单引号标示时使用</td></tr><tr><td align="center">\“</td><td align="center">双引号</td></tr><tr><td align="center">\&#96;</td><td align="center">反引号</td></tr><tr><td align="center">\xnn</td><td align="center">以十六进制编码nn表示的字符，n是0-F</td></tr><tr><td align="center">\unnnn</td><td align="center">以十六进制编码nnnn表示的Unicode字符，n是0-F</td></tr></tbody></table><p>2、字符串特点</p><p>字符串是不可变的（immutable)</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> lan <span class="token operator">=</span> <span class="token string">"java"</span><span class="token punctuation">;</span>lan <span class="token operator">=</span> lan <span class="token operator">+</span> <span class="token string">"script"</span><span class="token punctuation">;</span></code></pre><p>整个过程首先会分配一个足够容纳 10 个字符的空间，然后填充上 “Java”和”Script”。最后销毁原始的字符串”Java”和字符串”Script”，因为这两个字符串都没有用 了。所有处理都是在后台发生的，而这也是一些早期的浏览器（如 Firefox 1.0 之前的版本和 IE6.0）在 拼接字符串时非常慢的原因。这些浏览器在后来的版本中都有针对性地解决了这个问题。</p><p>3、转换为字符串</p><p>toString()： null 和 undefined 值没有这个方法，数值、布尔值、对象和字符串值都有这个方法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span> <span class="token keyword">let</span> ageAsString <span class="token operator">=</span> age<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 字符串"11" </span><span class="token keyword">let</span> found <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token keyword">let</span> foundAsString <span class="token operator">=</span> found<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 字符串"true" </span><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 一般来说，toString不接收任何参数，不过，在对数值调用这个方法时，toString可以接收一个底数参数，即以什么底数来输出数值的字符串表示</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "10" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "1010" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "12" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "10" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "a"</span></code></pre><p>String（）：如果不确定一个值是不是null或者undefined，可以使用该函数</p><ul><li>如果该值有toString方法，则会调用该方法并返回结果</li><li>如果值是null，返回’null’</li><li>如果值是undefined，返回’undefined’</li></ul><p>+：用加号操作符给一个值加上一个空字符串” “也可以将其转换成字符串</p><p>4、模板字符串</p><p>ES6新增了使用模板字面量定义字符串的能力。与使用单引号或者双引号不同，模板字面量保留换行字符，可以跨行定义字符串：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> myMultiLineString <span class="token operator">=</span> <span class="token string">'first line\nsecond line'</span><span class="token punctuation">;</span> <span class="token keyword">let</span> myMultiLineTemplateLiteral <span class="token operator">=</span> <span class="token template-string"><span class="token string">`first line second line`</span></span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myMultiLineString<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// first line </span><span class="token comment" spellcheck="true">// second line" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myMultiLineTemplateLiteral<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// first line</span><span class="token comment" spellcheck="true">// second line </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myMultiLineString <span class="token operator">===</span> myMultiLinetemplateLiteral<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>模板字符串在定义模板时非常有用，比如下面的HTML模板：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> pageHTML <span class="token operator">=</span> <span class="token template-string"><span class="token string">` &lt;div>  &lt;a href="#">  &lt;span>Jake&lt;/span>  &lt;/a> &lt;/div>`</span></span><span class="token punctuation">;</span> </code></pre><p>由于模板字面量会保持反引号内部的空格，因此在使用时需要格外注意</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 这个模板字面量在换行符之后有 25 个空格符</span><span class="token keyword">let</span> myTemplateLiteral <span class="token operator">=</span> <span class="token template-string"><span class="token string">`first line  second line`</span></span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myTemplateLiteral<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 47 </span><span class="token comment" spellcheck="true">// 这个模板字面量以一个换行符开头</span><span class="token keyword">let</span> secondTemplateLiteral <span class="token operator">=</span> <span class="token template-string"><span class="token string">` first line second line`</span></span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>secondTemplateLiteral<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true </span><span class="token comment" spellcheck="true">// 这个模板字面量没有意料之外的字符</span><span class="token keyword">let</span> thirdTemplateLiteral <span class="token operator">=</span> <span class="token template-string"><span class="token string">`first line second line`</span></span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>thirdTemplateLiteral<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// first line </span><span class="token comment" spellcheck="true">// second line </span></code></pre><p>5、字符串插值</p><p>字符串插值通过在${}中使用一个 JavaScript 表达式实现，引号需要使用反引号</p><p>6、模板字面量标签函数</p><p>7、原始字符串</p><p>使用String.raw标签函数可以获取原始的模板字面量内容（如换行符或者Unicode字符），而不是被转换后的字符表示。</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`\u00A9`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// © </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span>raw<span class="token template-string"><span class="token string">`\u00A9`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// \u00A9</span><span class="token comment" spellcheck="true">// 换行符示例</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`first line\nsecond line`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// first line </span><span class="token comment" spellcheck="true">// second line </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span>raw<span class="token template-string"><span class="token string">`first line\nsecond line`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "first line\nsecond line"</span></code></pre><h6 id="Symbol类型"><a href="#Symbol类型" class="headerlink" title="Symbol类型"></a>Symbol类型</h6><p>Symbol类型是ES6新增的数据类型，</p><p>1、基本使用</p><p>使用Symbol()函数初始化，因为符号本身就是原始类型，使用typeof操作符对符号返回symbol。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> genericSymbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> genericSymbol<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>最重要的是Symbol函数不能与new关键字一起作为构造函数使用。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> myBoolean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myBoolean<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "object"</span><span class="token keyword">let</span> mySymbol <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mySymbol<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// TypeError:Symbol is not a constructor</span></code></pre><p>2、使用全局符号注册表</p><p>。。。</p><h6 id="Object类型"><a href="#Object类型" class="headerlink" title="Object类型"></a>Object类型</h6><p>数据和功能的集合，ES中的Object是派生其他对象的基类，Object类型的属性和方法在派生的对象上同样存在。</p><p>constructor：用于创建当前对象的函数</p><p>hasOwnProperty（propertyName）：用于判断当前对象实例上是否存在给定的属性</p><p>isPrototypeOf（object）：用于判断当前对象是否为另一个对象的原型</p><p>propertyIsEnumerable（propertyName）：用于判断给定的属性是否可以使用</p><p>toLocalString（）：返回对象的字符串表示，该字符串反映对象所在的本地化执行环境</p><p>toString（）：返回对象的字符串表示</p><p>valueof（）：返回对象对应的字符、数值、布尔值表示</p><h5 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h5><h6 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h6><p>++、–、+、-（放在变量前面表示正负，主要用于基本的算术，也可以用于数据类型转换）</p><h6 id="位操作符"><a href="#位操作符" class="headerlink" title="位操作符"></a>位操作符</h6><p>正值：以真正的二进制格式存储</p><p>负值：以补码的形式存储（正值的反码+1）</p><p>按位与、按位或…</p><h6 id="布尔操作符"><a href="#布尔操作符" class="headerlink" title="布尔操作符"></a>布尔操作符</h6><h5 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h5><h6 id="for-in语句"><a href="#for-in语句" class="headerlink" title="for-in语句"></a>for-in语句</h6><p>它是一种严格的迭代语句，用于枚举对象中的非符号键属性，ES中对象的属性是无序的，因此for-in语句不能保证返回对象属性的顺序。</p><h6 id="for-of语句"><a href="#for-of语句" class="headerlink" title="for-of语句"></a>for-of语句</h6><p>用于遍历可迭代对象的元素</p><h6 id="with语句"><a href="#with语句" class="headerlink" title="with语句"></a>with语句</h6><p>将代码作用域设置为特定的对象，使用with语句的主要场景是针对一个对象反复操作</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> qs <span class="token operator">=</span> location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> hostName <span class="token operator">=</span> lacation<span class="token punctuation">.</span>hostname<span class="token punctuation">;</span><span class="token keyword">let</span> url <span class="token operator">=</span> location<span class="token punctuation">.</span>href<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 上述可以转换为</span><span class="token keyword">with</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> qs <span class="token operator">=</span> search<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> hostName <span class="token operator">=</span> hostname<span class="token punctuation">;</span>  <span class="token keyword">let</span> url <span class="token operator">=</span> href<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> </code></pre><p>with语句用于连接location对象，这意味着在这个语句内部，每个变量首先会被认为是一个局部变量，如果没有找到局部变量，则会搜索location对象，看它是否有一个同名的属性。</p><p>严格模式下不允许使用with语句，否则会抛出错误，由于with语句影响性能且难于调试其中的代码，通常不推荐在产品代码中使用with语句</p><h5 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h5><p>ES中的函数不需要指定是否返回值，因为任何函数在任何时候返回任何值，不指定返回值的函数实际上会返回undefined。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第15章 DOM扩展</title>
      <link href="/2023/05/08/di-15-zhang-dom-kuo-zhan/"/>
      <url>/2023/05/08/di-15-zhang-dom-kuo-zhan/</url>
      
        <content type="html"><![CDATA[<h1 id="第15章-DOM扩展"><a href="#第15章-DOM扩展" class="headerlink" title="第15章 DOM扩展"></a>第15章 DOM扩展</h1><p>DOM扩展的两个标准：Selectors API和HTML5</p><h2 id="Selectors-API"><a href="#Selectors-API" class="headerlink" title="Selectors API"></a>Selectors API</h2><h3 id="querySelector"><a href="#querySelector" class="headerlink" title="querySelector()"></a>querySelector()</h3><p>接受CSS选择符参数，返回匹配该模式的第一个后代元素。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 获取body元素</span><span class="token keyword">let</span> body <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取ID为“myDiv”的元素</span><span class="token keyword">let</span> myDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#myDiv'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取类名为“selected”的第一个元素</span><span class="token keyword">let</span> selected <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".selected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取类名为button的图片</span><span class="token keyword">let</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"img.button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="querySelectorAll"><a href="#querySelectorAll" class="headerlink" title="querySelectorAll()"></a>querySelectorAll()</h3><p>返回所有匹配的项，是个NodeList</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 取得 ID 为"myDiv"的&lt;div>元素中的所有&lt;em>元素</span><span class="token keyword">let</span> ems <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myDiv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"em"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 取得所有是&lt;p>元素子元素的&lt;strong>元素</span><span class="token keyword">let</span> strongs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"p strong"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="matches"><a href="#matches" class="headerlink" title="matches()"></a>matches()</h3><p>matches()方法接收一个 CSS 选择符参数，如果元素 匹配则该选择符返回 true，否则返回 false。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">"body.page1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true </span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> </code></pre><h2 id="元素遍历"><a href="#元素遍历" class="headerlink" title="元素遍历"></a>元素遍历</h2><p>Element Traversal API 为 DOM 元素添加了 5 个属性：</p><ul><li>childElementCount，返回子元素数量（不包含文本节点和注释）；</li><li>firstElementChild，指向第一个Element类型的子元素（Element版firstChild）；</li><li>lastElementChild，指向最后一个Element类型的子元素（Element版lastChild）；</li><li>previousElementSibling，指向前一个Element类型的同胞元素（Element版previousSibling）；</li><li>nextElementSibling，指向后一个Element类型的同胞元素（Element版nextSibling）。</li></ul><h2 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h2><p>HTML5 规范却包含了与标记相关的大量 JavaScript API 定义。其中有的 API 与 DOM 重合， 定义了浏览器应该提供的 DOM 扩展。</p><p>自 HTML4 被广泛采用以来，Web 开发中一个主要的变化是 class 属性用得越来越多，其用处是为 元素添加样式以及语义信息。自然地，JavaScript 与 CSS 类的交互就增多了，包括动态修改类名，以及 根据给定的一个或一组类名查询元素，等等。为了适应开发者和他们对 class 属性的认可，HTML5 增 加了一些特性以方便使用 CSS 类。</p><h3 id="CSS类扩展"><a href="#CSS类扩展" class="headerlink" title="CSS类扩展"></a>CSS类扩展</h3><h4 id="getElementsByClassName"><a href="#getElementsByClassName" class="headerlink" title="getElementsByClassName()"></a>getElementsByClassName()</h4><p>返回一个包含所有类名为className的元素的NodeList.</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 取得所有类名中包含"username"和"current"元素</span><span class="token comment" spellcheck="true">// 这两个类名的顺序无关紧要</span><span class="token keyword">let</span> allCurrentUsernames <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">"username current"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 取得 ID 为"myDiv"的元素子树中所有包含"selected"类的元素</span><span class="token keyword">let</span> selected <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myDiv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">"selected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><h4 id="classList"><a href="#classList" class="headerlink" title="classList"></a>classList</h4><p>要操作类名，可以通过className属性实现添加、删除和替换。但是className是一个字符串，所以每次操作之后都需要重新设置这个值才能生效，即使只改动了部分字符串也一样。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 要删除div元素的3个类名中的user 需要把className拆开，删除不想要的哪个，再把包含剩余类的字符串设置回去 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bd user disabled<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 要删除"user"类</span>    <span class="token keyword">let</span> targetClass <span class="token operator">=</span> <span class="token string">"user"</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 把类名拆成数组</span>    <span class="token keyword">let</span> classNames <span class="token operator">=</span> div<span class="token punctuation">.</span>className<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex">/\s+/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 找到要删除类名的索引</span>    <span class="token keyword">let</span> idx <span class="token operator">=</span> classNames<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 如果有则删除</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      classNames<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 重新设置类名</span>    div<span class="token punctuation">.</span>className <span class="token operator">=</span> classNames<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 有了classList就可以将上述代码转换成为 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 删除user类</span>    div<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 添加current类型</span>    div<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"current"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 迭代类名</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token keyword">class</span> <span class="token class-name">of</span> div<span class="token punctuation">.</span>classList<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token function">doStuff</span><span class="token punctuation">(</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>classList 是一个新的集合类型 DOMTokenList 的实例。与其他 DOM 集合类型一样，DOMTokenList 也有 length 属性表示自己包含多少项，也可以通过 item()或中括号取得个别的元素。此外， DOMTokenList 还增加了以下方法。</p><p>add(value)，向类名列表中添加指定的字符串值 value。如果这个值已经存在，则什么也不做。</p><p>contains(value)，返回布尔值，表示给定的 value 是否存在。</p><p>remove(value)，从类名列表中删除指定的字符串值 value。</p><p>toggle(value)，<strong>如果类名列表中已经存在指定的 value，则删除；如果不存在，则添加</strong>。</p><h3 id="焦点管理"><a href="#焦点管理" class="headerlink" title="焦点管理"></a>焦点管理</h3><ul><li>document.activeElement：始终包含当前拥有焦点的DOM元素</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myButton"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> button<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>activeElement <span class="token operator">===</span> button<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>默认情况下，document.activeElement 在页面刚加载完之后会设置为document.body,而在页面完全加载之前，document.activeElement的值为null.</p><ul><li>document.hasFocus()方法，该方法返回布尔值，表示文档是否拥有焦点</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myButton"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>button<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">hasFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><h3 id="HTMLDocument扩展"><a href="#HTMLDocument扩展" class="headerlink" title="HTMLDocument扩展"></a>HTMLDocument扩展</h3><p>document.readyState：loading，表示文档正在加载；complete，表示文档加载完成。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token string">"complete"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 执行操作</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> </code></pre><p>document.compatMode：CSS1Compat标准模式下；BackCompat混杂模式下</p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>compatMode <span class="token operator">==</span> <span class="token string">"CSS1Compat"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Standards mode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Quirks mode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> </code></pre><blockquote><p>浏览器渲染模式：标准模式和怪异模式 （所谓的标准模式是指，浏览器按W3C标准解析执行代码；怪异模式则是使用浏览器自己的方式解析执行代码，因为不同浏览器解析执行的方式不一样，所以我们称之为怪异模式。）</p><p>文档声明：&lt;!DOCTYPE&gt;声明必须是HTML文档的第一行，它是指示web浏览器关于页面使用哪个HTML版本进行编写的指令。DTD：文档类型定义(Document Type Definition)是一套关于标记符的语法规则。DTD 在 &lt;!DOCTYPE&gt; 声明中引用。</p><p> <strong>没有文档声明的话大多数浏览器都将会转换到为怪异模式(quirk mode)，有些地方会称为混杂模式或兼容模式</strong> 如果在文档开头有文档声明，浏览器就会遵循声明中DTD文档标准进入标准模式CSS1Compat</p><p>标准模式与怪异模式之间的区别：浏览器使用怪异模式解析渲染页面（目的是向后兼容），会按照自己的方式来解析渲染页面，在不同的浏览器就会显示不同的样式，而且，由于不遵循文档标准，所以对不严格的语法会产生兼容。标准模式&#x2F;严格模式的话，浏览器使用W3C的标准解析渲染页面。</p></blockquote><p>document.head：指向文档的元素。可以像下面这样直接取得元素</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> head <span class="token operator">=</span> document<span class="token punctuation">.</span>head<span class="token punctuation">;</span> </code></pre><p>document.characterSet ：表示文档实际使用的字符集，也可以用来指定新的字符集，默认值是“UTF-16”，可以通过&lt;meta&gt;或者响应头来修改</p><pre class=" language-js"><code class="language-js">document<span class="token punctuation">.</span>characterSet <span class="token operator">=</span> <span class="token string">"UTF-8"</span><span class="token punctuation">;</span></code></pre><h3 id="自定义数据属性"><a href="#自定义数据属性" class="headerlink" title="自定义数据属性"></a>自定义数据属性</h3><p>HTML5 允许给元素指定非标准的属性，但要使用前缀 data-以便告诉浏览器，这些属性既不包含 与渲染有关的信息，也不包含元素的语义信息。除了前缀，自定义属性对命名是没有限制的，data-后 面跟什么都可以。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 在html中行内元素中添加 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myDiv<span class="token punctuation">"</span></span> <span class="token attr-name">data-appId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>12345<span class="token punctuation">"</span></span> <span class="token attr-name">data-myname</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Nicholas<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 有了自定义属性之后，可以通过元素的dataset属性来访问 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">let</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myDiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 取得自定义数据属性的值</span>    <span class="token keyword">let</span> appId <span class="token operator">=</span> div<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>appId<span class="token punctuation">;</span>     <span class="token keyword">let</span> myName <span class="token operator">=</span> div<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>myname<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 设置自定义数据属性的值</span>    div<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>appId <span class="token operator">=</span> <span class="token number">23456</span><span class="token punctuation">;</span>     div<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>myname <span class="token operator">=</span> <span class="token string">"Michael"</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 有"myname"吗？</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>div<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>myname<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Hello, $&amp;#123;div.dataset.myname&amp;#125;`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="插入标记"><a href="#插入标记" class="headerlink" title="插入标记"></a>插入标记</h3><h4 id="innerHTML"><a href="#innerHTML" class="headerlink" title="innerHTML"></a>innerHTML</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>This is a <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>paragraph<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span> with a list following it.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Item 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Item 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Item 3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> </code></pre><p>在读取 innerHTML 属性时，会返回元素所有后代的 HTML 字符串，包括元素、注释和文本节点。 而在写入 innerHTML 时，则会根据提供的字符串值以新的 DOM 子树替代元素中原来包含的所有节点。</p><pre class=" language-js"><code class="language-js">div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"Hello &amp; welcome, &lt;b>\"reader\"!&lt;/b>"</span><span class="token punctuation">;</span> </code></pre><p>这里会把原来div里面的所有元素都替换成为现在的设置</p><h4 id="outerHTML"><a href="#outerHTML" class="headerlink" title="outerHTML"></a>outerHTML</h4><p>读取 outerHTML 属性时，会返回调用它的元素（及所有后代元素）的 HTML 字符串。在写入 outerHTML 属性时，调用它的元素会被传入的 HTML 字符串经解释之后生成的 DOM 子树取代。</p><p>对于上述的那一段html代码</p><pre class=" language-html"><code class="language-html">console.log("div.innerHTML:", div.innerHTML)// 下面显示控制台中的结果div.innerHTML:     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>This is a <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>paragraph<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span> with a list following it.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Item 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Item 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Item 3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span> console.log("div.outerHtml:", div.outerHTML)// 下面显示控制台中的结果div.outerHtml: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>This is a <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>paragraph<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span> with a list following it.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Item 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Item 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Item 3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 这里新的p元素会取代DOM树中原来的div元素</span>div<span class="token punctuation">.</span>outerHTML <span class="token operator">=</span> <span class="token string">"&lt;p>This is a paragraph.&lt;/p>"</span><span class="token punctuation">;</span></code></pre><h4 id="insertAdjacentHTML和insertAdjacentText"><a href="#insertAdjacentHTML和insertAdjacentText" class="headerlink" title="insertAdjacentHTML和insertAdjacentText"></a>insertAdjacentHTML和insertAdjacentText</h4><p>这两个方法接受两个参数：要插入标记的位置和要插入的 HTML 或文本。第一个参数 必须是下列值中的一个</p><p> “beforebegin”，插入当前元素前面，作为前一个同胞节点； </p><p> “afterbegin”，插入当前元素内部，作为新的子节点或放在第一个子节点前面； </p><p> “beforeend”，插入当前元素内部，作为新的子节点或放在最后一个子节点后面； </p><p> “afterend”，插入当前元素后面，作为下一个同胞节点。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 作为前一个同胞节点插入</span>element<span class="token punctuation">.</span><span class="token function">insertAdjacentHTML</span><span class="token punctuation">(</span><span class="token string">"beforebegin"</span><span class="token punctuation">,</span> <span class="token string">"&lt;p>Hello world!&lt;/p>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> element<span class="token punctuation">.</span><span class="token function">insertAdjacentText</span><span class="token punctuation">(</span><span class="token string">"beforebegin"</span><span class="token punctuation">,</span> <span class="token string">"Hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 作为第一个子节点插入</span>element<span class="token punctuation">.</span><span class="token function">insertAdjacentHTML</span><span class="token punctuation">(</span><span class="token string">"afterbegin"</span><span class="token punctuation">,</span> <span class="token string">"&lt;p>Hello world!&lt;/p>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> element<span class="token punctuation">.</span><span class="token function">insertAdjacentText</span><span class="token punctuation">(</span><span class="token string">"afterbegin"</span><span class="token punctuation">,</span> <span class="token string">"Hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 作为最后一个子节点插入</span>element<span class="token punctuation">.</span><span class="token function">insertAdjacentHTML</span><span class="token punctuation">(</span><span class="token string">"beforeend"</span><span class="token punctuation">,</span> <span class="token string">"&lt;p>Hello world!&lt;/p>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> element<span class="token punctuation">.</span><span class="token function">insertAdjacentText</span><span class="token punctuation">(</span><span class="token string">"beforeend"</span><span class="token punctuation">,</span> <span class="token string">"Hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 作为下一个同胞节点插入</span>element<span class="token punctuation">.</span><span class="token function">insertAdjacentHTML</span><span class="token punctuation">(</span><span class="token string">"afterend"</span><span class="token punctuation">,</span> <span class="token string">"&lt;p>Hello world!&lt;/p>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> element<span class="token punctuation">.</span> <span class="token function">insertAdjacentText</span><span class="token punctuation">(</span><span class="token string">"afterend"</span><span class="token punctuation">,</span> <span class="token string">"Hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><h3 id="专有扩展"><a href="#专有扩展" class="headerlink" title="专有扩展"></a>专有扩展</h3><h4 id="children"><a href="#children" class="headerlink" title="children"></a>children</h4><p>children 属性是一个 HTMLCollection，只包含元素的 Element 类型的子节点。</p><h4 id="contains"><a href="#contains" class="headerlink" title="contains"></a>contains</h4><p>DOM 编程中经常需要确定一个元素是不是另一个元素的后代。</p><h4 id="插入标记-1"><a href="#插入标记-1" class="headerlink" title="插入标记"></a>插入标记</h4><ul><li><p>innerText</p><p>在用于读取值时， innerText 会按照深度优先的顺序将子树中所有文本节点的值拼接起来。在用于写入值时，innerText 会<strong>移除元素的所有后代并插入一个包含该值的文本节点</strong>。</p></li><li><p>outerText</p><p>outerText 与 innerText 是类似的，只不过作用范围包含调用它的节点。要读取文本值时， outerText 与 innerText 实际上会返回同样的内容。但在写入文本值时，outerText 就大不相同了。 写入文本值时，outerText 不止会移除所有后代节点，而是会替换整个元素。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第14章 DOM</title>
      <link href="/2023/05/08/di-14-zhang-dom/"/>
      <url>/2023/05/08/di-14-zhang-dom/</url>
      
        <content type="html"><![CDATA[<h1 id="第14章-DOM"><a href="#第14章-DOM" class="headerlink" title="第14章 DOM"></a>第14章 DOM</h1><p>DOM文档对象模型，是html和xml文档的编程接口。</p><h2 id="节点层级"><a href="#节点层级" class="headerlink" title="节点层级"></a>节点层级</h2><p>任何HTML或XML文档都可以用DOM表示为一个由节点构成的层级结构。document节点表示每个文档的根节点。根节点的唯一子节点是html元素，我们称之为文档元素（documentElement）。</p><pre class=" language-html"><code class="language-html">Document  Element <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    Element <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>      Element <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>      Element <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span><span class="token punctuation">></span></span>    Element <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>      Element <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        Element <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span>          Element <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span><span class="token punctuation">></span></span></code></pre><p>html中的每段标记都可以表示为这个树形结构中的一个节点，DOM中总共有12中节点类型，这些类型都继承一种基本类型。</p><h3 id="Node类型"><a href="#Node类型" class="headerlink" title="Node类型"></a>Node类型</h3><p>在javascript中，所有节点类型都继承自Node类型，因此所有类型都共享相同的基本属性和方法。每个节点都有nodeType属性，表示该节点的类型。</p><p>Node类型上的12个数值常量表示为：</p><ul><li>Node.ELEMENT_NODE <strong>元素节点 1</strong>，nodeName始终等于元素的标签名，nodeValue始终为null</li><li>Node.ATTRIBUTE_NODE <strong>属性节点 2</strong></li><li>Node.TEXT_NODE <strong>文本节点 3</strong></li><li>Node.CDATA_SECTION_NODE CDATA节点 4</li><li>Node.ENTITY_REFERENCE_NODE 实体引用节点 5</li><li>Node.ENTITY_NODE 实体节点 6</li><li>Node.PROCESSING_INSTRUCTION_NODE 注释节点 7</li><li>Node.COMMENT_NODE 注释节点 8</li><li>Node.DOCUMENT_NODE 文档节点 9</li><li>Node.DOCUMENT_TYPE_NODE 文档类型节点 10</li><li>Node.DOCUMENT_FRAGMENT_NODE 文档片段节点 11</li><li>Node.NOTATION_NODE 注释节点 12 nodeName与nodeValue保存着有关节点的信息。</li></ul><p>每个节点都有一个childNodes属性，其中包含一个NodeList的实例，firstChild和lastChild分别指向childNodes中的第一个和最后一个子节点。</p><p>每个节点都有一个parentNode属性，指向其DOM树中的父元素。 hasChildNodes()返回节点是否有子节点。</p><h3 id="操作节点"><a href="#操作节点" class="headerlink" title="操作节点"></a>操作节点</h3><p>插入节点：</p><p>appendChild() 方法将一个节点添加到父节点的末尾。 </p><p>insertBefore() 添加节点到开头。</p><p>替换节点：</p><p>replaceChild()方法接收两个参数：要插入的节点和要替换的节点。要替换的节点会被返回并从文档树中完全移除，要插入的节点会取而代之。</p><p>移除节点：</p><p>removeChild()</p><p>复制节点：</p><p>cloneNode(boolean)会返回与调用它的节点一模一样的节点，传入一个布尔，代表是否深复制，深复制会复制节点上所有子节点。返回的节点没有父亲节点，可通过appendChild插入文档中。</p><h2 id="Document类型"><a href="#Document类型" class="headerlink" title="Document类型"></a>Document类型</h2><p>文档对象document是HTMLDocument的实例（HTMLDocument继承Document），表示整个HTML页面。</p><ul><li>nodeType等于9；</li><li>nodeName值为”#document”；</li><li>nodeValue值为null；</li><li>document.documentElement属性返回文档的根元素，即html标签。</li><li>document.body 属性返回文档的body元素，即body标签。</li><li>document.doctype 属性返回文档的doctype，即&lt;!DOCTYPE&gt;标签。</li><li>document.title 当前页面的标题，可修改</li><li>document.URL 当前页面的URL</li><li>…</li></ul><h2 id="Element类型"><a href="#Element类型" class="headerlink" title="Element类型"></a>Element类型</h2><p>Element表示XML或HTML元素，对外暴露出访问元素标签名、子节点和属性的能力。</p><ul><li><p>nodeType等于1；</p></li><li><p>nodeName值为元素的标签名；</p></li><li><p>nodeValue值为null；</p></li><li><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myDiv<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bd<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Body text<span class="token punctuation">"</span></span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name">dir</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ltr<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">let</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myDiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// "myDiv"</span><span class="token function">alert</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// "bd"</span><span class="token function">alert</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// "Body text"</span><span class="token function">alert</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>lang<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// "en"</span><span class="token function">alert</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// "ltr" 语言的书写方向：从左到右</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>可以直接通过元素来修改标签的内容。</p><p>与属性相关的DOM方法主要有3个：getAttribute()、setAttribute()和removeAttribute()。这些方法主要用于操纵属性。属性名不区分大小写。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myDiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// "myDiv"</span></code></pre></li></ul><p>创建元素</p><p>document.createElement(tag)</p><h2 id="Text类型"><a href="#Text类型" class="headerlink" title="Text类型"></a>Text类型</h2><ul><li>nodeType等于3；</li><li>nodeName值为”#text”；</li><li>nodeValue值为节点中包含的文本；</li><li>parentNode值为Element对象；</li><li>不支持子节点。</li></ul><h2 id="DOM编程"><a href="#DOM编程" class="headerlink" title="DOM编程"></a>DOM编程</h2><p>动态添加脚本</p><pre class=" language-html"><code class="language-html">&lt;script src = "foo.js"><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 如果使用dom进行操作 <span class="token operator">--</span><span class="token operator">></span><span class="token keyword">let</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"foo.js"</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>动态添加函数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>script<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">"function sayHi() &amp;#123;alert('hi~');&amp;#125;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>动态添加样式</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"link"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>link<span class="token punctuation">.</span>rel <span class="token operator">=</span> <span class="token string">"stylesheet"</span><span class="token punctuation">;</span>link<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">"text/css"</span><span class="token punctuation">;</span>link<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">"style.css"</span><span class="token punctuation">;</span><span class="token keyword">let</span> head <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementByTagName</span><span class="token punctuation">(</span><span class="token string">"head"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>动态添加style</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> style <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"style"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>style<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">"text/css"</span><span class="token punctuation">;</span>style<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">"body&amp;#123;background-color:red&amp;#125;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> head <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"head"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>style<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第13章：客户端检测</title>
      <link href="/2023/05/08/di-13-zhang-ke-hu-duan-jian-ce/"/>
      <url>/2023/05/08/di-13-zhang-ke-hu-duan-jian-ce/</url>
      
        <content type="html"><![CDATA[<h1 id="第13章：客户端检测"><a href="#第13章：客户端检测" class="headerlink" title="第13章：客户端检测"></a>第13章：客户端检测</h1><h2 id="能力检测"><a href="#能力检测" class="headerlink" title="能力检测"></a>能力检测</h2><p>又称为<strong>特性检测</strong>，<strong>测试浏览器是否支持某个特性</strong>。例如检测浏览器是否支持getElementById：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getElement</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 先检测最优的方法</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>getElementById<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 再检测备用方案</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>all<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> document<span class="token punctuation">.</span>all<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 实在不行再抛错</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"No way to retrieve element! "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="用户代理检测"><a href="#用户代理检测" class="headerlink" title="用户代理检测"></a>用户代理检测</h2><ul><li>navigator.userAgent 用户代理检测通过浏览器的用户代理字符串确定使用的是什么浏览器。</li><li>navigator.oscpu 对应用户代理字符串中操作系统&#x2F;系统架构相关信息。</li><li>navigator.vendor 包含浏览器开发商信息。</li><li>navigator.platform 表示浏览器所在的操作系统。</li><li>screen.colorDepth 和screen.pixelDepth返回一样的值，即显示器每像素颜色的位深。</li><li>screen.orientation 包含Screen Orientation API定义的屏幕信息。orientation.type和angle可以确定屏幕是否旋转。</li><li>navigator.geolocation 属性暴露了Geolocation API，可以让浏览器脚本感知当前设备的地理位置。</li><li>navigator. onLine 可以确定浏览器的联网状态。连网和断网会触发window的online和offline事件。</li><li>navigator.connection 网络连接状况。</li><li>navigator.getBattery() 属性暴露了Battery API，可以让浏览器脚本感知当前设备的电池状态。</li><li>navigator.hardwareConcurrency 返回浏览器支持的逻辑处理器核心数量</li><li>navigator.deviceMemory 返回设备大致的系统内存大小</li><li>navigator.maxTouchPoints 属性返回触摸屏支持的最大关联触点数量</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第12章 BOM</title>
      <link href="/2023/05/08/di-12-zhang-bom/"/>
      <url>/2023/05/08/di-12-zhang-bom/</url>
      
        <content type="html"><![CDATA[<h1 id="第12章：BOM"><a href="#第12章：BOM" class="headerlink" title="第12章：BOM"></a>第12章：BOM</h1><p>语法糖含义：相当于汉语里面的成语，即用更加简练的言语表达较复杂的含义，在得到广泛接受的情况下，可以提升交流的效率。</p><h2 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h2><p>window 对象在浏览器中有两重身份，一个是 ECMAScript 中的 Global 对象，另一个就是浏览器窗口的 JavaScript 接口。以通过 var 声明的所有全局变量和函 数都会变成 window 对象的属性和方法。</p><h3 id="窗口关系"><a href="#窗口关系" class="headerlink" title="窗口关系"></a>窗口关系</h3><p>top 对象始终指向最上层（最外层）窗口，即浏览器窗口本身。</p><p>parent 对象则始终指向当前窗 口的父窗口。</p><p>self 对象，它是终极 window 属性，始终会指向 window。</p><h3 id="窗口位置"><a href="#窗口位置" class="headerlink" title="窗口位置"></a>窗口位置</h3><p>现代浏览器提供了 screenLeft 和 screenTop 属性，用于表示窗口相对于屏幕左侧和顶部的位置 ，返回值的单位是 CSS 像素。</p><p>可以使用 moveTo()和 moveBy()方法移动窗口。这两个方法都接收两个参数，其中 moveTo()接 收要移动到的新位置的绝对坐标 x 和 y；而 moveBy()则接收相对当前位置在两个方向上移动的像素数。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 把窗口移动到左上角</span>window<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 把窗口向下移动 100 像素</span>window<span class="token punctuation">.</span><span class="token function">moveBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="窗口大小"><a href="#窗口大小" class="headerlink" title="窗口大小"></a>窗口大小</h3><p>outerWidth 和 outerHeight 返回浏 览器窗口自身的大小，innerWidth 和 innerHeight 返回浏览器窗口中页面视口的大小（不包含浏览器边框和工具栏）。</p><p>document.documentElement.clientWidth 和 document.documentElement.clientHeight 返回页面视口的宽度和高度。</p><p>可以使用resizeTo()和resizeBy()方法调整窗口大小。这两个方法都接收两个参数，resizeTo() 接收新的宽度和高度值，而 resizeBy()接收宽度和高度各要缩放多少。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 缩放到 100×100 </span>window<span class="token punctuation">.</span><span class="token function">resizeTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 缩放到 200×150 </span>window<span class="token punctuation">.</span><span class="token function">resizeBy</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><h3 id="视口位置"><a href="#视口位置" class="headerlink" title="视口位置"></a>视口位置</h3><p>度量文档相对于视口滚动距离的属性有两对，返回相等的值：window.pageXoffset&#x2F;window.  scrollX 和 window.pageYoffset&#x2F;window.scrollY。</p><p>可以使用 scroll()、scrollTo()和 scrollBy()方法滚动页面。这 3 个方法都接收表示相对视口距 离的 x 和 y 坐标，这两个参数在前两个方法中表示要滚动到的坐标，在最后一个方法中表示滚动的距离。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 相对于当前视口向下滚动 100 像素</span>window<span class="token punctuation">.</span><span class="token function">scrollBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 相对于当前视口向右滚动 40 像素</span>window<span class="token punctuation">.</span><span class="token function">scrollBy</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 滚动到页面左上角</span>window<span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="导航与打开新窗口"><a href="#导航与打开新窗口" class="headerlink" title="导航与打开新窗口"></a>导航与打开新窗口</h3><p>window.open()方法可以用于导航到指定 URL，也可以用于打开新浏览器窗口。这个方法接收 4 个参数：要加载的 URL、目标窗口、特性字符串和表示新窗口在浏览器历史记录中是否替代当前加载页 面的布尔值。</p><h3 id="系统对话框"><a href="#系统对话框" class="headerlink" title="系统对话框"></a>系统对话框</h3><p>警告框 alert</p><p>确认框 confirm</p><p>提示框 prompt ：接收两个参数（要显示给用户的文本，以及文本框的默认值）</p><p>alert、confirm、prompt方法调用时代码会停止执行，关闭后才会显示。</p><h2 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h2><p>window.location和document.location都指向location，location保存着当前加载文档的信息，也保存着把URL解析未离散片段后能够通过属性访问的信息。</p><p>location.search：返回了url中?开始的内容，URLSearchParams可以解析url参数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> qs <span class="token operator">=</span> location<span class="token punctuation">.</span>search<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "? q=javascript&amp;num=10";</span><span class="token keyword">let</span> searchParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>qs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>searchParams<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// " q=javascript&amp;num=10"</span>searchParams<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// true</span>searchParams<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 10</span>searchParams<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>searchParams<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// " q=javascript&amp;num=10&amp;page=3"</span>searchParams<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>searchParams<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// " num=10&amp;page=3"</span></code></pre><p>location.assign(url)：导航到新URL的操作，同时在浏览器历史记录中增加一条记录，相当于</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>location <span class="token operator">=</span> <span class="token string">"http://www.wrox.com"</span><span class="token punctuation">;</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">"http://www.wrox.com"</span><span class="token punctuation">;</span></code></pre><p>修改location对象的属性也会修改当前加载的页面：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 假设当前URL为http://www.wrox.com/WileyCDA/</span><span class="token comment" spellcheck="true">// 把URL修改为http://www.wrox.com/WileyCDA/#section1</span>location<span class="token punctuation">.</span>hash <span class="token operator">=</span> <span class="token string">"#section1"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 把URL修改为http://www.wrox.com/WileyCDA/?q=javascript</span>location<span class="token punctuation">.</span>search <span class="token operator">=</span> <span class="token string">"? q=javascript"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 把URL修改为http://www.somewhere.com/WileyCDA/</span>location<span class="token punctuation">.</span>hostname <span class="token operator">=</span> <span class="token string">"www.somewhere.com"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 把URL修改为http://www.somewhere.com/mydir/</span>location<span class="token punctuation">.</span>pathname <span class="token operator">=</span> <span class="token string">"mydir"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 把URL修改为http://www.somewhere.com:8080/WileyCDA/</span>location<span class="token punctuation">.</span>port <span class="token operator">=</span> <span class="token number">8080</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 上述除了hash之外，只要修改location的一个属性，就会导致页面重新加载新的URL，修改hash只会添加一条历史记录</span></code></pre><p>location.reload() 它能重新加载当前显示的页面。</p><pre class=" language-js"><code class="language-js">location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 重新加载，可能是从缓存加载</span>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 重新加载，从服务器加载</span></code></pre><h2 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h2><p>通常用于确定浏览器的类型</p><h2 id="screen对象"><a href="#screen对象" class="headerlink" title="screen对象"></a>screen对象</h2><p>客户端显示器的信息，比如像素宽度和像素高度。</p><h2 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h2><p>表示当前窗口首次使用以来用户的导航历史记录。</p><p>history.go(index of string)</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 后退一页</span>history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 前进一页</span>history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 前进两页</span>history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 导航到最近的wrox.com页面</span>history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token string">"wrox.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 导航到最近的nczonline.net页面</span>history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token string">"nczonline.net"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 后退一页</span>history<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 前进一页</span>history<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>history.length 这个属性反映了历史记录的数量，包括可以前进和后退的页面。对于窗口或者标签页中加载的第一个页面，history.length &#x3D;&#x3D; 1.</p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span>history<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这是用户窗口中的第一个页面</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第11章 期约与异步函数</title>
      <link href="/2023/05/05/di-11-zhang-qi-yue-yu-yi-bu-han-shu/"/>
      <url>/2023/05/05/di-11-zhang-qi-yue-yu-yi-bu-han-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="第十一章：期约和异步函数"><a href="#第十一章：期约和异步函数" class="headerlink" title="第十一章：期约和异步函数"></a>第十一章：期约和异步函数</h1><p>js的异步行为会推入一个队列中，当前同步代码执行完毕之后，会执行队列中的异步代码，ES6之前多用回调完成异步操作。</p><h2 id="期约"><a href="#期约" class="headerlink" title="期约"></a>期约</h2><p>promise可以通过new操作符来进行实例化。创建期约时需要传入执行器executor函数作为参数（resolve（），rejected（）)。</p><h3 id="期约状态"><a href="#期约状态" class="headerlink" title="期约状态"></a>期约状态</h3><p>期约是一个有状态的对象，可能处于如下 3 种状态之一：</p><p>1、待定pending （是期约的最初始状态，可以落定2为兑现状态或者拒绝状态，但是都是不可逆的，即只能改变一次）</p><p>2、兑现fulfilled（resolved）表示期约完成</p><p>3、拒绝（rejected） 表示期约未完成</p><p>通过执行函数控制期约状态</p><p>期约的状态是私有的，所以只能在内部进行操作。内部操作在期约的执行器函数中完成，执行器函数主要有两项职责 ：<strong>初始化期约的异步行为和控制状态的最终转换</strong>。</p><p>其中，控制期约状态的转换是 通过调用它的两个函数参数实现的。这两个函数参数通常都命名为 resolve()和 reject()。调用 resolve()会把状态切换为兑现，调用 reject()会把状态切换为拒绝。另外，调用 reject()也会抛 出错误。执行器函数是同步执行的。无论 resolve()和 reject()中的哪个被调用，状态转换都不可撤销了。于是继续修改状态会静默 失败。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Promise &lt;resolved> </span><span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Promise &lt;rejected></span></code></pre><h3 id="期约的实例方法"><a href="#期约的实例方法" class="headerlink" title="期约的实例方法"></a>期约的实例方法</h3><p>Promise.prototype.then()：为期约实例添加处理程序的主要方法，它接收最多 两个参数：onResolved 处理程序和 onRejected 处理程序。这两个参数都是可选的，如果提供的话， 则会在期约分别进入“兑现”和“拒绝”状态时执行。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">onResolved</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> <span class="token string">'resolved'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">onRejected</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> <span class="token string">'rejected'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>reject<span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> p1<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">onResolved</span><span class="token punctuation">(</span><span class="token string">'p1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token string">'p1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> p2<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">onResolved</span><span class="token punctuation">(</span><span class="token string">'p2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token string">'p2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//（3 秒后）</span><span class="token comment" spellcheck="true">// p1 resolved </span><span class="token comment" spellcheck="true">// p2 rejected</span></code></pre><p>Promise.prototype.catch()：给期约添加拒绝处理程序。这个方法只接收一个参数： onRejected 处理程序。事实上，这个方法就是一个语法糖，调用它就相当于调用 Promise.prototype.  then(null, onRejected)。</p><p>Promise.prototype.finally()：给期约添加 onFinally 处理程序，这个处理程序在期 约转换为解决或拒绝状态时都会执行。</p><h2 id="异步函数"><a href="#异步函数" class="headerlink" title="异步函数"></a>异步函数</h2><h3 id="async"><a href="#async" class="headerlink" title="async"></a>async</h3><p>async 关键字用于声明异步函数。这个关键字可以用在<strong>函数声明、函数表达式、箭头函数和方法</strong>上。使用 async 关键字可以让函数具有异步特征，但总体上其代码仍然是同步求值的。</p><p>异步函数如果使用 return 关键字返回了值（如果没有 return 则会返回 undefined），这 个值会被 Promise.resolve()包装成一个期约对象。异步函数始终返回期约对象。</p><h3 id="await"><a href="#await" class="headerlink" title="await"></a>await</h3><p>因为异步函数主要针对不会马上完成的任务，所以自然需要一种暂停和恢复执行的能力。<strong>使用 await 关键字可以暂停异步函数代码的执行，等待期约解决。</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span><span class="token comment" spellcheck="true">// 如果使用async/await可以写成</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题掌握的技能</title>
      <link href="/2023/04/26/shua-ti-zhang-wo-de-ji-neng/"/>
      <url>/2023/04/26/shua-ti-zhang-wo-de-ji-neng/</url>
      
        <content type="html"><![CDATA[<h1 id="掌握的技能（java版本）"><a href="#掌握的技能（java版本）" class="headerlink" title="掌握的技能（java版本）"></a>掌握的技能（java版本）</h1><h2 id="1、输入"><a href="#1、输入" class="headerlink" title="1、输入"></a>1、输入</h2><pre class=" language-java"><code class="language-java">Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取字符串</span>String str <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取整数</span><span class="token keyword">int</span> num <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 类似地， 接收不同的类型输入数据，就有对应的next方法</span><span class="token keyword">while</span><span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">hasNextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>hasNext和hasNextLine：</p><p>它们的返回值都是boolean类型，但只有可能返回true，且都默认以回车键为结束，hasNext和next不能识别裸回车，hasNextLine和nextLine可以识别裸回车，也就是说对于不输入符号而直接裸敲一个回车的操作，只有后两个会识别到。</p><h2 id="2、java四舍五入保留两位小数"><a href="#2、java四舍五入保留两位小数" class="headerlink" title="2、java四舍五入保留两位小数"></a>2、java四舍五入保留两位小数</h2><p>java中如果使用除法的话，除数和被除数都是整数，那么结果也会只是整数，如果想要小数，那么需要将除数或者被除数转换为float或者double类型即可。</p><p>保留两位小数，现在只接触一种，就是使用DecimalFormat返回的String格式的两位小数</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">// 将两个整数之间的除法转换为小数</span><span class="token keyword">double</span> res <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> n_words<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用DecimalFormat四舍五入保留两位小数</span>String re <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span><span class="token string">"#.00"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>re<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第10章 函数</title>
      <link href="/2023/04/23/di-10-zhang-han-shu/"/>
      <url>/2023/04/23/di-10-zhang-han-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="第十章：函数"><a href="#第十章：函数" class="headerlink" title="第十章：函数"></a>第十章：函数</h1><p>函数实际上是对象，函数名就是指向函数对象的指针。</p><h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 函数声明式定义</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 函数表达式定义 注意：这里函数末尾是有分号的</span><span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 箭头函数 arrow function</span><span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用function构造函数</span><span class="token comment" spellcheck="true">// 不推荐，这段代码会被解释两次，第一次将它当作常规的es代码 第二次解释传给构造函数的字符串，影响性能</span><span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">"num1"</span><span class="token punctuation">,</span> <span class="token string">"num2"</span><span class="token punctuation">,</span> <span class="token string">"return num1 + num2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>任何可以使用函数表达式的地方，都可以使用箭头函数，如果只有<strong>一个</strong>参数，可以不用括号，多个参数还是要加上括号的。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> triple <span class="token operator">=</span> x <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">3</span> <span class="token operator">*</span> x<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><p>箭头函数不能使用 arguments、super 和 new.target，也不能用作构造函数。此外，箭头函数也没有 prototype 属性。</p><h2 id="函数名"><a href="#函数名" class="headerlink" title="函数名"></a>函数名</h2><p>函数名就是指向函数的指针，所以它们跟其他包含对象指针的变量具有相同的行为。这意味着一个函数可以有多个名称。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> anotherSum <span class="token operator">=</span> sum<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">anotherSum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 20</span></code></pre><p>使用不带括号的函数名会访问函数指针，而不会执行函数。因此，anotherSum 和 sum 都指向同一个函数。</p><p>ES6的所有函数对象都会暴露一个只读的name属性。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token keyword">let</span> baz <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// foo </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// bar </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>baz<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// baz </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//（空字符串）</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// anonymous</span></code></pre><h2 id="理解参数"><a href="#理解参数" class="headerlink" title="理解参数"></a>理解参数</h2><p>ES函数的参数在内部表现为一个数组，函数被调用时总会接收一个数组，但是函数不关心这个数组中包含什么。</p><p>arguments对象是一个类数组对象，它接收传入的参数数组，arguments.length表示参数的长度</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">doAdd</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// arguments的值会自动同步到对应的命名参数，所以修改arguments[1] 的值也会修改num2的值，因此两者的值都是10，但这并不意味着它们都访问同一个内存地址，它们在内存中还是分开的，只不过会保持同步而已。另外还要记住一点：如果只传了一个参数，然后把 arguments[1]设置为某个值，那么这个值并不会反映到第二个命名参数。这是因为 arguments 对象的长度是根据传入的参数个数，而非定义函数时给出的命名参数个数确定的</span><span class="token function">doAdd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 11</span></code></pre><p>严格模式下，arguments会有一些变化，首先，像前面那样给 arguments[1]赋值不会再影响 num2 的值。就算把 arguments[1]设置为 10，num2 的值仍然还是传入的值。其次，在函数中尝试重写 arguments 对象会导致语法错误。</p><h3 id="箭头函数中的参数"><a href="#箭头函数中的参数" class="headerlink" title="箭头函数中的参数"></a>箭头函数中的参数</h3><p>如果函数是使用箭头语法定义的，那么传给函数的参数将不能使用 arguments 关键字访问，而只 能通过定义的命名参数访问。</p><p>解决：可以将箭头函数放在包装函数中，把它提供给箭头函数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5 </span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><h2 id="没有重载"><a href="#没有重载" class="headerlink" title="没有重载"></a>没有重载</h2><p>ES函数不能重载，在其他语言比如 Java 中，一个函数可以有两个定义， 只要签名（接收参数的类型和数量）不同就行。如前所述，ECMAScript 函数没有签名，因为参数是由 包含零个或多个值的数组表示的。</p><p>如果在 ECMAScript 中定义了两个同名函数，则后定义的会覆盖先定义的。</p><h2 id="默认参数值"><a href="#默认参数值" class="headerlink" title="默认参数值"></a>默认参数值</h2><p>ES6支持显示定义默认参数，只要在函数定义中的参数后面用&#x3D;就可以为参数赋一个默认值。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">makeKing</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">'Henry'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`King $&amp;#123;name&amp;#125; VIII`</span></span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>在使用默认参数时，<strong>arguments对象</strong>的值不反映参数的默认值，<strong>只反映传给函数的参数</strong>。如果未传参，那么反映的就是undefined。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">makeKing</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">'Henry'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  name <span class="token operator">=</span> <span class="token string">'Louis'</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`King $&amp;#123;arguments[0]&amp;#125;`</span></span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">makeKing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'King undefined' </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">makeKing</span><span class="token punctuation">(</span><span class="token string">'Louis'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'King Louis' </span></code></pre><h3 id="默认参数作用域与暂时性死区"><a href="#默认参数作用域与暂时性死区" class="headerlink" title="默认参数作用域与暂时性死区"></a>默认参数作用域与暂时性死区</h3><p>给多个参数定义默认值实际上跟使用let关键字顺序声明变量一样，默认参数会按照定义它们的顺序依次被初始化。因为参数是按顺序初始化的，所以后定义默认值的参数可以引用先定义的参数。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">makeKing</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">'Henry'</span><span class="token punctuation">,</span> numerals <span class="token operator">=</span> name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`King $&amp;#123;name&amp;#125; $&amp;#123;numerals&amp;#125;`</span></span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> </code></pre><p>但是参数初始化顺序遵循“暂时性死区”规则，即前面定义的参数不能引用后面定义的。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 调用时不传第一个参数会报错</span><span class="token keyword">function</span> <span class="token function">makeKing</span><span class="token punctuation">(</span>name <span class="token operator">=</span> numerals<span class="token punctuation">,</span> numerals <span class="token operator">=</span> <span class="token string">'VIII'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`King $&amp;#123;name&amp;#125; $&amp;#123;numerals&amp;#125;`</span></span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="参数扩展与收集"><a href="#参数扩展与收集" class="headerlink" title="参数扩展与收集"></a>参数扩展与收集</h2><p>ES6新增了扩展操作符，它可以用于调用函数传参，也可以用于定义函数参数。</p><h3 id="扩展参数"><a href="#扩展参数" class="headerlink" title="扩展参数"></a>扩展参数</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 下面的函数功能:将数组中的数值累加，返回和</span><span class="token keyword">function</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        sum <span class="token operator">+</span><span class="token operator">=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用扩展操作符可以这样传递参数</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token operator">...</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10</span></code></pre><p>因为数组的长度已知，所以在使用扩展操作符传参的时候，并不妨碍在其前面或后面再传其他的值， 包括使用扩展操作符传其他参数.</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">...</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 9 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token operator">...</span>values<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 15 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">...</span>values<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 14 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token operator">...</span>values<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 28 </span></code></pre><p>对函数中的 arguments 对象而言，它并不知道扩展操作符的存在，而是按照调用函数时传入的参数接收每一个值.</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token keyword">function</span> <span class="token function">countArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token function">countArguments</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">...</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5 </span><span class="token function">countArguments</span><span class="token punctuation">(</span><span class="token operator">...</span>values<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5 </span><span class="token function">countArguments</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">...</span>values<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 6 </span><span class="token function">countArguments</span><span class="token punctuation">(</span><span class="token operator">...</span>values<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 7</span></code></pre><h3 id="收集参数"><a href="#收集参数" class="headerlink" title="收集参数"></a>收集参数</h3><p>在构思函数定义时，可以使用扩展操作符把不同长度的独立参数组合为一个数组。收集参数的结果会得到一个 Array 实例。收集参数的前面如果还有命名参数，则只会收集其余的参数，如果没有则会得到空数组，<strong>因为收集参数的结果可变，所以只能把它作为最后一个参数。</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 可以</span><span class="token keyword">function</span> <span class="token function">ignoreFirst</span><span class="token punctuation">(</span>firstValue<span class="token punctuation">,</span> <span class="token operator">...</span>values<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> </code></pre><p>另外，使用收集参数并不影响arguments对象，它仍然反映调用时传给函数的参数。</p><h2 id="函数声明与函数表达式"><a href="#函数声明与函数表达式" class="headerlink" title="函数声明与函数表达式"></a>函数声明与函数表达式</h2><p>两者之间是有区别的，JavaScript 引擎在任何代码执行之前，会先读取函数声明，并在执行上下文中 生成函数定义。而函数表达式必须等到代码执行到它那一行，才会在执行上下文中生成函数定义。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 没问题 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> </code></pre><p>上述代码能够正常运行，是因为函数声明会在任何代码执行之前先被读取并添加到执行上下文，这个过程叫做函数声明提升。</p><p>在执行代码时，js引擎会先执行一遍扫描，把发现的函数声明提升到源代码树的顶部，因此即使函数定义出现在调用它们的代码之后，引擎也会把函数声明提升到顶部。而如果时函数表达式，就会出错，是因为这个函数定义包含在一个变量初始化语句中，而不是函数声明中。 这意味着代码如果没有执行到加粗的那一行，那么执行上下文中就没有函数的定义，所以上面的代码会 出错。</p><p>除了函数什么时候真正有定义这个区别之外，这两种语法是等价的。</p><h2 id="函数作为值"><a href="#函数作为值" class="headerlink" title="函数作为值"></a>函数作为值</h2><p>可以在一个函数中将另一个函数作为参数传入</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 声明callSomeFunction函数，给他传入另一个函数someFunction和另一个函数需要的参数someArgument</span><span class="token keyword">function</span> <span class="token function">callSomeFunction</span><span class="token punctuation">(</span>someFunction<span class="token punctuation">,</span> someArgument<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">someFunction</span><span class="token punctuation">(</span>someArgument<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 声明一个函数add10 之后将其传递给函数callSomeFunction中</span><span class="token keyword">function</span> <span class="token function">add10</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> num <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用callSomeFunction函数</span><span class="token keyword">let</span> result1 <span class="token operator">=</span> <span class="token function">callSomeFunction</span><span class="token punctuation">(</span>add10<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 20 </span></code></pre><p>这里需要注意：<strong>如果是访问函数而不是调用函数，那就必须不带括号</strong>，所以传递给callSomeFunction的必须是add10而不是add10（）</p><p><strong>从一个函数中返回函数</strong>也是可以的：进行数组中对象的排序</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 重写排序规则</span><span class="token keyword">function</span> <span class="token function">createComparisonFunction</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>object1<span class="token punctuation">,</span>object2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> value1 <span class="token operator">=</span> object1<span class="token punctuation">[</span>propertyName<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> value2 <span class="token operator">=</span> object2<span class="token punctuation">[</span>propertyName<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 升序排序</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>value1 <span class="token operator">&lt;</span> value2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>value1 <span class="token operator">></span> value2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 定义对象数组</span><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span> <span class="token string">"zouyang"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">26</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span> <span class="token string">"tianmeng"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">27</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调用函数开始排序</span><span class="token comment" spellcheck="true">// 如果按照姓名排序</span>data<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token function">createComparisonFunction</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// tianmeng</span><span class="token comment" spellcheck="true">// 如果按照年龄开始排序</span>data<span class="token punctuation">.</span><span class="token function">sot</span><span class="token punctuation">(</span><span class="token function">createComparisonFunction</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// zouyang</span></code></pre><h2 id="函数内部"><a href="#函数内部" class="headerlink" title="函数内部"></a>函数内部</h2><p>函数内部存在两个特殊的对象：arguments 和 this。ECMAScript 6 又新增 了 new.target 属性。</p><h3 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h3><p>arguments 对象是一个类数组对象，包含调用函数时传入的所有参数。这 个对象只有以 function 关键字定义函数（相对于使用箭头语法创建函数）时才会有。arguments 对象其实还有一个 callee 属性，是一个指向 arguments 对象所在函数的 指针。也就是说arguments.callee可以指向该函数本身，而可以不通过函数名访问函数，从而达到与函数名解耦的作用。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 这个函数是递归方法 阶乘函数</span><span class="token keyword">function</span> <span class="token function">factorial</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// return num * facorial(num - 1); 使用 arguments.callee 就可以让函数逻辑与函数名解耦</span>     <span class="token keyword">return</span> num <span class="token operator">*</span> arguments<span class="token punctuation">.</span><span class="token function">callee</span><span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> </code></pre><p>不过在严格模式下运行的代码是不能访问arguments.callee 的，因为访问会出错。此时，可 以使用命名函数表达式（named function expression）达到目的。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> factorial <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> num <span class="token operator">*</span> <span class="token function">f</span><span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p>在标准函数中，this 引用的是把函数当成方法调用的上下文对象，这时候通常称其为 this 值（在 网页的全局上下文中调用函数时，this 指向 windows）</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span> <span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  color<span class="token punctuation">:</span> <span class="token string">'blue'</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">sayColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 这个 this 到底引用哪个对象必须到函数被调用时才能确定。</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 在全局上下文中调用sayColor(),this 指向 window</span><span class="token function">sayColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'red' </span><span class="token comment" spellcheck="true">// 把 sayColor()赋值给 o</span>o<span class="token punctuation">.</span>sayColor <span class="token operator">=</span> sayColor<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// this 会指向 o</span>o<span class="token punctuation">.</span><span class="token function">sayColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'blue' </span></code></pre><p>在箭头函数中，this引用的是定义箭头函数的上下文。</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span> <span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  color<span class="token punctuation">:</span> <span class="token string">'blue'</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 与上面不同的是，sayColor函数是通过箭头函数定义的 所以里面的this一直都是指向全局的，也就是window</span><span class="token keyword">let</span> sayColor <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">sayColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'red' </span>o<span class="token punctuation">.</span>sayColor <span class="token operator">=</span> sayColor<span class="token punctuation">;</span> o<span class="token punctuation">.</span><span class="token function">sayColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'red' </span></code></pre><p>在事件回调或定时回调中调用某个函数时，this 值指向的并非想要的对象。<strong>此时将回调函数写成箭头函数就可以解决问题。这是因为箭头函数中的 this 会保留定义该函数时的上下文</strong>。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 在king函数中通过箭头函数的形式定义了一个回调函数setTimeout</span><span class="token keyword">function</span> <span class="token function">King</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>royaltyName <span class="token operator">=</span> <span class="token string">'Henry'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// this 引用 King 的实例</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>royaltyName<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 在queen函数中通过函数声明的形式定义了一个回调函数setTimeout</span><span class="token keyword">function</span> <span class="token function">Queen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>royaltyName <span class="token operator">=</span> <span class="token string">'Elizabeth'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// this 引用 window 对象</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>royaltyName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">new</span> <span class="token class-name">King</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Henry </span><span class="token keyword">new</span> <span class="token class-name">Queen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span></code></pre><h3 id="caller"><a href="#caller" class="headerlink" title="caller"></a>caller</h3><p>这个属性引用的是调用当前函数的函数，或者如果是 在全局作用域中调用的则为 null。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inner<span class="token punctuation">.</span>caller<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 显示outer()函数的源代码，因为调用inner函数的是函数outer</span></code></pre><h3 id="new-target"><a href="#new-target" class="headerlink" title="new target"></a>new target</h3><p>ES5新增了new.target属性，它可以检测函数是否使用new关键字。如果是正常调用的（不使用new），则new.target的值是undefined，如果是new关键字调用的，将引用被调用的构造函数。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">King</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">new</span><span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">throw</span> <span class="token string">'King must be instantiated using "new"'</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'King instantiated using "new"'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">new</span> <span class="token class-name">King</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// King instantiated using "new" </span><span class="token function">King</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Error: King must be instantiated using "new"</span></code></pre><h2 id="函数的属性与方法"><a href="#函数的属性与方法" class="headerlink" title="函数的属性与方法"></a>函数的属性与方法</h2><p>每个函数都有两个属性：length和prototype</p><p>length：保存函数定义的命名参数的个数</p><p>prototype：保存引用类型所有实例方法，例如toString、valueOf等方法都保存在prototype上，进而由所有实例共享。（不可枚举）</p><p>每个函数都有三个方法：</p><p>apply：接收两个参数（this，参数数组）第二个参数可以是Array的实例，也可以是arguments对象。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">callSum1</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> sum<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 传入 arguments 对象</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">callSum2</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> sum<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 传入数组</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> </code></pre><p>call与apply的作用一样，只是传参的形式不同，通过call()向函数传参时，必须将参数一个一个的列出来。</p><p>bind()方法会创建一个新的函数实例，其this值会被绑定到传给bind()的对象。</p><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>闭包指的是那些<strong>引用了另一个函数作用域中变量</strong>的<strong>函数</strong>，通常是在嵌套函数中实现的。</p><p>在调用一个函数时，会为这个函数调用创建一个执行上下文，并创建一个作用域链，然后用arguments 和其他命名参数来初始化这个函数的活动对象。外部函数的活动对象是内部函数作用域链上的第二个对 象。这个作用域链一直向外串起了所有包含函数的活动对象，直到全局执行上下文才终止。</p><p>函数执行时，每个执行上下文中都会有一个包含其中变量的对象。全局上下文中的叫变量对象，它 会在代码执行期间始终存在。而函数局部上下文中的叫活动对象，只在函数执行期间存在。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createComparisonFunction</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>object1<span class="token punctuation">,</span> object2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">let</span> value1 <span class="token operator">=</span> object1<span class="token punctuation">[</span>propertyName<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">let</span> value2 <span class="token operator">=</span> object2<span class="token punctuation">[</span>propertyName<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>value1 <span class="token operator">&lt;</span> value2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value1 <span class="token operator">></span> value2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">let</span> compare <span class="token operator">=</span> <span class="token function">createComparisonFunction</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">'Nicholas'</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">'Matt'</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><img src='https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/%E9%97%AD%E5%8C%85.jpg' align='left' width='700px'><p>作用域其实就是一个包含指针的列表，每个指针分别指向一个变量对象，但是物理上并不会包含相应的对象。</p><p>createComparisonFunction()的 活动对象并不能在它执行完毕后销毁，因为匿名函数的作用域链中仍然有对它的引用。在 createComparisonFunction()执行完毕后，其执行上下文的作用域链会销毁，但它的活动对象仍然会保留 在内存中，直到匿名函数被销毁后才会被销毁。</p><h3 id="this对象"><a href="#this对象" class="headerlink" title="this对象"></a>this对象</h3><p>如果内部函数没有使用箭头函数定义，则 this 对象会在运 行时绑定到执行函数的上下文。如果在全局函数中调用，则 this 在非严格模式下等于 window，在严 格模式下等于 undefined。如果作为某个对象的方法调用，则 this 等于这个对象。匿名函数在这种情 况下不会绑定到某个对象，这就意味着 this 会指向 window，除非在严格模式下 this 是 undefined。</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>identity <span class="token operator">=</span> <span class="token string">'The Window'</span><span class="token punctuation">;</span> <span class="token keyword">let</span> object <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      identity<span class="token punctuation">:</span> <span class="token string">'My Object'</span><span class="token punctuation">,</span>      <span class="token function">getIdentityFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>identity<span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// getIdentitiyFunc()()会立即调用返回的函数，从而得到一个字符串，是window,因为每个函数在调用的时候都会自动创建两个特殊变量：this和arguments，内部函数永远不能直接访问外部函数的这两个变量</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getIdentityFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'The Window'</span><span class="token comment" spellcheck="true">// 但是，如果把this保存到闭包可以访问的另一个变量中，则是可以的</span><span class="token keyword">let</span> object <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      identity<span class="token punctuation">:</span> <span class="token string">'My Object'</span><span class="token punctuation">,</span>      <span class="token function">getIdentityFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">let</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> that<span class="token punctuation">.</span>identity<span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getIdentityFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'My Object' </span></code></pre><p>在一些特殊情况下，this值可能并不是我们所期待的值。</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>identity <span class="token operator">=</span> <span class="token string">'The Window'</span><span class="token punctuation">;</span>     <span class="token keyword">let</span> object <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      identity<span class="token punctuation">:</span> <span class="token string">'My Object'</span><span class="token punctuation">,</span>      getIdentity <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 这里this.identity就是object.identity</span>         <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>identity<span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 正常调用</span>object<span class="token punctuation">.</span><span class="token function">getIdentity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'My Object' </span><span class="token comment" spellcheck="true">// 与上一行的含义一致</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span>getIdentity<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'My Object' </span><span class="token comment" spellcheck="true">// 执行了一次赋值，然后再调用赋值后的结果，因为赋值表达式的值是函数本身，this不再与任何对象绑定，所以返回的是the window</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span>getIdentity <span class="token operator">=</span> object<span class="token punctuation">.</span>getIdentity<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'The Window' </span></code></pre><h3 id="立即调用的函数表达式"><a href="#立即调用的函数表达式" class="headerlink" title="立即调用的函数表达式"></a>立即调用的函数表达式</h3><p>立即调用的匿名函数又被称作立即调用的函数表达式（IIFE，Immediately Invoked Function  Expression）。它类似于函数声明，但由于被包含在括号中，所以会被解释为函数表达式。紧跟在第一组 括号后面的第二组括号会立即调用前面的函数表达式。</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 块级作用域</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用IIFE可以模拟块级作用域</p><h3 id="私有变量"><a href="#私有变量" class="headerlink" title="私有变量"></a>私有变量</h3><p>任何定义在函数或块中的变量，都可以认为是私有的，因为在这个函数或块的外部无法访问其中的 变量。私有变量包括函数参数、局部变量，以及函数内部定义的其他函数。</p><p><strong>特权方法（privileged method）</strong>是能够访问函数私有变量（及私有函数）的公有方法。在对象上有两种方式创建特权方法。第一种是在构造函数中实现。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 把所有私有变量和私有函数都定义在构造函数中，然后再创建一个能够访问这些私有成员的特权方法</span><span class="token keyword">function</span> <span class="token function">MyObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 私有变量和私有函数</span>    <span class="token keyword">let</span> privateVariable <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">privateFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 特权方法</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>publicMethod <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        privateVariable<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">privateFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>函数是 JavaScript 编程中最有用也最通用的工具。ECMAScript 6 新增了更加强大的语法特性，从而 让开发者可以更有效地使用函数。 </p><p> 函数表达式与函数声明是不一样的。函数声明要求写出函数名称，而函数表达式并不需要。没 有名称的函数表达式也被称为匿名函数。 </p><p> ES6 新增了类似于函数表达式的箭头函数语法，但两者也有一些重要区别。</p><p> JavaScript 中函数定义与调用时的参数极其灵活。arguments 对象，以及 ES6 新增的扩展操作符， 可以实现函数定义和调用的完全动态化。 </p><p> 函数内部也暴露了很多对象和引用，涵盖了函数被谁调用、使用什么调用，以及调用时传入了 什么参数等信息。</p><p> JavaScript 引擎可以优化符合尾调用条件的函数，以节省栈空间。 </p><p> 闭包的作用域链中包含自己的一个变量对象，然后是包含函数的变量对象，直到全局上下文的 变量对象。 </p><p> 通常，函数作用域及其中的所有变量在函数执行完毕后都会被销毁。 </p><p> 闭包在被函数返回之后，其作用域会一直保存在内存中，直到闭包被销毁。 </p><p> 函数可以在创建之后立即调用，执行其中代码之后却不留下对函数的引用。</p><p> 立即调用的函数表达式如果不在包含作用域中将返回值赋给一个变量，则其包含的所有变量都 会被销毁。 </p><p> 虽然 JavaScript 没有私有对象属性的概念，但可以使用闭包实现公共方法，访问位于包含作用域 中定义的变量。  可以访问私有变量的公共方法叫作特权方法。 </p><p> 特权方法可以使用构造函数或原型模式通过自定义类型中实现，也可以使用模块模式或模块增 强模式在单例对象上实现。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第9章 代理与反射</title>
      <link href="/2023/04/23/di-9-zhang-dai-li-yu-fan-she/"/>
      <url>/2023/04/23/di-9-zhang-dai-li-yu-fan-she/</url>
      
        <content type="html"><![CDATA[<h1 id="第九章-代理与反射"><a href="#第九章-代理与反射" class="headerlink" title="第九章 代理与反射"></a>第九章 代理与反射</h1><h2 id="代理基础"><a href="#代理基础" class="headerlink" title="代理基础"></a>代理基础</h2><p>代理是目标对象的抽象，目标对象可以通过代理来操作，并施加行为。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  id<span class="token punctuation">:</span> <span class="token string">'target'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span></code></pre><p>捕获器</p><p>可以通过在handler定义一个get方法设置捕获器，捕获器接收<strong>目标对象，查询属性，还有代理属性</strong>三个参数。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    foo<span class="token punctuation">:</span> <span class="token string">'bar'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">get</span><span class="token punctuation">(</span>trapTarget<span class="token punctuation">,</span> property<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> trapTarget<span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>proxy<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// bar</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// bar</span></code></pre><p>撤销代理</p><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>通过捕获get、set、has等操作，监控对象什么时候被修改访问。隐藏属性（get时返回undefined）属性验证（set时选择是否设置值）函数构造参数认证（apply和constructor时返回失败）</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue.js设计与实现</title>
      <link href="/2023/04/21/vue-js-she-ji-yu-shi-xian/"/>
      <url>/2023/04/21/vue-js-she-ji-yu-shi-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-js设计与实现"><a href="#vue-js设计与实现" class="headerlink" title="vue.js设计与实现"></a>vue.js设计与实现</h1><p>内容一共6篇，共18个章节</p><h2 id="第一篇：框架设计概览"><a href="#第一篇：框架设计概览" class="headerlink" title="第一篇：框架设计概览"></a>第一篇：框架设计概览</h2><h3 id="第一章：权衡的艺术"><a href="#第一章：权衡的艺术" class="headerlink" title="第一章：权衡的艺术"></a>第一章：权衡的艺术</h3><p>框架的设计，本身就是一种权衡的艺术。</p><p>命令式与声明式</p><p>命令式：关注过程</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'ok'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>声明式：关注结果</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>() <span class="token punctuation">=</span><span class="token punctuation">></span> alert(<span class="token punctuation">'</span>ok<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hello world <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>所以对于vue来说，它封装了命令式的过程，对外暴露了声明式的结果。</p><h4 id="性能与可维护性的权衡"><a href="#性能与可维护性的权衡" class="headerlink" title="性能与可维护性的权衡"></a>性能与可维护性的权衡</h4><p>命令式的性能&gt;声明式的性能</p><p>因为命令式的代码是直接通过原生的js进行实现的，但是vue还是对外暴露了声明式的接口，是因为声明式的维护要远远大于命令式的可维护性。</p><p>在前端领域，想要使用 <code>JavaScript</code> 修改 <code>html</code> 的方式，主要有三种：**<code>原生 JavaScript、innerHTML、虚拟 DOM</code>**</p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f71e1cfd77484383b61e21ac9d285764~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" alt="image-20230207233547097.png" style="zoom:50%;" align='left' /><p>由上图可以看出，虚拟DOM的心智负担（书写难度）最小，可维护性最高，性能中等。</p><p>所以哪怕它的性能不是最好的，但是vue选择虚拟DOM来进行渲染层的构建，这个也是一种性能和可维护性的权衡。</p><h4 id="运行时和编译时"><a href="#运行时和编译时" class="headerlink" title="运行时和编译时"></a>运行时和编译时</h4><p>它们都是框架设计的一种方式，可以单独出现，也可以组合使用。</p><p>运行时：runtime</p><p>利用render函数，<strong>直接把DOM转化为真实DOM元素</strong>的一种方式，在整个过程中，不包含编译的过程，所以无法分析用户提供的内容。</p><p>编译时：compiler</p><p>直接把template模板中的内容，转化为真实DOM元素。因为存在编译的过程，所以可以分析用户提供的内容，同时没有运行时理论上性能会更好。目前该方式，有具体的实现库，那就是现在也非常火的 <code>Svelte</code>，但是这里要注意： <strong>它的真实性能，没有办法达到理论数据。</strong></p><p>运行时+编译时</p><p>它的过程被分为两步：</p><ol><li>先把 <code>template</code> 模板转化为 <code>render</code> 函数。也就是 <strong>编译时</strong></li><li>再利用 <code>render</code> 函数，把虚拟 <code>DOM</code> 转化为 真实 <code>DOM</code>。也就是 <strong>运行时</strong></li></ol><p>两者的结合，可以：在编译时，分析用户提供的内容在运行时，提供足够的灵活性。<strong>这也是 <code>vue</code> 的主要实现方式。</strong></p><h3 id="第二章：框架设计的核心要素"><a href="#第二章：框架设计的核心要素" class="headerlink" title="第二章：框架设计的核心要素"></a>第二章：框架设计的核心要素</h3><p>框架设计时需要注意的点</p><p>通过 环境变量 和 <code>TreeShanking</code> 控制打包之后的体积</p><p>构建不同的打包产物，以应用不同的场景</p><p>提供了 <code>callWithErrorHandling</code> 接口函数，来对错误进行统一处理</p><p>源码通过 <code>TypeScript</code> 开发，以保证可维护性。</p><p>内部添加了大量的类型判断和其他工作，以保证开发者使用时的良好体验。</p><h3 id="第三章：vue-js-3的设计思路"><a href="#第三章：vue-js-3的设计思路" class="headerlink" title="第三章：vue.js 3的设计思路"></a>第三章：vue.js 3的设计思路</h3><p>在vue中UI形式主要分为两种：</p><p>声明式的模板描述</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tId<span class="token punctuation">"</span></span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;#123; tClass: true &amp;#125;<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onTClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>命令式的render函数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> h <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> onClick<span class="token punctuation">:</span> handler <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 虚拟DOM</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>声明式的模板描述本质上就是我们常用的template模板，它会被编译器编译，得到渲染函数render。渲染函数接收两个参数VNode和container，VNode表示虚拟DOM，它本质上就是一个JS对象，container是一个容器，表示被挂载的位置，而render函数的作用就是把VNode挂载到container上。</p><img src="https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/render%E6%B8%B2%E6%9F%93%E5%99%A8.jpg" style="zoom:60%;" align="left"/><p>渲染器和渲染函数并不是一个东西，渲染器是函数createRenderer的返回值，是一个对象，被叫做renderer。renderer对象中有一个方法render，这个render就是我们常说的渲染函数。</p><img src="https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/%E6%B8%B2%E6%9F%93%E5%99%A8%E4%B8%8E%E6%B8%B2%E6%9F%93%E5%87%BD%E6%95%B0.jpg" style="zoom:60%;" align="left"/><p><strong>因为Vue以组件代表最小粒度，所以vue内部的渲染，本质上是：大量组件的渲染。而组件本质上是一组DOM的集合，所以渲染一个一个的组件，本质上就是在渲染一组DOM，也就是说Vue本质上是：以组件作为介质，来完成针对于一组、一组的DOM渲染。</strong></p><h2 id="第二篇：响应式系统"><a href="#第二篇：响应式系统" class="headerlink" title="第二篇：响应式系统"></a>第二篇：响应式系统</h2><h3 id="第四章：相应系统的作用与实现"><a href="#第四章：相应系统的作用与实现" class="headerlink" title="第四章：相应系统的作用与实现"></a>第四章：相应系统的作用与实现</h3><h4 id="响应式系统"><a href="#响应式系统" class="headerlink" title="响应式系统"></a>响应式系统</h4><p><strong>副作用函数</strong> ：<strong>会产生副作用的函数</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 全局变量</span><span class="token keyword">let</span> val <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    val <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 修改全局变量，产生副作用</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>上述代码中，effect函数的触发会导致全局变量val发生变化，那么effect就可以被叫做<strong>副作用函数</strong>，而如果val这个数据发生了变化，<strong>导致了视图的变化，那么val就会被叫做响应式数据</strong>。</p><p>那么如果想要实现响应式数据的话，那么它的核心逻辑，必然要依赖两个行为：</p><ul><li>第一个是 <code>getter</code> 行为，也就是 <strong>数据读取</strong></li><li>第二个是 <code>setter</code> 行为，也就是 <strong>数据修改</strong></li></ul><p>vue2：Object.defineProperty实现</p><p>vue3：Proxy实现</p><p>首先是getter形式：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerText <span class="token operator">=</span> obj<span class="token punctuation">.</span>text<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>执行effect方法时，方法内部触发了getter行为，一旦getter被触发，则把对应的effect方法保存到一个bucket（数据对象）中。</p><p>触发setter行为时：</p><pre class=" language-js"><code class="language-js">obj<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">'hello vue3'</span><span class="token punctuation">;</span></code></pre><p>触发setter时，会从bucket中取出effect方法，并执行，那么此时因为obj.text的值发生了变化，所以effect被执行时document.body.innerText会被赋上新的值，从而导致视图发生变化。</p><h4 id="调度系统（scheduler）"><a href="#调度系统（scheduler）" class="headerlink" title="调度系统（scheduler）"></a>调度系统（scheduler）</h4><p>调度系统，指的就是 <strong>响应性的可调度性</strong>，而所谓的可调度，指的就是 <strong>当数据更新的动作，触发副作用函数重新执行时，有能力决定：副作用函数（effect）执行的时机、次数以及方式</strong>。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 原始打印顺序</span><span class="token number">1</span><span class="token number">2</span><span class="token string">"finish!"</span><span class="token comment" spellcheck="true">// 改变打印顺序</span><span class="token number">1</span><span class="token string">"finish!"</span><span class="token number">2</span></code></pre><p>想要实现一个调度系统，则需要依赖 <strong><code>异步：Promise</code> 和 <code>队列：jobQueue</code></strong> 来进行实现。咱们需要 <strong>基于 <code>Set</code> 构建出一个基本的队列数组 <code>jobQueue</code>，利用 <code>Promise</code> 的异步特性，来控制执行的顺序</strong>。</p><h4 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h4><p>当控制了执行顺序之后，那么就可以利用这个特性来完成计算属性（computed）的实现了。计算属性本质上是： <strong>一个属性值，当依赖的响应式数据发生变化时，重新计算</strong>。它的实现需要彻底依赖于 <strong>调度系统（scheduler）</strong> 来进行实现。</p><h4 id="惰性执行（lazy"><a href="#惰性执行（lazy" class="headerlink" title="惰性执行（lazy)"></a>惰性执行（lazy)</h4><p>watch监听器</p><p><code>watch</code> 监听器本质上是 <strong>观测一个响应式数据，当数据发生变化时，通知并执行相应的回调函数</strong>，这也就意味着，<code>watch</code> 很多时候并不需要立刻执行。</p><p>惰性执行的实现要比调度系统简单。它本质上 <strong>是一个 <code>boolean</code> 型的值，可以被添加到 <code>effect</code> 函数中，用来控制副作用的执行</strong>。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>lazy<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 执行副作用函数</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="watch的实现原理"><a href="#watch的实现原理" class="headerlink" title="watch的实现原理"></a>watch的实现原理</h4><p>基于 调度系统 与 惰性执行，那么就可以实现 <code>watch</code> 监听器了。</p><h4 id="过期的副作用"><a href="#过期的副作用" class="headerlink" title="过期的副作用"></a>过期的副作用</h4><p>watch监听器实现非常广泛，有时候甚至可以在watch中完成一些异步操作，但是大量的异步操作，既有可能会导致竞态问题。</p><p>竞态问题：在描述一个系统或者进程的输出，依赖于不受控制的事件出现顺序或者出现时机。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> finalData<span class="token punctuation">;</span><span class="token function">watch</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token keyword">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 发送并等待网络请求</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/path/to/request'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 将请求结果赋值给data</span>    finalData <span class="token operator">=</span> res<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>如果obj连续被修改了两次，那么就会发起两个请求，假设我们最终期望的时finalData被赋值为请求B的结果，但是因为异步的返回结果我们可能无法预计，所以，如果请求B先返回，那么finalData的值就会变为请求A的返回值。这样就会导致竞态问题。</p><p>解决：</p><p>使用watch回调函数的第三个参数。</p><h3 id="第五章：非原始值（对象）的响应性方案"><a href="#第五章：非原始值（对象）的响应性方案" class="headerlink" title="第五章：非原始值（对象）的响应性方案"></a>第五章：非原始值（对象）的响应性方案</h3><p>Proxy和Reflect接口</p><p>这两个接口通常会一起进行使用，其中：</p><ul><li><code>Proxy</code> 可以 <strong>代理一个对象（被代理对象）的 getter 和 setter 行为，得到一个 proxy 实例（代理对象）</strong></li><li><code>Reflect</code> 可以 <strong>在 Proxy 中使用 this 时，保证 this 指向 proxy，从而正确执行次数的副作用</strong></li></ul><h3 id="第六章：原始值（非对象）的响应性方案"><a href="#第六章：原始值（非对象）的响应性方案" class="headerlink" title="第六章：原始值（非对象）的响应性方案"></a>第六章：原始值（非对象）的响应性方案</h3><p>proxy只能代理复杂的数据类型，这意味着简单数据类型无法具备响应性。</p><p>在vue中，我们可以通过ref构建简单数据类型的响应。</p><h2 id="第三篇：渲染器"><a href="#第三篇：渲染器" class="headerlink" title="第三篇：渲染器"></a>第三篇：渲染器</h2><h3 id="第七章：渲染器的设计"><a href="#第七章：渲染器的设计" class="headerlink" title="第七章：渲染器的设计"></a>第七章：渲染器的设计</h3><p>前面说过，渲染器和渲染函数不是一个东西</p><p>渲染器：是js中的一个对象，是createRenderer的返回值，一个对象。</p><p>渲染函数：首先它是一个函数，是渲染器对象中的render函数。</p><p>核心思路：vue中的渲染器总体可以分为两部分</p><p>1、浏览器渲染时，利用DOM API完成DOM的操作，比如，如果渲染DOM那么就使用createElement，如果要删除DOM那么就使用removeChild。</p><p>2、渲染器不能与宿主环境（浏览器）产生强耦合。因为vue不光有浏览器渲染还有服务器渲染，如果在渲染器中绑定了宿主环境，那么就不好实现服务器渲染了。</p><p>vnode详解：</p><p>是js中的一个普通对象，代表了渲染的内容。其中有一个属性叫做type，这个type表示了渲染的DOM，例如：type&#x3D;&#x3D;&#x3D;div:则表示div标签.</p><h3 id="第八章：挂载与更新"><a href="#第八章：挂载与更新" class="headerlink" title="第八章：挂载与更新"></a>第八章：挂载与更新</h3><p>对于渲染器而言，最核心的事情就是对节点进行挂载、更新的操作。</p><ul><li><p>挂载节点：<strong>所谓的挂载就是节点的初次渲染</strong>，可以通过createElement方法新建一个DOM节点，再利用parent.insertBefore方法插入节点</p></li><li><p>更新节点：当响应性数据发生变化时，可能会涉及到DOM的更新，此时的更新本质上是属性的更新。</p><p>除了属性更新还有事件的更新。</p><p>属性节点的操作：</p><p>对于属性而言，大致可以分为两类：</p><p>属性：class、id、value、src…</p><p>事件：click、input…</p><p>非事件的属性部分分为 html属性和DOM properties（浏览器的属性分类）</p><p>html attributes：</p><ul><li>表示定义在html标签中的属性，这类属性只能在html中进行操作</li></ul><p>DOM properties：</p><ul><li><p>在dom中拿到DOM节点后使用js语句添加的属性，这类属性可以通过js语句修改</p></li><li><p>class、value、type属性详细操作</p></li><li><p>可通过el.setAttribute(‘属性名’,’属性值’)、el.属性名 &#x3D; ‘ ‘、el[‘属性’] &#x3D; ‘ ‘ 进行修改</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 上述三个属性通过例子进行详细说明</span><span class="token operator">&lt;</span>textarea <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">'class-name'</span> type<span class="token operator">=</span><span class="token string">'text'</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>textarea<span class="token operator">></span><span class="token keyword">const</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'textarea'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 修改类名</span>el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"class"</span><span class="token punctuation">,</span><span class="token string">"class-Name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>el<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'class-Name'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 修改type</span>el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 修改value</span>el<span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'hello world！'</span></code></pre></li></ul><p>事件更新</p><ul><li>添加事件 el.addEventListener</li><li>删除事件 el.removeEventListener</li><li>更新事件一般是删除旧事件，添加新事件，但是每次都是addEventListener和removeEventListener都很消耗性能，所以一般使用vei这个概念，意思就是它在addEventListener回调函数上添加了一个value属性方法，在回调函数中只要触发了这个方法，通过更新该属性方法的形式达到事件更新的效果。</li></ul></li><li><p>删除节点：parent.removeChild</p></li></ul><h3 id="第九、十、十一章：Diff算法"><a href="#第九、十、十一章：Diff算法" class="headerlink" title="第九、十、十一章：Diff算法"></a>第九、十、十一章：Diff算法</h3><p>这一章文章中讲解的非常少，需要自己补充额外的知识，虚拟DOM和diff算法</p><h4 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h4><h5 id="简要介绍"><a href="#简要介绍" class="headerlink" title="简要介绍"></a>简要介绍</h5><p>尚硅谷的网上课件</p><p><a href="https://yk2012.github.io/sgg_webpack5/">https://yk2012.github.io/sgg_webpack5/</a></p><p>这里大致开始编写一段基础的webpack5的知识点</p><p>因为我们在开发时会使用框架、ES6模块化语法，less等css预处理器，这样的代码必须编译成浏览器能够识别的js、css语法才能够在浏览器上运行，所以我们需要webpack等的打包工具。</p><p>gulp、parcel、webpack、vite等都是打包工具，但是webpack的功能更加强大，使用率更高，所以现在学习webpack。</p><p>webpack是一个静态资源的打包工具。webpack输出的文件叫做bundle。</p><h5 id="资源项目"><a href="#资源项目" class="headerlink" title="资源项目"></a>资源项目</h5><pre><code>webpack_code # 项目根目录（所有指令必须在这个目录运行）    └── src # 项目源码目录        ├── js # js文件目录        │   ├── count.js        │   └── sum.js        └── main.js # 项目主文件d</code></pre><p>main.js中依赖了count和sum.js</p><h5 id="启用webpack"><a href="#启用webpack" class="headerlink" title="启用webpack"></a>启用webpack</h5><pre><code>npx webpack ./src/main.js --mode=development</code></pre><p><code>npx webpack</code>: 是用来运行本地安装 <code>Webpack</code> 包的。</p><p><code>./src/main.js</code>: 指定 <code>Webpack</code> 从 <code>main.js</code> 文件开始打包，不但会打包 <code>main.js</code>，还会将其依赖也一起打包进来。</p><p><code>--mode=xxx</code>：指定模式（环境）。</p><p>默认webpack会将文件打包输出到dist目录下</p><h5 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h5><p>entry入口：指示 Webpack 从哪个文件开始打包</p><p>output（输出）：指示 Webpack 打包完的文件输出到哪里去，如何命名等</p><p>loader（加载器）：webpack 本身只能处理 js、json 等资源，其他资源需要借助 loader，Webpack 才能解析</p><p>plugins（插件）：扩展 Webpack 的功能</p><p>mode（模式）：主要由两种模式：</p><ul><li>开发模式：development</li><li>生产模式：production</li></ul><p>webpack的配置文件：<strong>webpack.config.js</strong></p><p>Webpack 是基于 Node.js 运行的，所以采用 Common.js 模块化规范</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Node.js的核心模块，专门用来处理文件路径</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 入口</span>  <span class="token comment" spellcheck="true">// 相对路径和绝对路径都行</span>  entry<span class="token punctuation">:</span> <span class="token string">"./src/main.js"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 输出</span>  output<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// path: 文件输出目录，必须是绝对路径</span>    <span class="token comment" spellcheck="true">// path.resolve()方法返回一个绝对路径</span>    <span class="token comment" spellcheck="true">// __dirname 当前文件的文件夹绝对路径</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// filename: 输出文件名</span>    filename<span class="token punctuation">:</span> <span class="token string">"main.js"</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 加载器</span>  module<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 插件</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 模式</span>  mode<span class="token punctuation">:</span> <span class="token string">"development"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 开发模式</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><p>运行指令：npx webpack</p><h5 id="开发模式"><a href="#开发模式" class="headerlink" title="开发模式"></a>开发模式</h5><p>1、编译代码，使得浏览器能够识别运行</p><p>开发时我们有样式资源、字体图标、图片资源、html资源等，webpack不能处理这些资源，所以我们要<strong>加载配置</strong>来编译这些资源。</p><p>2、代码质量检查、梳理代码规范</p><h5 id="处理样式资源"><a href="#处理样式资源" class="headerlink" title="处理样式资源"></a>处理样式资源</h5><p>处理css</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 下载包 需要下载两个loader </span>npm i css<span class="token operator">-</span>loader style<span class="token operator">-</span>loader <span class="token operator">-</span>D</code></pre><ul><li><code>css-loader</code>：负责将 Css 文件编译成 Webpack 能识别的模块</li><li><code>style-loader</code>：会动态创建一个 Style 标签，里面放置 Webpack 中 Css 模块内容</li></ul><p>此时样式就会以style标签的形式在页面上生效</p><p>配置（其余不变，只需要在module也就是加载器loader中添加rules即可）</p><pre><code>module: &#123;    rules: [        // 用来匹配.css结尾的文件 i表示不区分大小写        test: /\.css$/i,        // use数组里面loader执行顺序是从右到左        use: [&quot;style-loader&quot;, &quot;css-loader&quot;],    ],&#125;,</code></pre><ul><li><p>src&#x2F;css&#x2F;index.css</p><pre class=" language-css"><code class="language-css"><span class="token number">.</span>box<span class="token number">1</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre></li><li><p>src&#x2F;main.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> count <span class="token keyword">from</span> <span class="token string">"./js/count"</span><span class="token punctuation">;</span><span class="token keyword">import</span> sum <span class="token keyword">from</span> <span class="token string">"./js/sum"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 引入 Css 资源，Webpack才会对其打包</span><span class="token keyword">import</span> <span class="token string">"./css/index.css"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>public&#x2F;index.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>webpack5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello Webpack5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 准备一个使用样式的 DOM 容器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引入打包后的js文件，才能看到效果 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../dist/main.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>运行指令：npx webpack</p></li></ul><h5 id="处理图片资源"><a href="#处理图片资源" class="headerlink" title="处理图片资源"></a>处理图片资源</h5><p>配置</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          test<span class="token punctuation">:</span> <span class="token regex">/\.(png|jpe?g|gif|webp)$/</span><span class="token punctuation">,</span>        type<span class="token punctuation">:</span> <span class="token string">"asset"</span><span class="token punctuation">,</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>       <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span></code></pre><p>添加图片资源</p><ul><li>src&#x2F;images&#x2F;1.jpeg</li><li>src&#x2F;images&#x2F;2.png</li><li>src&#x2F;images&#x2F;3.gif</li></ul><p>使用图片资源</p><pre class=" language-css"><code class="language-css"><span class="token number">.</span>box<span class="token number">2</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url("../images/1.jpeg")</span><span class="token punctuation">;</span>  <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p>运行指令</p><p>npx webpack</p><p>打开index.html页面查看效果</p><p>此时如果查看 dist 目录的话，会发现多了三张图片资源</p><p>因为 Webpack 会将所有打包好的资源输出到 dist 目录下</p><p>修改输出资源的名称和路径 需要在配置中output添加filename：static&#x2F;js&#x2F;main.js(这个路径是在path路径之后新开辟的路径</p><p>)</p><p>处理js资源（webpack对js的处理是有限的，只能编译js中ES模块化语法，不能编译其他语法，导致js不能在IE等浏览器中运行，所以我们希望做一些兼容性处理，类似Eslint：检查代码格式；Babel：代码兼容性处理）</p><h5 id="生产模式介绍"><a href="#生产模式介绍" class="headerlink" title="生产模式介绍"></a>生产模式介绍</h5><pre><code>├── webpack-test (项目根目录)    ├── config (Webpack配置文件目录)    │    ├── webpack.dev.js(开发模式配置文件)    │    └── webpack.prod.js(生产模式配置文件)    ├── node_modules (下载包存放目录)    ├── src (项目源码目录，除了html其他都在src里面)    │    └── 略    ├── public (项目html文件)    │    └── index.html    ├── .eslintrc.js(Eslint配置文件)    ├── babel.config.js(Babel配置文件)    └── package.json (包的依赖管理配置文件)</code></pre><h5 id="devServer"><a href="#devServer" class="headerlink" title="devServer"></a>devServer</h5><p>应用场景：</p><p>当我们创建了一个HTML文件，并在里面写入 Hello world, 这个时候我们使用webpack命令，对这个html进行打包， 并看打包后的html效果，页面中会呈现出 Hello world，但是当我们再次修改原文件html为 Hello Hello world， 这个时候我们需要重新使用webpack命令进行打包，然后才能看到打包后的html效果。每当我们修改的频率越来越多了， 这样的重复动作会使我们的效率十分低下，这个时候就需要webpack提供的devServer了。</p><p>提高开发效率的一个配置，它可以帮助我们自动的打包代码，开发者只需要进行开发源代码就可，不用多次webpack。</p><h4 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h4><p>typeScript是javascript的、<strong>带有类型</strong>的<strong>超集</strong>，并且能够<strong>编译</strong>为普通的JavaScript。</p><p>编译：TypeScript编译器本身是不能够在nodejs或者浏览器下运行的，需要typescript编译器将其编译成普通的js</p><p>带有类型：要求变量有确定的类型，在编写代码时就已经确定了变量的类型，且不能随意赋值给不同类型的变量。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> str<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>str <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error</span></code></pre><p>超集：typescript本身支持所有的js语法，并在此基础上添加了额外的功能和特性，这样就使得所有的JavaScript代码能够完全被typescript编译。</p><h4 id="虚拟DOM和Diff算法"><a href="#虚拟DOM和Diff算法" class="headerlink" title="虚拟DOM和Diff算法"></a>虚拟DOM和Diff算法</h4><p>虚拟DOM是<strong>表示真实DOM的JS对象</strong></p><p>真实DOM</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        思学堂    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>item<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>课程很精彩<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>虚拟DOM</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> Vnode <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    tagName<span class="token punctuation">:</span> <span class="token string">'div'</span><span class="token punctuation">,</span>    props<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'container'</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    children<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            tagName<span class="token punctuation">:</span> <span class="token string">'p'</span><span class="token punctuation">,</span>            props<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'item'</span><span class="token punctuation">,</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            text<span class="token punctuation">:</span> <span class="token string">'思学堂'</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            tagName<span class="token punctuation">:</span> <span class="token string">'strong'</span><span class="token punctuation">,</span>            props<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'item'</span><span class="token punctuation">,</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            text<span class="token punctuation">:</span> <span class="token string">'课程很精彩'</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>如果修改了真实DOM中的js代码，那么虚拟DOM也会发生变化，如何最小化的进行虚拟DOM的更新呢，就会用到diff算法，进行对比，找到差异之后进行更改即可（最小化的更新视图）。</p><p>diff算法是一种比对算法，它可以进行精细化的比对，比对两者是旧虚拟DOM和新虚拟DOM，实现最小量的更新。Diff算法一般都只在同级进行比对（深度优先算法），比对的时候采用<strong>首尾指针法</strong>。新虚拟DOM的首指针与旧虚拟DOM的首指针进行对比，新DOM首指针与旧DOM尾指针对比，新DOM尾指针与旧DOM首指针对比，新DOM尾指针与旧DOM尾指针对比，如果某一个过程对比上了，首指针右移，尾指针左移，直到首指针在尾指针的右边则结束对比。</p><p>diff算法的整个流程</p><img src="https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/diff%E7%AE%97%E6%B3%95%E6%95%B4%E4%B8%AA%E6%B5%81%E7%A8%8B.jpg" width='800px' align='left'/><p>当数据改变时，会触发<code>setter</code>，并且通过<code>Dep.notify</code>去通知所有<code>订阅者Watcher</code>，订阅者们就会调用<code>patch方法</code>，给真实DOM打补丁，更新相应的视图。</p><p><a href="https://juejin.cn/post/6994959998283907102">15张图，20分钟吃透Diff算法核心原理，我说的！！！ - 掘金 (juejin.cn)</a></p><p>上面是diff算法中源码的详解。</p><p>使用虚拟DOM算法的损耗计算：总损耗 &#x3D; <strong>虚拟DOM增删改</strong> + （与Diff算法效率有关）真实DOM差异增删改+（较少节点的重绘与排版）</p><p>直接操作真实DOM的损耗计算：总损耗 &#x3D; 真实DOM完全增删改 + （可能较多的节点）排版与重绘</p><h2 id="第四篇：组件化"><a href="#第四篇：组件化" class="headerlink" title="第四篇：组件化"></a>第四篇：组件化</h2><h3 id="第十二章：组件的实现原理"><a href="#第十二章：组件的实现原理" class="headerlink" title="第十二章：组件的实现原理"></a>第十二章：组件的实现原理</h3><p>组件本质上就是一个 <code>JavaScript</code> 对象，比如，以下对象就是一个基本的组件</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// MyComponent是一个组件，它的值是一个选项对象</span><span class="token keyword">const</span> MyComponent <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span> <span class="token string">'MyComponent'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> foo<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>对于组件而言，同样需要使用 <code>vnode</code> 来进行表示，当 <code>vnode</code> 的 <code>type</code> 属性是一个 <strong>自定义对象</strong> 时，那么这个 <code>vnode</code> 就表示组件的 <code>vnode</code></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 该vnode用来描述组件，type属性存储组件的选项对象</span><span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    type<span class="token punctuation">:</span> MyComponent    <span class="token comment" spellcheck="true">// ...</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>组件的渲染，本质上是 <strong>组件包含的 <code>DOM</code> 的渲染。</strong> 对于组件而言，必然会包含一个 <code>render</code> 渲染函数。如果没有 <code>render</code> 函数，那么 <code>vue</code> 会把 <code>template</code> 模板编译为 <code>render</code> 函数。而组件渲染的内容，其实就是 <code>render</code> 函数返回的 <code>vnode</code>。具体的渲染逻辑，全部都通过渲染器执行。</p><p>组件名就相当于html中的标签，通过在html中使用组件名，达到复用组件的功能。</p><p>组件总共分为四个部分：1、组件注册 2、组件通信 3、组件插槽 4、内置组件</p><h4 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h4><h5 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h5><p>全局注册的组件在注册后可以用于任意实例或者组件中。</p><pre class=" language-js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'组件名'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 选项对象 */</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>全局注册必须设置在根Vue实例创建之前。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 这个div的id设置为app说明是通过Vue创建的视图 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这是一个p标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 现在使用的是vue2版本 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- &lt;script src="./vue.js">&lt;/script> --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 注册全局组件</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-component'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      template<span class="token punctuation">:</span> <span class="token string">'&lt;div>这是全局组件&lt;/div>'</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>组件基础</p><p>组件就是html标签的一个形式，是可复用的Vue实例，所以它们可与new Vue接收相同的选项，例如data、mehods以及声明周期钩子等。</p><p>但是像el这样根实例特有的选项不能在组件中使用，因为el代表的是挂载的元素，根实例是需要挂载到页面上的元素的，而组件是被根实例或者其它组件使用的，它不需要直接挂载到我们的页面中。</p><ul><li><p>组件命名规则</p><p>kebab-case：‘my-component’（短横线连接多个单词，建议，因为在DOM中引入组件时只能按照这种方式引入）</p><p>PascalCase：‘MyComponent’ （每个单词部分的首字母大写）</p></li><li><p>template选项</p><p>template选项用于设置组件的结构，最终被引入根实例或者其它组件中。</p><pre class=" language-js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-com-b'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 注意：这里模板里里面可以使用反引号添加变量，且只能有一个根标签div</span>      template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`        &lt;div>          这是组件b的内容： &amp;#123;&amp;#123; 1+2*3 &amp;#125;&amp;#125;          &lt;/div>      `</span></span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre></li><li><p>单项数据流（父组件向子组件传值）</p><p>子组件接收父组件的传值使用prop属性接收</p><p>父子组件间的所有prop都是单项下行绑定的（说人话就是只能从父组件向子组件传值，子组件不能影响父组件，父组件的值修改后子组件的值也都会相应的修改，但是子组件不能直接修改父组件传过来的值，而需要进行保存在data中来修改，且修改后对父组件的值没有任何影响。）</p><p>如果子组件要处理prop数据，应当存储在data中后操作。</p><pre class=" language-html"><code class="language-html">// 在html中使用组件标签时&lt;my-com-c:initial-title = "title"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-com-c</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 在script中编写组件时</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-com-c'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'initialTitle'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`        &lt;div>          &amp;#123;&amp;#123; title &amp;#125;&amp;#125;            &lt;button @click = "fn">button&lt;/button>        &lt;/div>      `</span></span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            title<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>initialTitle        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"这是一个新的标题！"</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        title<span class="token punctuation">:</span> <span class="token string">"这是一个标题"</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre></li><li><p>data选项</p><p>data选项用于存储组件的数据，与根实例不同，组件的data选项必须为函数，数据设置在返回值对象中。</p><p>使用函数的实现方式主要是为了确保每个组件实例可以维护一份被返回对象的独立的拷贝，不会相互影响。</p><p>因为组件在页面中不一定是单个，它可以进行多次数的复用，为了确保多个复用组件数据的独立，这时就需要作用域进行隔离，如果data是一个函数，而函数都有单独的作用域，因此就算使用了多个复用组件，它们之间的数据也是相互独立开的，不会互相影响。</p></li></ul><h5 id="局部注册"><a href="#局部注册" class="headerlink" title="局部注册"></a>局部注册</h5><p>局部注册的组件只能用在当前实例或者组件中。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-com-d</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-com-d</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            title<span class="token punctuation">:</span> <span class="token string">"这是一个标题"</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 开始编写局部组件</span>        components<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token string">'my-com-d'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`              &lt;div>                &lt;h3>&amp;#123;&amp;#123; title &amp;#125;&amp;#125;&lt;/h3>                &lt;p>&amp;#123;&amp;#123; content &amp;#125;&amp;#125;&lt;/p>              &lt;/div>              `</span></span><span class="token punctuation">,</span>                <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        title<span class="token punctuation">:</span> <span class="token string">'组件标题'</span><span class="token punctuation">,</span>                        content<span class="token punctuation">:</span> <span class="token string">'组件内容'</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h4 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h4><p>组件间传递数据的操作，称为组件通信。</p><h5 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h5><p>使用props进行传值，有静态属性设置、动态属性绑定</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 这个div的id设置为app说明是通过Vue创建的视图 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 这里的 : 是 v-bind: 的缩写,用来绑定值 --></span>        <span class="token comment" spellcheck="true">&lt;!-- 动态属性绑定： 常用操作 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component-a</span>           <span class="token attr-name">:title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.title<span class="token punctuation">"</span></span>          <span class="token attr-name">:content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.content<span class="token punctuation">"</span></span>        <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component-a</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 静态属性设置 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component-a</span>          <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>这是静态标题<span class="token punctuation">"</span></span>          <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>这是静态内容<span class="token punctuation">"</span></span>        <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component-a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 全局注册一个子组件 从根组件向子组件传值</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-component-a'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">,</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`      &lt;div>        &lt;h3> &amp;#123;&amp;#123; title &amp;#125;&amp;#125; &lt;/h3>        &lt;p> &amp;#123;&amp;#123; content &amp;#125;&amp;#125; &lt;/p>        &lt;/div>      `</span></span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 新建一个Vue实例（也叫做根实例）作为父组件 绑定id为app</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        item<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          title<span class="token punctuation">:</span> <span class="token string">'这是示例标题'</span><span class="token punctuation">,</span>          content<span class="token punctuation">:</span> <span class="token string">'这是示例内容'</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>props命名规则</p><p>建议prop命名使用camelCase，父组件绑定时使用kebab-case</p><img src='https://zyydgrbk.oss-cn-chengdu.aliyuncs.com/images/props命名规则.jpg'><h5 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h5><p>通过自定义事件实现，$emit()触发自定义事件，$emit是Vue实例的一个方法，它内部有一个名称，它会触发指定名称的自定义事件，名称可以自己设置。</p><p>自定义事件名称建议使用kebab-case</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 这个div的id设置为app说明是通过Vue创建的视图 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>购物车<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    &lt;product-item      v-for="product in products"      :key = product.id      :title = product.title      @count-change="totalNum++"    ><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>product-item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>商品总个数为<span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span>totalNum<span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 创建全局注册组件 </span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'product-item'</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`        &lt;div>          &lt;span>商品名称：&amp;#123;&amp;#123; title &amp;#125;&amp;#125;，商品个数：&amp;#123;&amp;#123; count &amp;#125;&amp;#125;&lt;/span>          &lt;button @click='countIns'>+1&lt;/button>        &lt;/div>      `</span></span><span class="token punctuation">,</span>      <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          count<span class="token punctuation">:</span> <span class="token number">0</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 添加方法，使得按下+1之后每个数据可以增加</span>      methods<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">countIns</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 添加自定义事件，表示如果发生了countIns事件</span>          <span class="token comment" spellcheck="true">// 就会触发count-change事件</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'count-change'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 新建Vue实例</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>      data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 添加数据</span>          products<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'苹果'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'香蕉'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'橙子'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>          totalNum<span class="token punctuation">:</span> <span class="token number">0</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>自定义事件，可以传递参数</p><p>this.$emit(‘count-change’, 1);</p><p>参数直接接收使用$event</p><p>@count-change &#x3D; “totalCount  +&#x3D; $event”</p><p>也可以直接设置函数接收</p><p>@count-change &#x3D; “onCountChange”</p><p>onCountChange(productcount) {</p><p>​this.totalCount +&#x3D; productCount;</p><p>}</p><h5 id="非父子组件传值"><a href="#非父子组件传值" class="headerlink" title="非父子组件传值"></a>非父子组件传值</h5><p>非父子组件指的是兄弟组件或者完全无关的两个组件。</p><h6 id="兄弟组件传值"><a href="#兄弟组件传值" class="headerlink" title="兄弟组件传值"></a>兄弟组件传值</h6><p>通过父组件进行数据中转</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 这个div的id设置为app说明是通过Vue创建的视图 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 将coma中的值传递到comb中 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com-a</span>      <span class="token attr-name">@change-a</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>value <span class="token punctuation">=</span> $event<span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>com-a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com-b</span>      <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>value<span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>com-b</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'ComA'</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`        &lt;div>          &amp;#123;&amp;#123; value &amp;#125;&amp;#125;          &lt;button @click='$emit("change-a", value)'> 发送&lt;/button>        &lt;/div>      `</span></span><span class="token punctuation">,</span>      <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          value<span class="token punctuation">:</span> <span class="token string">"这是组件A的内容"</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'ComB'</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`        &lt;div>          &amp;#123;&amp;#123; value &amp;#125;&amp;#125;        &lt;/div>      `</span></span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>      <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 用于数据中转</span>          value<span class="token punctuation">:</span> <span class="token string">''</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h6 id="EventBus（事件总线）"><a href="#EventBus（事件总线）" class="headerlink" title="EventBus（事件总线）"></a>EventBus（事件总线）</h6><p>当组件嵌套关系复杂时，根据组件关系传值会比较繁琐。组件为了数据中转，data会存在许多与当前组件功能无关的数据。</p><p>EventBus是一个独立的事件中心，用于管理不同组件间的传值操作。它通过一个新的Vue实例来管理组件传值操作，组件通过给实例注册事件、调用事件来实现数据传递。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Eventbus.js</span><span class="token keyword">var</span> bus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>原理：发送数据的组件触发bus事件，接收的组件给bus注册对应事件。</p><p>视频进展</p><p><a href="https://www.bilibili.com/video/BV1oK4y1o7tf/?p=15&spm_id_from=pageDriver&vd_source=8536a8e0f7f03641eaba2d84d7583bd8">EventBus_哔哩哔哩_bilibili</a></p><h6 id="其它传值方式"><a href="#其它传值方式" class="headerlink" title="其它传值方式"></a>其它传值方式</h6><h3 id="第十三章：异步组件与函数式组件"><a href="#第十三章：异步组件与函数式组件" class="headerlink" title="第十三章：异步组件与函数式组件"></a>第十三章：异步组件与函数式组件</h3><p>异步组件，指的是： <strong>异步加载的组件</strong></p><p>函数式组件指的是 <strong>没有状态的组件。本质上是一个函数，可以通过静态属性的形式添加 <code>props</code> 属性</strong> 。在实际开发中，并不常见。</p><h3 id="第十四章：内建组件和模块"><a href="#第十四章：内建组件和模块" class="headerlink" title="第十四章：内建组件和模块"></a>第十四章：内建组件和模块</h3><h4 id="keepAlive"><a href="#keepAlive" class="headerlink" title="keepAlive"></a>keepAlive</h4><p>非常常用的内置组件。它可以 <strong>缓存一个组件，避免该组件不断地销毁和创建</strong></p><p>原理：</p><p>主要围绕着 <strong>组件卸载</strong> 和 <strong>组件挂载</strong> 两个方面：</p><ul><li><strong>组件卸载</strong>：当一个组件被卸载时，它并不被真正销毁，而是把组件保存在一个容器中</li><li><strong>组件挂载</strong>：因为组件被保存了。所以当这个组件需要被挂载时，就不需要在重新创建，而是直接从容器中获取即可。</li></ul><h4 id="Teleport"><a href="#Teleport" class="headerlink" title="Teleport"></a>Teleport</h4><p><code>Teleport</code> 是 <code>vue 3</code> 新增的组件，作用是 <strong>将 <code>Teleport</code> 插槽的内容渲染到其他的位置</strong>。比如我们可以把 <code>dialog</code> 渲染到 <code>body</code> 根标签之下。</p><p>它的实现原理，主要也是分为两部分：</p><ol><li>把 Teleport 组件的渲染逻辑，从渲染器中抽离</li><li>在指定的位置进行独立渲染</li></ol><h4 id="Transition"><a href="#Transition" class="headerlink" title="Transition"></a>Transition</h4><p><code>Transition</code> 是咱们常用的动画组件，作用是 <strong>实现动画逻辑</strong>。</p><p>其核心原理同样被总结为两点：</p><ol><li><code>DOM</code> 元素被挂载时，将动效附加到该 <code>DOM</code> 元素上</li><li><code>DOM</code> 元素被卸载时，等在 <code>DOM</code> 元素动效执行完成后，执行卸载 <code>DOM</code> 操作</li></ol><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>清楚组件的原理和内建组件原理即可</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第8章 对象、类与面向对象编程</title>
      <link href="/2023/04/16/di-8-zhang-dui-xiang-lei-yu-mian-xiang-dui-xiang-bian-cheng/"/>
      <url>/2023/04/16/di-8-zhang-dui-xiang-lei-yu-mian-xiang-dui-xiang-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="第八章-对象、类与面向对象编程"><a href="#第八章-对象、类与面向对象编程" class="headerlink" title="第八章 对象、类与面向对象编程"></a>第八章 对象、类与面向对象编程</h1><p>对象是一组属性的无序集合</p><h2 id="理解对象"><a href="#理解对象" class="headerlink" title="理解对象"></a>理解对象</h2><p>可以通过Object的实例创建，或者直接通过字面量创建</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 通过Object构造函数创建</span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'zou'</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 通过字面量创建对象</span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span> <span class="token string">"zou"</span><span class="token punctuation">;</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">;</span>    sayName <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="属性的类型"><a href="#属性的类型" class="headerlink" title="属性的类型"></a>属性的类型</h3><h4 id="数据属性"><a href="#数据属性" class="headerlink" title="数据属性"></a>数据属性</h4><p>保存值的位置</p><p>有4个默认特性</p><p>configurable：是否可以铜鼓odelete删除并重新定义</p><p>enumerable：是否可以通过for-in循环返回</p><p>writable：是否可以被修改</p><p>value：包含属性实际的值</p><p>想要修改数据属性的默认特性，必须使用Object.defineproperty()方法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span> Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  writable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  value<span class="token punctuation">:</span> <span class="token string">"Nicholas"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "Nicholas" </span>person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Greg"</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "Nicholas"</span></code></pre><h4 id="访问器属性"><a href="#访问器属性" class="headerlink" title="访问器属性"></a>访问器属性</h4><p>一个函数，用来描述对象的属性读取和设置行为</p><p>有4个默认特性：</p><p>configurable：是否可以通过delete删除并重新定义</p><p>enumerable：是否可以铜鼓for-in循环返回</p><p>get：获取函数，在读取属性时调用，默认值为undefined</p><p>set：设置函数，在写入属性时调用，默认值为undefined</p><p>同样，访问器属性不能直接定义，必须使用Object.defineProperty()</p><h3 id="合并对象"><a href="#合并对象" class="headerlink" title="合并对象"></a>合并对象</h3><p>ES6提供了Object.assign()方法进行合并对象，这个方法接受一个目标对象和<strong>一个或者多个</strong>源对象作为参数，然后将每个源对象中</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 目标对象</span>dest <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">'dest'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 源对象</span>src <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> id<span class="token punctuation">:</span> <span class="token string">'src'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>result <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//&amp;#123;name: 'dest', id: 'src'&amp;#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//&amp;#123;id: 'src'&amp;#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">////&amp;#123;name: 'dest', id: 'src'&amp;#125;</span></code></pre><h3 id="对象标识及相等判定"><a href="#对象标识及相等判定" class="headerlink" title="对象标识及相等判定"></a>对象标识及相等判定</h3><p>Object.is()：功能与&#x3D;&#x3D;&#x3D;相似，但是能够准确判断+0、-0、0、NaN的情况（使用isNaN()也可以判断）</p><h3 id="增强的对象语法"><a href="#增强的对象语法" class="headerlink" title="增强的对象语法"></a>增强的对象语法</h3><h4 id="属性简写"><a href="#属性简写" class="headerlink" title="属性简写"></a>属性简写</h4><p>属性名与变量名一致时，可以只写变量名</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'Matt'</span><span class="token punctuation">;</span> <span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  name<span class="token punctuation">:</span> name <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 上述内容可以简写 </span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &amp;#123; name: 'Matt' &amp;#125;</span></code></pre><h4 id="可计算属性"><a href="#可计算属性" class="headerlink" title="可计算属性"></a>可计算属性</h4><h4 id="简写方法名"><a href="#简写方法名" class="headerlink" title="简写方法名"></a>简写方法名</h4><pre><code>let person = &#123;    sayName: function(name) &#123;        console.log(`My name is $&#123;name&#125;`);    &#125;&#125;;// 上述方法可以简写成let person = &#123;    sayName(name) &#123;        console.log(`My name is $&#123;name&#125;`);    &#125;&#125;;</code></pre><h3 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h3><p>使用与对象匹配的结构来实现对象属性的赋值</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span> <span class="token string">"matt"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">24</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>job<span class="token operator">=</span><span class="token string">'Software engineer'</span><span class="token punctuation">)</span> <span class="token operator">=</span> person<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "matt"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 24</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'Software engineer' 如果没有定义默认值则会输出undefined</span></code></pre><p>1、嵌套解构</p><p>2、部分解构</p><p>3、参数上下文匹配</p><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>是一种设计模式，广泛应用于软件工程领域，用于抽象创建特定对象的过程。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createPerson</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> job<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  o<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  o<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  o<span class="token punctuation">.</span>job <span class="token operator">=</span> job<span class="token punctuation">;</span>  o<span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> o<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">let</span> person1 <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">"Nicholas"</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token string">"Software Engineer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> person2 <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">"Greg"</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token string">"Doctor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p>通过上述方法，可以用不同的参数多次调用这个函数，每次都会返回包含不同属性值的对象，这种工厂模式可以解决创建多个类似对象的问题，但是没有解决对象标识问题。</p><h3 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 上述的例子可以使用构造函数</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>job<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>job <span class="token operator">=</span> job<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 构造函数不一定要写成函数声明的形式，赋值给变量的函数表达式也可以表示构造函数</span><span class="token keyword">let</span> Person <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>job<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>job <span class="token operator">=</span> job<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Nicholas"</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token string">"Software Engineer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Greg"</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token string">"Doctor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> person1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Nicholas </span>person2<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Greg </span></code></pre><p>创建Person实例，使用了new操作符，以这种方式调用构造函数会执行如下操作：</p><p>1、在内存中创建一个新对象</p><p>2、新对象的<strong>_proto_属性指向构造函数的prototype属性</strong>。</p><p>3、构造函数内部this指向新对象。</p><p>4、执行构造函数内部代码</p><p>5、构造函数返回新对象。如果手动return，则返回return的内容。</p><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><p>每个函数都有一个prototype属性，这个属性是一个对象，包含一些属性和方法。它就是通过调用构造函数创建的对象的&#x3D;&#x3D;原型&#x3D;&#x3D;，使用原型的好处就是在它上面定义的属性和方法可以被对象实例共享。</p><pre class=" language-js"><code class="language-js">Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Nicholas"</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>job <span class="token operator">=</span> <span class="token string">"software Engineer"</span><span class="token punctuation">;</span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "Nicholas"</span></code></pre><p>prototype会自动获得一个constructor属性，指向创建函数的构造函数。</p><p>也就是（构造函数有一个prototype属性，也是原型对象，这个原型对象也有一个constructor属性，指向构造函数）</p><p>Person.prototype.constructor &#x3D;&#x3D;&#x3D; Person; &#x2F;&#x2F; true</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Object<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true </span></code></pre><p>对象：_proto_和constructor</p><p>函数：prototype（原型属性）、_proto_、constructor（因为函数也是对象，所以也有上面两个属性）</p><p>_proto_作用：访问一个对象的属性时，如果该对象内部不存在这个属性时，那么就会去它的_proto_属性所指向的那个对象查找。因此是从对象——对象。</p><img src="https://img-blog.csdnimg.cn/20190311192930650.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NjMTg4Njg4NzY4Mzc=,size_16,color_FFFFFF,t_70#pic_center" alt="__proto__" style="zoom:80%;" /><p>prototype：从函数——对象，作用：让该函数所实例化的对象都可以找到公用的属性和方法。</p><img src="https://img-blog.csdnimg.cn/20190311193033876.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NjMTg4Njg4NzY4Mzc=,size_16,color_FFFFFF,t_70#pic_center" alt="prototype属性" style="zoom:80%;" /><p>constructor：对象——函数，含义：指向该对象的构造函数。</p><img src="https://img-blog.csdnimg.cn/20190311193745414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NjMTg4Njg4NzY4Mzc=,size_16,color_FFFFFF,t_70#pic_center" alt="constructor属性" style="zoom:80%;" /><p>hasOwnProperty(“name”); &#x2F;&#x2F; 判断实例上是否有name这个属性 (如果只在原型上存在但是实例没有则显示false)</p><p>console.log(“name” in person1); &#x2F;&#x2F; true （不管name在实例还是原型上，只要存在，使用in返回的结果都是true）</p><p>for in 可以循环<strong>实例对象所有可枚举属性，包括原型对象的属性</strong>。Object.keys()只会返回<strong>实例对象上的可枚举属性</strong>，Object.getOwnPropertyNames()可以<strong>返回所有实例属性，包括不可枚举属性。</strong></p><h3 id="对象迭代"><a href="#对象迭代" class="headerlink" title="对象迭代"></a>对象迭代</h3><p>Object.values()：接收一个对象，返回对象值的数组</p><p>Object.entries()：接收一个对象，返回键&#x2F;值对的数组</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    foo<span class="token punctuation">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span>    baz<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    qux<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ["bar",1,&amp;#123;&amp;#125;]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [["foo","bar"],["baz",1],["qux",&amp;#123;&amp;#125;]]</span></code></pre><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>每个构造函数都有一个原型对象，原型有个属性指回构造函数。个人理解就是因为js不是面向对象的语言，没有什么public、privacy等属性，那么如果是函数中的公用部分就放入原型对象中，使得通过构造函数得到的实例可以共用原型对象上的属性和方法，不能共用的就单独放到实例的属性和方法中。</p><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p><strong>ES中把原型链作为ES的主要继承方式</strong>，基本思想就是通过原型链继承多个引用类型的属性和方法。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>property <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>SuperType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getSuperValue <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>property<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subproperty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>SubType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getSubValue <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subproperty<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 继承SuperType</span>SubType<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instace<span class="token punctuation">.</span><span class="token function">getSuperValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>1、默认原型</p><p>默认情况下，所有引用类型都继承自Object，这也是通过原型链实现的。</p><p>2、原型与继承关系</p><p>instanceof操作符：如果一个<strong>实例</strong>的原型链中出现过相应的构造函数，则返回true</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance <span class="token keyword">instanceof</span> <span class="token class-name">SuperType</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance <span class="token keyword">instanceof</span> <span class="token class-name">SubType</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true </span></code></pre><p>isPrototypeOf方法：原型链中每个<strong>原型</strong>都可以调用这个方法，只要原型链中包含这个原型，就会返回true。</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>SuperType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>SubType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>原型链的问题：</p><p>原型中包含引用值的时候，会在所有的实例间共享，这也就是为什么属性通常会在构造函数中定义而不会在原型上的原因。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span><span class="token string">'blue'</span><span class="token punctuation">,</span><span class="token string">'green'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 继承SuperType</span>SubType<span class="token punctuation">.</span>prototype <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "red,blue,green,black"</span><span class="token keyword">let</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "red,blue,green,black"</span></code></pre><p>在实例instance1中修改了colors导致所有的实例的colors都发生了改变，就是原型上的属性是所有实例所共享的，也都是可以进行修改的。</p><h3 id="盗用构造函数"><a href="#盗用构造函数" class="headerlink" title="盗用构造函数"></a>盗用构造函数</h3><p>为了解决原型包含引用值导致的继承问题。</p><p>基本思路：在子类构造函数中调用父类构造函数，使用apply和call方法以新创建的对象为上下文执行构造函数。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token string">"blue"</span><span class="token punctuation">,</span><span class="token string">"green"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 继承SuperType</span>    SuperType<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "red,blue,green,black"</span><span class="token keyword">let</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "red,blue,green"</span></code></pre><p>优点：可以在子类构造函数中向父类构造函数传参。</p><p>缺点：必须在构造函数中定义方法，因此函数不能重用，此外，子类也不能访问父类原型上定义的方法。因此所有类型只能使用构造函数模式。</p><h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><p>使用原型链继承原型上的属性和方法，通过盗用构造函数继承实例属性。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token string">"blue"</span><span class="token punctuation">,</span><span class="token string">"green"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>SuperType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 继承属性</span>    SuperType<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 继承方法</span>SubType<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>SubType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayAge <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">let</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">"Nicholas"</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instace1<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "red,blue,green,black"</span>instance1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "Nicholas"</span>instance1<span class="token punctuation">.</span><span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 29</span><span class="token keyword">let</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">"Greg"</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "red,blue,green"</span>instance2<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Greg</span>instance2<span class="token punctuation">.</span><span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 27</span></code></pre><h3 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  name<span class="token punctuation">:</span> <span class="token string">"Nicholas"</span><span class="token punctuation">,</span>  friends<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"Shelby"</span><span class="token punctuation">,</span> <span class="token string">"Court"</span><span class="token punctuation">,</span> <span class="token string">"Van"</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token keyword">let</span> anotherPerson <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span> anotherPerson<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Greg"</span><span class="token punctuation">;</span> anotherPerson<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"Rob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> yetAnotherPerson <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span> yetAnotherPerson<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Linda"</span><span class="token punctuation">;</span> yetAnotherPerson<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"Barbie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>friends<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "Shelby,Court,Van,Rob,Barbie"</span></code></pre><h3 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h3><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>ES6新引入了class关键字具有正式定义类的能力</p><h3 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 类声明</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 类表达式</span><span class="token keyword">const</span> Animal <span class="token operator">=</span> <span class="token keyword">class</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><p>类没有提升，受块作用域限制，类可以包含构造函数方法、实例方法、获取函数、设置函数和静态类方法。</p><pre class=" language-js"><code class="language-js">    <span class="token comment" spellcheck="true">// 空类定义，有效</span>    <span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 有构造函数的类，有效</span>    <span class="token keyword">class</span> <span class="token class-name">Bar</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 有获取函数的类，有效</span>    <span class="token keyword">class</span> <span class="token class-name">Baz</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">get</span> <span class="token function">myBaz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 有静态方法的类，有效</span>    <span class="token keyword">class</span> <span class="token class-name">Qux</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">static</span> <span class="token function">myQux</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="类构造函数"><a href="#类构造函数" class="headerlink" title="类构造函数"></a>类构造函数</h3><h4 id="1、实例化"><a href="#1、实例化" class="headerlink" title="1、实例化"></a>1、实例化</h4><p>使用new调用类的构造函数会执行如下操作：</p><p>1）内存中创建一个新对象</p><p>2）这个新对象内部的_proto_  指针被赋值为构造函数的prototype属性</p><p>3）构造函数内部的this被赋值为这个新对象（即this指向新对象）</p><p>4）执行构造函数内部的代码（给新对象添加属性）</p><p>5）如果构造函数返回非空对象，则返回该对象；否则，返回刚创建的新对象</p><p>类构造函数与构造函数的主要区别是，调用类构造函数必须使用 new 操作符。而普通构造函数如果 不使用 new 调用，那么就会以全局的 this（通常是 window）作为内部对象。调用类构造函数时如果 忘了使用 new 则会抛出错误：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 把 window 作为 this 来构建实例</span><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// TypeError: class constructor Animal cannot be invoked without 'new'</span></code></pre><h3 id="实例、原型和类成员"><a href="#实例、原型和类成员" class="headerlink" title="实例、原型和类成员"></a>实例、原型和类成员</h3><p>可以在类上定义静态方法，每个类只能定义一个静态方法，在静态方法中，this指向类自身。静态方法将直接加在类身上，而普通方法则加在类的原型上，静态方法适合作为实例工厂。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age_ <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age_<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用随机年龄创建一个Person实例</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Person &amp;#123;age_: ... &amp;#125;</span></code></pre><p>类内部不支持添加原型或者成员数据，但是外部可以</p><pre class=" language-js"><code class="language-js">Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Linda"</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Jack'</span><span class="token punctuation">;</span></code></pre><h3 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h3><p>类可以继承类，也可以继承构造函数，使用extends</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 继承类</span><span class="token keyword">class</span> <span class="token class-name">Vehicle</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Bus</span> <span class="token keyword">extends</span> <span class="token class-name">Vehicle</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b <span class="token keyword">instanceof</span> <span class="token class-name">Bus</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b <span class="token keyword">instanceof</span> <span class="token class-name">Vehicle</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span class="token comment" spellcheck="true">// 继承普通构造函数</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Engineer</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Engineer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">Engineer</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>派生类可以通过super调用父类的构造函数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Vehicle</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hasEngine <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token function">identify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'vehicle'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Bus</span> <span class="token keyword">extends</span> <span class="token class-name">Vehicle</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 不要在调用super之前引用this，否则会抛出ReferenceError</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 相当于super.constructor()</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Vehicle</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Bus &amp;#123;hasEngine: true&amp;#125;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 静态方法中可以通过super调用继承父类的静态方法</span>    <span class="token keyword">static</span> <span class="token function">identify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">identify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Bus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Bus<span class="token punctuation">.</span><span class="token function">identify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// vehicle</span></code></pre><ul><li>没有定义构造函数会自动调用super()，定义了则必须手动调用super()或返回一个对象。</li></ul><p>抽象基类：<strong>只能被继承</strong>，不能被实例化</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第7章 迭代器与生成器</title>
      <link href="/2023/04/16/di-7-zhang-die-dai-qi-yu-sheng-cheng-qi/"/>
      <url>/2023/04/16/di-7-zhang-die-dai-qi-yu-sheng-cheng-qi/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="第七章-迭代器与生成器"><a href="#第七章-迭代器与生成器" class="headerlink" title="第七章 迭代器与生成器"></a>第七章 迭代器与生成器</h1><p>我们把实现了<strong>Iterable接口</strong>的对象称为可迭代对象</p><h2 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">IteratorResult</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 表示是否还有更多值可以访问</span>    done<span class="token punctuation">:</span> boolean<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 包含迭代器返回的当前值</span>    value<span class="token punctuation">:</span> any<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Iterator</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> IteratorResult<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Iterable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 任何实现Iterable接口的对象都有一个Symbol.iterator属性，这个属性引用默认迭代器Iterator</span>    <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Iterator<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>迭代器通过next（）方法遍历数据，next方法返回两个属性：done和value。每个迭代器都能完成一次完整迭代，互相之间没有联系。</p><h3 id="可迭代协议"><a href="#可迭代协议" class="headerlink" title="可迭代协议"></a>可迭代协议</h3><p>很多内置类型都实现了Iterable接口：</p><p>字符串</p><p>数组</p><p>映射</p><p>集合</p><p>arguments对象</p><p>NodeList等DOM集合类型</p><p>数组解构</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'baz'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// foo,bar,baz</span></code></pre><p>扩展操作符</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['foo','bar,'baz']</span></code></pre><h3 id="自定义迭代器"><a href="#自定义迭代器" class="headerlink" title="自定义迭代器"></a>自定义迭代器</h3><h3 id="提前终止迭代器"><a href="#提前终止迭代器" class="headerlink" title="提前终止迭代器"></a>提前终止迭代器</h3><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><p>生成器的形式是一个函数，函数名称前面加一个* 表示它是一个生成器</p><p>调用生成器函数会返回一个生成器对象，生成器对象实现了Iterator接口和Iterable接口，next()方法可以执行生成器</p><h3 id="通过yield中断执行"><a href="#通过yield中断执行" class="headerlink" title="通过yield中断执行"></a>通过yield中断执行</h3><p>yield关键字可以让生成器停止和开始执行。生成器函数在遇到yield关键字之前会正常执行，遇到这个关键字后，执行会停止，函数作用域的状态会被保留。停止执行的生成器函数只能通过在生成器对象上调用next()方法来恢复执行。</p><p>没有yield的生成器，调用一次next()就会返回{done:true}，函数体中遇到yield，生成器会停止，直到下次调用next()。</p><p>yield关键字只能在<strong>生成器函数内部</strong>使用，用在其他地方会抛出错误。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">validGeneratorFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">yield</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 无效</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">invalidGeneratorFnA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">yield</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>yield可以返回值，通过yield返回的值，done为false，通过return返回的值，done为true。<strong>yield还可以当作中间参数使用，通过next()传递的值能通过yield接收</strong></p><p>1、生成器对象作为可迭代对象</p><p>生成器也是一种可迭代对象，使用起来更加方便</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">generatorFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">yield</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">yield</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> x <span class="token keyword">of</span> <span class="token function">generatorFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1 </span><span class="token comment" spellcheck="true">// 2 </span><span class="token comment" spellcheck="true">// 3</span></code></pre><p>2、使用yield实现输入和输出</p><p>yield 关键字还可以作为函数的中间参数使用，上一次让 生成器函数暂停的 yield 关键字会接收到传给 next()方法的第一个值。第一次调用 next()传入的值不会被使用，因为这一次调用是为了开始执行生成器函数：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 用于作为函数的中间参数</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">generatorFn</span><span class="token punctuation">(</span>initial<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>initial<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">yield</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">yield</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">let</span> generatorObject <span class="token operator">=</span> <span class="token function">generatorFn</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> generatorObject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// foo </span>generatorObject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'baz'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// baz </span>generatorObject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'qux'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// qux </span><span class="token comment" spellcheck="true">// 用于输入和输出</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">generatorFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">yield</span> <span class="token string">'foo'</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">let</span> generatorObject <span class="token operator">=</span> <span class="token function">generatorFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>generatorObject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &amp;#123; done: false, value: 'foo' &amp;#125; </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>generatorObject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &amp;#123; done: true, value: 'bar' &amp;#125; </span></code></pre><p>3、产生可迭代对象</p><p>可以使用*增强yield的行为，让它能够迭代一个可迭代对象。</p><p>yield * [1,2,3] 可以迭代3次</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>为什么广度优先遍历得到的是最短路径</title>
      <link href="/2023/04/15/wei-shi-me-guang-du-you-xian-bian-li-de-dao-de-shi-zui-duan-lu-jing/"/>
      <url>/2023/04/15/wei-shi-me-guang-du-you-xian-bian-li-de-dao-de-shi-zui-duan-lu-jing/</url>
      
        <content type="html"><![CDATA[<p>为什么广度优先遍历得到的是最短路径</p><p>假设我们需要找到从A到G的最短路径：</p><img src="https://img-blog.csdnimg.cn/20200310114505306.gif" alt="img" style="zoom:50%;" align='left' /><p>在BFS中使用队列这种数据结构，那么我们来模拟一遍找到最短路径的这样的过程</p><p>1、A入队，队列状态：A  到A的距离为0</p><p>2、队列不为空，A出队，找到A相邻的节点 BCD然后加入到队列中，队列状态：B C D ，它们到A的距离为父节点A的距离加一，所以距离为1。</p><p>3、队列不为空，B出队（因为是先进先出，这里不管是B、C还是D先进队列，都不影响最短路径的计算，因为最短路径的计算是按照父节点的距离+1计算的，而不是出队的次数等等啥计算的。但是是会影响搜索路径的，因为在搜索中节点如果先走B肯定会后搜索到G，但是先走D肯定会先搜索到G）找到B的相邻节点然后入队，队列状态：C D E F ，EF到A的距离为父节点B的距离加一，为2.</p><p>4、队列不为空，C出队，C没有相邻节点，队列状态：D E F</p><p>5、队列不为空，D出队，添加D相邻节点，队列状态：E F H I J，HIJ到A的距离为父节点的距离加一，为2</p><p>6、队列不为空，E出队，E没有相邻节点，队列状态：F H I J</p><p>7、队列不为空，F出队，F没有相邻节点，队列状态：H I J</p><p>8、队列不为空，H出队，添加H的相邻节点，队列状态：I J K，K到A的距离为H的距离加一，为3</p><p>9、队列不为空，I出队，添加I的相邻节点，队列状态：J K G L,G和L到A的距离为I的距离加一，为3</p><p>10、队列不为空，J出队，J没有相邻节点，队列状态：K G L</p><p>11、队列不为空，K出队，K没有相邻节点，队列状态：G L</p><p>12、队列不为空，G出队，G刚好是需要找的节点，所以最短路径就是G到A的距离为3</p><p>所以广度优先遍历找到的绝对是最短的路径，因为它每次都是从最短的距离上加一。且与遍历的相邻节点的顺序无关。</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第6章 集合引用类型</title>
      <link href="/2023/04/15/di-6-zhang-ji-he-yin-yong-lei-xing/"/>
      <url>/2023/04/15/di-6-zhang-ji-he-yin-yong-lei-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="第六章-集合引用类型"><a href="#第六章-集合引用类型" class="headerlink" title="第六章 集合引用类型"></a>第六章 集合引用类型</h1><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><p>显示地创建Object的实例由两种方式</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 使用new 操作符和Object构造函数</span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Nicholas"</span><span class="token punctuation">;</span> person<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 使用对象字面量表示法</span><span class="token comment" spellcheck="true">// 在对象字面量表示法中，属性名可以是字符串或者数值</span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  name<span class="token punctuation">:</span> <span class="token string">"Nicholas"</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">29</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 上述表示还可以表示为</span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Nicholas"</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">;</span></code></pre><p>对象字面量已经成为给函数传递大量可选参数的主要方式</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">displayInfo</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">...</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在这里 给函数displayInfo主要传递了一个对象字面量的参数</span><span class="token function">displayInfo</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span> <span class="token string">"Nicholas"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">29</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>获取对象属性的方法</p><pre class=" language-js"><code class="language-js">person<span class="token punctuation">.</span>name<span class="token punctuation">;</span>person<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><p>ES数组是一组有序的数据，它的每个槽位可以存储任意类型的数据（意味着元素可以是字符串或者数值或者对象），ES数组也是动态大小的，会随着数据添加而自动增长。</p><h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1、使用Array构造函数</span><span class="token comment" spellcheck="true">// 长度</span><span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 内容 </span><span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token string">"green"</span><span class="token punctuation">,</span><span class="token string">"yellow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2、使用数组字面量</span><span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token string">"green"</span><span class="token punctuation">,</span><span class="token string">"yellow"</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>ES6新增了两个用于创建数组的静态方法：from() 和 of()</p><p>from用于将类数组结构转换为数组实例</p><p>第一个参数为一个类数组对象</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token string">"Matt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["M", "a", "t", "t"] </span><span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [[1, 2], [3, 4]] </span><span class="token comment" spellcheck="true">// Array.from()对现有数组执行浅复制</span><span class="token keyword">const</span> a1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">const</span> a2 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>第二个参数为可选的映射函数参数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> a1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">const</span> a2 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> x <span class="token operator">=</span><span class="token operator">></span> x<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1, 4, 9, 16] </span></code></pre><p>of用于将一组参数转换为数组实例</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1, 2, 3, 4] </span></code></pre><h3 id="数组索引"><a href="#数组索引" class="headerlink" title="数组索引"></a>数组索引</h3><p>可以通过修改length的值，从数组末尾删除或者添加元素</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 删除元素</span><span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token string">"yellow"</span><span class="token punctuation">,</span><span class="token string">"green"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>colors<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>colors<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span><span class="token comment" spellcheck="true">// 添加元素 因为数组中最后一个元素的索引总是length-1，所以在索引length处赋值相当于添加元素</span>colors<span class="token punctuation">[</span>colors<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"black"</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></code></pre><h3 id="检测数组"><a href="#检测数组" class="headerlink" title="检测数组"></a>检测数组</h3><pre class=" language-js"><code class="language-js">Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="填充方法"><a href="#填充方法" class="headerlink" title="填充方法"></a>填充方法</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> zeroes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 第一个参数：要填充的值 </span><span class="token comment" spellcheck="true">// 第二个参数：开始填充的位置</span><span class="token comment" spellcheck="true">// 第三个参数：结束填充的位置(不包括)</span>zeroes<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [0,7,7,0,0]</span></code></pre><h3 id="转换方法"><a href="#转换方法" class="headerlink" title="转换方法"></a>转换方法</h3><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>ES6的新增特性，Map是一种新的集合类型</p><h3 id="基本API"><a href="#基本API" class="headerlink" title="基本API"></a>基本API</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 使用嵌套数组初始化映射</span><span class="token keyword">const</span> m1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">"key1"</span><span class="token punctuation">,</span><span class="token string">"val1"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">"key2"</span><span class="token punctuation">,</span><span class="token string">"val2"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">"key3"</span><span class="token punctuation">,</span><span class="token string">"val3"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>m1<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token function">alett</span><span class="token punctuation">(</span>m1<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// val1</span><span class="token function">alert</span><span class="token punctuation">(</span>m1<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>m1<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"key4"</span><span class="token punctuation">,</span><span class="token string">"val4"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"key5"</span><span class="token punctuation">,</span><span class="token string">"val5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m1<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 只删除这一个键值对</span><span class="token function">alert</span><span class="token punctuation">(</span>m1<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4</span>m1<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 清除这个映射实例中的所有键值对</span><span class="token comment" spellcheck="true">// 注意：Map可以使用任何js数据类型作为键</span></code></pre><h3 id="顺序与迭代"><a href="#顺序与迭代" class="headerlink" title="顺序与迭代"></a>顺序与迭代</h3><p>Map实例会维护键值对的插入顺序，依次可以根据插入顺序执行迭代操作</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">"key1"</span><span class="token punctuation">,</span><span class="token string">"val1"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">"key2"</span><span class="token punctuation">,</span><span class="token string">"val2"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">"key3"</span><span class="token punctuation">,</span><span class="token string">"val3"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> pair <span class="token keyword">of</span> m<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>pair<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [key1,val1] </span><span class="token comment" spellcheck="true">// [key2,val2] </span><span class="token comment" spellcheck="true">// [key3,val3]</span><span class="token comment" spellcheck="true">// 上述代码等价于</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> pair <span class="token keyword">of</span> m<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>pair<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>注意：因为entries()是默认迭代器，可以直接对映射实例使用扩展操作，把映射转换为数组：</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [[key1,val1],[key2,val2],[key3,val3]]</span></code></pre><h2 id="WeakMap"><a href="#WeakMap" class="headerlink" title="WeakMap"></a>WeakMap</h2><p>弱映射</p><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><h2 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a>WeakSet</h2><h2 id="迭代与扩展操作"><a href="#迭代与扩展操作" class="headerlink" title="迭代与扩展操作"></a>迭代与扩展操作</h2><p>有4种原生集合类型定义了默认迭代器。（这意味着它们都可以支持顺序迭代，都可以传入for-of循环）</p><p>Array、所有定型数组、Map、Set</p><p>这也意味着所有这些类型都兼容扩展操作符。（…)</p><p>扩展操作符在对可迭代对象执行浅复制时特别有用，只需要简单的语法就可以复制整个对象。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第5章 基本引用类型</title>
      <link href="/2023/04/15/di-5-zhang-ji-ben-yin-yong-lei-xing/"/>
      <url>/2023/04/15/di-5-zhang-ji-ben-yin-yong-lei-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="第五章-基本引用类型"><a href="#第五章-基本引用类型" class="headerlink" title="第五章 基本引用类型"></a>第五章 基本引用类型</h1><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Fri Apr 14 2023 13:51:39 GMT+0800 (中国标准时间)</span><span class="token keyword">let</span> someDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">'May 23, 2019'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Thu May 23 2019 00:00:00 GMT+0800 (中国标准时间)</span><span class="token keyword">let</span> someDate2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">'May 23, 2019'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Thu May 23 2019 00:00:00 GMT+0800 (中国标准时间) 因为Date会在后台调用Date.parse()</span><span class="token comment" spellcheck="true">// Date.UTC(年，月（0-11），日（1-31），时（0-23），分，秒，毫秒)</span><span class="token keyword">let</span> allFives <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">UTC</span><span class="token punctuation">(</span><span class="token number">2005</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Fri May 06 2005 01:55:55 GMT+0800 (中国标准时间)</span><span class="token keyword">let</span> allFives2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2005</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Thu May 05 2005 17:55:55 GMT+0800 (中国标准时间)</span><span class="token comment" spellcheck="true">// Date.now()方法 返回表示方法执行时日期和时间的毫秒数</span><span class="token comment" spellcheck="true">// 起始时间</span><span class="token keyword">let</span> start <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用函数</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 结束时间</span><span class="token keyword">let</span> stop <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result <span class="token operator">=</span> stop <span class="token operator">-</span> start<span class="token punctuation">;</span></code></pre><p>GMT时间：</p><p>格林威治平时 规定太阳每天经过位于英国伦敦郊区的皇家格林威治天文台的时间为中午12点。格林威治平时 (GMT, Greenwich Mean Time) 作为世界时间标准（UT, Universal Time）。由此也确定了全球24小时自然时区的划分，所有时区都以和 GMT 之间的偏移量做为参考。1972年之前，格林威治时间（GMT）一直是世界时间的标准。1972年之后，GMT 不再是一个时间标准了。</p><p>UTC时间：</p><p>UTC 是现在全球通用的时间标准，全球各地都同意将各自的时间进行同步协调。UTC 时间是经过平均太阳时（以格林威治时间GMT为准）、地轴运动修正后的新时标以及以秒为单位的国际原子时所综合精算而成。</p><p>GMT是前世界标准时，UTC是现世界标准时。</p><p>UTC 比 GMT更精准，以原子时计时，适应现代社会的精确计时。</p><p>但在不需要精确到秒的情况下，二者可以视为等同。</p><p>每年格林尼治天文台会发调时信息，基于UTC。</p><h2 id="RegExp"><a href="#RegExp" class="headerlink" title="RegExp"></a>RegExp</h2><p>语法：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> expression <span class="token operator">=</span> <span class="token operator">/</span>pattern<span class="token operator">/</span>flags<span class="token punctuation">;</span></code></pre><p>pattern：可以是任何简单或者复杂的正则表达式，包括字符类、限定符、分组、向前查找和反向引用。</p><p>flags：0个或者多个，用于控制正则表达式的行为</p><p> g：全局模式，表示查找字符串的全部内容，而不是找到第一个匹配的内容就结束。 </p><p> i：不区分大小写，表示在查找匹配时忽略 pattern 和字符串的大小写。 </p><p> m：多行模式，表示查找到一行文本末尾时会继续查找。 </p><p> y：粘附模式，表示只查找从 lastIndex 开始及之后的字符串。 </p><p> u：Unicode 模式，启用 Unicode 匹配。 </p><p> s：dotAll 模式，表示元字符.匹配任何字符（包括\n 或\r）。</p><p>下述例子都是使用字面量形式定义的，正则表达式可以使用RegExp构造函数来创建，它接收两个参数：模式字符串和（可选）标记字符串。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 匹配字符串中的所有"at" </span><span class="token keyword">let</span> pattern1 <span class="token operator">=</span> <span class="token regex">/at/g</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 匹配第一个"bat"或"cat"，忽略大小写</span><span class="token keyword">let</span> pattern2 <span class="token operator">=</span> <span class="token regex">/[bc]at/i</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 匹配所有以"at"结尾的三字符组合，忽略大小写</span><span class="token keyword">let</span> pattern3 <span class="token operator">=</span> <span class="token regex">/.at/gi</span><span class="token punctuation">;</span></code></pre><p>所有的元字符在模式中也必须转义 ( [ { \ ^ $ | ) ] } ? * + .  即在所有元字符之前添加反斜杠&#x2F;</p><p>下述例子使用正则表达式构建</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 匹配第一个"bat"或"cat"，忽略大小写</span><span class="token keyword">let</span> pattern1 <span class="token operator">=</span> <span class="token regex">/[bc]at/i</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 跟 pattern1 一样，只不过是用构造函数创建的 注意：参数都是字符串形式</span><span class="token keyword">let</span> pattern2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"[bc]at"</span><span class="token punctuation">,</span> <span class="token string">"i"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>因为RegExp的模式参数是字符串，所以在某些情况下需要二次转义。</p><p>&#x2F;\[bc\]at&#x2F;    对应的字符串 “\\[bc\\]at”</p><p>RegExp实例方法：exec() 主要用于配合捕获组使用，返回数组是Array实例，包含两个额外的属性：index和input。（index是字符串中匹配模式的起始位置，input是要查找的字符串）</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> text <span class="token operator">=</span> <span class="token string">"mom and dad and baby"</span><span class="token punctuation">;</span> <span class="token keyword">let</span> pattern <span class="token operator">=</span> <span class="token regex">/mom( and dad( and baby)?)?/gi</span><span class="token punctuation">;</span> <span class="token keyword">let</span> matches <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>matches<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>matches<span class="token punctuation">.</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "mom and dad and baby" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>matches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "mom and dad and baby" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>matches<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// " and dad and baby" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>matches<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// " and baby" </span></code></pre><p>RegExp另一个方法：test()，接收一个字符串参数，如果输入的文本与模式匹配，则参数 返回 true，否则返回 false。这个方法适用于只想测试模式是否匹配，而不需要实际匹配内容的情况。</p><p>RegExp构造函数属性</p><table><thead><tr><th>全 名</th><th>简 写</th><th>说 明</th></tr></thead><tbody><tr><td>input</td><td>$_</td><td>最后搜索的字符串（非标准特性）</td></tr><tr><td>lastMatch</td><td>$&amp;</td><td>最后匹配的文本</td></tr><tr><td>lastParen</td><td>$+</td><td>最后匹配的捕获组（非标准特性）</td></tr><tr><td>leftContext</td><td>$&#96;</td><td>input 字符串中出现在 lastMatch 前面的文本</td></tr><tr><td>rightContext</td><td>$’</td><td>input 字符串中出现在 lastMatch 后面的文本</td></tr></tbody></table><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> text <span class="token operator">=</span> <span class="token string">"this has been a short summer"</span><span class="token punctuation">;</span> <span class="token keyword">let</span> pattern <span class="token operator">=</span> <span class="token regex">/(.)hort/g</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pattern<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// this has been a short summer </span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>leftContext<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// this has been a </span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>rightContext<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// summer </span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>lastMatch<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// short </span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>lastParen<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// s </span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> </code></pre><h2 id="原始值包装类型"><a href="#原始值包装类型" class="headerlink" title="原始值包装类型"></a>原始值包装类型</h2><p>ES提供了3种特殊的引用类型：Boolean、Number、String，这些类型具有引用类型一样的特点，但也具有与各自原始类型对应的特殊行为。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token string">"some text"</span><span class="token punctuation">;</span> <span class="token keyword">let</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p>上述代码后台中的过程：</p><p>1、创建一个String类型的实例</p><p>2、调用实例上的特定方法</p><p>3、销毁实例</p><p>引用类型与原始值包装类型的主要区别在于对象的生命周期。在通过 new 实例化引用类型后，得到的实例会在离开作用域时被销毁，而自动创建的原始值包装对象则只存在于访问它的那行代码执行期间。这意味着不能在运行时给原始值添加属性和方法。</p><p>使用 new 调用原始值包装类型的构造函数，与调用同名的转型函数并不一样。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token string">"25"</span><span class="token punctuation">;</span> <span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 转型函数</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "number" </span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 构造函数</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "object"</span></code></pre><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// toString方法可选地接收一个表示基数的参数，并返回相应基数形式的数值字符串。</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "10" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "1010" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "12" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "10" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "a" </span><span class="token comment" spellcheck="true">// toFixed() 可以将数值格式化为字符串</span><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "10.00" </span><span class="token comment" spellcheck="true">// 位数超过则四舍五入</span><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">10.005</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "10.01"</span></code></pre><p>另一个用于格式化数值的方法是 toExponential()，返回以科学记数法（也称为指数记数法）表 示的数值字符串。</p><p>toPrecision()方法会根据情况返回最合理的输出结果，可能是固定长度，也可能是科学记数法 形式。这个方法接收一个参数，表示结果中数字的总位数（不包含指数）。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "1e+2" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "99" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "99.0" </span><span class="token comment" spellcheck="true">// 本质上，toPrecision()方法会根据数值和精度来决定调用 toFixed()还是 toExponential()。为了以正确的小数位精确表示数值，这 3 个方法都会向上或向下舍入。</span></code></pre><p>原始数值在调用 typeof 时始终返回”number”，而 Number 对象则返回”object”。类似地，Number 对象是 Number 类型的实例，而原始数值不是。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Number.isInteger()方法，用于辨别一个数值是否保存为整数。</span><span class="token comment" spellcheck="true">// 注意：小数位的0可能会让人误认为数值是一个浮点数</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">1.00</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">1.01</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false </span></code></pre><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>js字符串由16位码元（code unit）组成，对多数字符来说，每16位码元对应一个字符。换 句话说，字符串的 length 属性表示字符串包含多少 16 位码元：</p><pre><code>let message = &quot;abcde&quot;;console.log(message.length); // 5console.log(message.charAt(2)); // &quot;c&quot;</code></pre><h4 id="字符串操作方法："><a href="#字符串操作方法：" class="headerlink" title="字符串操作方法："></a>字符串操作方法：</h4><p>concat（）：将一个或者多个字符串拼接成一个新字符串</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> stringValue <span class="token operator">=</span> <span class="token string">"hello "</span><span class="token punctuation">;</span> <span class="token keyword">let</span> result <span class="token operator">=</span> stringValue<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">,</span> <span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "hello world!" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "hello" </span></code></pre><p>拼接字符串更加常用的方式是使用加号操作符+。</p><p>slice(),substring()都接收一或两个参数。第一个参数表示子字符串开 始的位置，第二个参数表示子字符串结束的位置。</p><p>substr()第二个参数表示返回的子字符串数量。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> stringValue <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "lo world" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "lo world" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "lo world" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "lo w" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "lo w" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "lo worl"</span></code></pre><p>当然还可以传参为负数的情况，但是我现在没看懂，可以之后再补上。</p><h4 id="字符串位置方法："><a href="#字符串位置方法：" class="headerlink" title="字符串位置方法："></a>字符串位置方法：</h4><p>都有两个参数：第一个参数表示需要查找的字符，第二个参数（可选）表示开始搜索的位置。找到了返回当前字符的位置，没找到返回-1。</p><p>indexof()：从字符串开头开始查找子字符串</p><p>lastIndexOf()：从字符串末尾开始查找子字符串</p><p>如果想要循环查找，可以利用第二个参数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> stringValue <span class="token operator">=</span> <span class="token string">"Lorem ipsum dolor sit amet, consectetur adipisicing elit"</span><span class="token punctuation">;</span> <span class="token keyword">let</span> positions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> pos <span class="token operator">=</span> stringValue<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>pos <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  positions<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>  pos <span class="token operator">=</span> stringValue<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">,</span> pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>positions<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [3,24,32,35,52] </span></code></pre><h4 id="字符串包含方法："><a href="#字符串包含方法：" class="headerlink" title="字符串包含方法："></a>字符串包含方法：</h4><p>startsWith()、 endsWith()和 includes()，它们的区别在于，startsWith()检查开始于索引 0 的匹配项，endsWith()检查开始于索 引(string.length - substring.length)的匹配项，而 includes()检查整个字符串。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">"foobarbaz"</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"bar"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"baz"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"bar"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"bar"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"qux"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false </span></code></pre><p>startsWith和includes()方法可以接收第二个参数，表示开始搜索的位置，如果传入第二个参数，则意味着这两个方法会从指定位置向着字符串末尾搜索，忽略该位置之前的所有字符。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">"foobarbaz"</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"bar"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"bar"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span></code></pre><p>endsWith()接收可选的第二个参数表示字符串末尾的位置，如果不提供则默认是字符串的长度</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">"foobarbaz"</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"bar"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"bar"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><h4 id="trim-、trimLeft-、trimRight"><a href="#trim-、trimLeft-、trimRight" class="headerlink" title="trim()、trimLeft()、trimRight()"></a>trim()、trimLeft()、trimRight()</h4><p>注意：trim会生成原来字符串的副本，因此就算有所改动，改动前后的字符都会被保留。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> stringValue <span class="token operator">=</span> <span class="token string">" hello world "</span><span class="token punctuation">;</span> <span class="token keyword">let</span> trimmedStringValue <span class="token operator">=</span> stringValue<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// " hello world " </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>trimmedStringValue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "hello world" </span></code></pre><h4 id="repeat-方法"><a href="#repeat-方法" class="headerlink" title="repeat()方法"></a>repeat()方法</h4><p>接收一个整数参数，表示要将字 符串复制多少次，然后返回拼接所有副本后的结果。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> stringValue <span class="token operator">=</span> <span class="token string">"na "</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"batman"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// na na na na na na na na na na na na na na na na batman</span></code></pre><h4 id="padStart-和padEnd"><a href="#padStart-和padEnd" class="headerlink" title="padStart()和padEnd()"></a>padStart()和padEnd()</h4><p>padStart()和 padEnd()方法会复制字符串，如果小于指定长度，则在相应一边填充字符，直至 满足长度条件。这两个方法的第一个参数是长度，第二个参数是可选的填充字符串，默认为空格</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> stringValue <span class="token operator">=</span> <span class="token string">"foo"</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// " foo" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "......foo" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "foo " </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "foo......" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">"bar"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "barbafoo" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "foo" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">"bar"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "foobarba" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "foo" </span></code></pre><h4 id="字符串迭代与解构"><a href="#字符串迭代与解构" class="headerlink" title="字符串迭代与解构"></a>字符串迭代与解构</h4><p>字符串的原型上暴露了一个@@iterator方法，表示可以迭代字符串的每个字符</p><p>手动使用该迭代器</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span> <span class="token keyword">let</span> stringIterator <span class="token operator">=</span> message<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &amp;#123;value: "a", done: false&amp;#125; </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &amp;#123;value: "b", done: false&amp;#125; </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &amp;#123;value: "c", done: false&amp;#125; </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &amp;#123;value: undefined, done: true&amp;#125;</span></code></pre><p>在for-of循环中可以通过这个迭代器按序访问每个字符</p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> c <span class="token keyword">of</span> <span class="token string">"abcdef"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// a </span><span class="token comment" spellcheck="true">// b </span><span class="token comment" spellcheck="true">// c </span><span class="token comment" spellcheck="true">// d </span><span class="token comment" spellcheck="true">// e</span></code></pre><p>有了该迭代器，可以更加方便地把字符串分割为字符数组</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">"abcde"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>message<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['a','b','c','d','e']</span></code></pre><h4 id="字符串大小写转换"><a href="#字符串大小写转换" class="headerlink" title="字符串大小写转换"></a>字符串大小写转换</h4><p>toLowerCase()、toUpperCase()：原来就有，与java.lang.String中的方法同名</p><p>toLocaleLowerCase()、toLocaleUpperCase()：旨在基于特定地区实现（在很多地区，地区特定的方法与通用的方法是一样的。但在少数语言中（如土耳其语）， Unicode 大小写转换需应用特殊规则，要使用地区特定的方法才能实现正确转换。如果不知道代码涉及什么语言，则最好使用地 区特定的转换方法。）</p><h4 id="字符串模式匹配方法"><a href="#字符串模式匹配方法" class="headerlink" title="字符串模式匹配方法"></a>字符串模式匹配方法</h4><p>match()  ：接收一个参数，可以是一个正则表达式字符串，也可以是一个RegExp对象，返回的数组与RegExp对象的exec是一样的，第一个元素是与整个模式匹配的字符串。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> text <span class="token operator">=</span> <span class="token string">"cat, bat, sat, fat"</span><span class="token punctuation">;</span> <span class="token keyword">let</span> pattern <span class="token operator">=</span> <span class="token regex">/.at/</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 等价于 pattern.exec(text) </span><span class="token keyword">let</span> matches <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>matches<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>matches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "cat" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pattern<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0 </span></code></pre><p>search()：参数为正则表达 式字符串或 RegExp 对象，返回模式第一个匹配的位置索引，如果没找到则返回1。search() 始终从字符串开头向后匹配模式。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> text <span class="token operator">=</span> <span class="token string">"cat, bat, sat, fat"</span><span class="token punctuation">;</span> <span class="token keyword">let</span> pos <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex">/at/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1 </span></code></pre><p>replace()：这个方法接收两个参数，第一个 参数可以是一个 RegExp 对象或一个字符串（这个字符串不会转换为正则表达式），第二个参数可以是 一个字符串或一个函数。如果第一个参数是字符串，那么只会替换第一个子字符串。要想替换所有子字 符串，第一个参数必须为正则表达式并且带全局标记.</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> text <span class="token operator">=</span> <span class="token string">"cat, bat, sat, fat"</span><span class="token punctuation">;</span> <span class="token keyword">let</span> result <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"at"</span><span class="token punctuation">,</span> <span class="token string">"ond"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "cond, bat, sat, fat" </span>result <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/at/g</span><span class="token punctuation">,</span> <span class="token string">"ond"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "cond, bond, sond, fond" </span></code></pre><p>第二个参数还可以是一个函数，函数中会有3个参数：1）匹配的字符串 2）匹配项在字符串中的位置 3）整个字符串</p><p><strong>该函数应该返回一个字符串，表示应该把匹配项替换成什么</strong>，使用函数作为第二个参数可以更细致地控制替换过程。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">htmlEscape</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> text<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/[&lt;>"&amp;]/g</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>match<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> originalText<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">switch</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token string">"&lt;"</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> <span class="token string">"&amp;lt;"</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token string">">"</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> <span class="token string">"&amp;gt;"</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token string">"&amp;"</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> <span class="token string">"&amp;amp;"</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token string">"\""</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> <span class="token string">"&amp;quot;"</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">htmlEscape</span><span class="token punctuation">(</span><span class="token string">"&lt;p class=\"greeting\">Hello world!&lt;/p>"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "&amp;lt;p class=&amp;quot;greeting&amp;quot;&amp;gt;Hello world!&lt;/p>"</span></code></pre><p>split()：根据传入的分隔符将字符串拆分成数组。作为分隔符的参数可以是字符串，也可以是 RegExp 对象。（字符串分隔符不会被这个方法当成 正则表达式。）还可以传入第二个参数，即数组大小，确保返回的数组不会超过指定大小。</p><p>localeCompare()：比较两个字符串（通常返回以下三个值中的一个）</p><p> 如果按照字母表顺序，字符串应该排在字符串参数前头，则返回负值。（通常是-1，具体还要看 与实际值相关的实现。） </p><p> 如果字符串与字符串参数相等，则返回 0。 </p><p> 如果按照字母表顺序，字符串应该排在字符串参数后头，则返回正值。（通常是 1，具体还要看 与实际值相关的实现。）</p><h2 id="单例内置对象"><a href="#单例内置对象" class="headerlink" title="单例内置对象"></a>单例内置对象</h2><p>内置对象：任何由ECMAScript实现提供、与宿主环境无关，并在ECMAScript程序开始执行时就存在的对象。前面我们已经接触了大部分内置对象，包括 Object、Array 和 String。</p><h3 id="Global"><a href="#Global" class="headerlink" title="Global"></a>Global</h3><p>Global 对象是 ECMAScript 中最特别的对象，因为代码不会显式地访问它，</p><p>1、URL 编码方法</p><p>encodeURI（）：对整个 URI 进行编码</p><p>encodeURIComponent（）：用于编码 URI 中单独的组件</p><p>2、eval（）</p><p>可能是整个 ECMAScript 语言中最强大的了，这个方法就是一个完 整的 ECMAScript 解释器，它接收一个参数，即一个要执行的 ECMAScript（JavaScript）字符串。</p><pre class=" language-js"><code class="language-js"><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"console.log('hi')"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 与下面的代码等价</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当解释器发现 eval()调用时，会将参数解释为实际的 ECMAScript 语句，然后将其插入到该位置。 通过 eval()执行的代码属于该调用所在上下文，被执行的代码与该上下文拥有相同的作用域链。这意 味着定义在包含上下文中的变量可以在 eval()调用内部被引用</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> msg <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"console.log(msg)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "hello world"</span><span class="token comment" spellcheck="true">// 类似地，还可以在eval方法中定义函数</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"function sayHi() &amp;#123; console.log('hi'); &amp;#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p>注意：通过eval定义的变量和函数都不会被提升，严格模式下，在eval内部创建的变量和函数都无法被外部访问，也就是说，上述两个例子会报错。</p><p>window对象：虽然 ECMA-262 没有规定直接访问 Global 对象的方式，但浏览器将 window 对象实现为 Global 对象的代理。因此，所有全局作用域中声明的变量和函数都变成了 window 的属性。</p><h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><p>min()和 max()方法用于确定一组数值中的最小值和最大值。这两个方法都接收任意多个参数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 54 </span><span class="token keyword">let</span> min <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3 </span></code></pre><p>Math.ceil() 向上取整、Math.floor()向下取整、Math.round()四舍五入 和 Math.fround() 返回数值最接近的单精度（32位）浮点值表示：舍入为整数</p><p>Math.random()方法返回一个 0~1 范围内的随机数，其中包含 0 但不包含 1。</p><p>从 1~10 范围内随机选择一个数：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Math.random始终返回小数，即便乘以一个数再加上一个数也是小数</span><span class="token keyword">let</span> num <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>由于原始值包装类型的存在，JavaScript 中的原始值可以被当成对象来使用。有 3 种原始值包装类 型：Boolean、Number 和 String。它们都具备如下特点。</p><p> 每种包装类型都映射到同名的原始类型。 </p><p> 以读模式访问原始值时，后台会实例化一个原始值包装类型的对象，借助这个对象可以操作相 应的数据。</p><p> 涉及原始值的语句执行完毕后，包装对象就会被销毁。</p><p>当代码开始执行时，全局上下文中会存在两个内置对象：Global 和 Math。其中，Global 对象在 大多数 ECMAScript 实现中无法直接访问。不过，浏览器将其实现为 window 对象。所有全局变量和函 数都是 Global 对象的属性。Math 对象包含辅助完成复杂计算的属性和方法。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第4章 变量、作用域与内存</title>
      <link href="/2023/04/10/di-4-zhang-bian-liang-zuo-yong-yu-yu-nei-cun/"/>
      <url>/2023/04/10/di-4-zhang-bian-liang-zuo-yong-yu-yu-nei-cun/</url>
      
        <content type="html"><![CDATA[<h4 id="第4章-变量、作用域与内存"><a href="#第4章-变量、作用域与内存" class="headerlink" title="第4章 变量、作用域与内存"></a>第4章 变量、作用域与内存</h4><h5 id="基本类型与引用类型"><a href="#基本类型与引用类型" class="headerlink" title="基本类型与引用类型"></a>基本类型与引用类型</h5><p>存储位置不同：基本类型（存储在栈中的实际值）引用类型(保存在内存中的对象)</p><p>复制值：</p><ul><li><p>把一个原始值赋值给另一个变量时，原始值会被复制到新变量的位置。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">let</span> num2 <span class="token operator">=</span> num1<span class="token punctuation">;</span></code></pre><img src="D:\study\interShip\赋值1.jpg" align='left' /></li><li><p>把引用值从一个变量赋给另一个变量时，存储在变量中的值也会被复制到新变量所在的位置（但是这里复制的值是一个指针，它指向存储在堆内存中的对象）</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> obj2 <span class="token operator">=</span> obj1<span class="token punctuation">;</span> obj1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Nicholas"</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "Nicholas" </span></code></pre><img src="D:\study\interShip\赋值2.jpg" style="zoom:80%;" align='left' /></li></ul><p>传递参数：</p><p><strong>ES中的所有函数的参数都是按值传递的</strong></p><p>按值传递的特点：单向传递，只能将实参的数值传递给形参，不能将形参的值传递给实参。内置基本类型作为实参时，不能通过形参改变实参的数值，引用类型作为实参时，可以通过形参改变实参所指向空间的值。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 使用swap函数为例</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">234</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> t<span class="token punctuation">;</span>    t <span class="token operator">=</span> x<span class="token punctuation">;</span>    x <span class="token operator">=</span> y<span class="token punctuation">;</span>    y <span class="token operator">=</span> t<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 123 234</span><span class="token comment" spellcheck="true">// 上述是因为形参x和y与实参a和b在内存中是不同的空间，因为交换x和y不能影响a和b</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">234</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">swap</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> t<span class="token punctuation">;</span>    t <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 234 123</span><span class="token comment" spellcheck="true">// 上述是因为引用类型在内存中是由两块空间构成的，参数传递的时候实参将引用类型真正保存的堆的位置传递给了形参，因此尽管实参与形参是两块不同的空间，但是它们指向的都是引用类型真实保存的地址，修改形参就会引起实参的变化</span></code></pre><p>确定类型：</p><ul><li><p>typeof判断基本数据类型，但是不能判断null（返回object）</p></li><li><p>instanceof操作符：</p><p>语法：result &#x3D; variable instanceof constructor</p><p>实例：console.log( person instanceof Object&#x2F;Array&#x2F;RegExp );</p><p>按照定义，所有引用值都是Object的实例，使用instanceof检测任何引用值和Object都会返回true</p></li></ul><h5 id="执行上下文与作用域"><a href="#执行上下文与作用域" class="headerlink" title="执行上下文与作用域"></a>执行上下文与作用域</h5><p>执行上下文Execution context stack，ECS：是一个评估和执行js代码的环境的抽象概念，通俗的说，每当js代码在运行的时候，它都是在执行上下文中运行。变量或者函数的上下文决定了它们可以访问哪些数据，以及它们的行为。上下文在其所有代码都执行完毕之后会被销毁，包括定义在它上面的所有变量和函数（全局上下文在应用程序退出前才会被销毁，比如关闭网页或者退出浏览器）。每个上下文都有一个关联的变量对象（variable object），这个上下文中定义的所有变量和函数都存在于这个对象上。虽然无法通过代码访问变量对象，但后台处理数据会用到它。</p><p><strong>上下文中的代码在执行的时候，会创建变量对象的一个作用域链（scope chain）</strong>。这个作用域链决定了各级上下文中的代码在访问变量和函数时的顺序。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> color <span class="token operator">=</span> <span class="token string">"blue"</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">changeColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> anotherColor <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">swapColors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> tempColor <span class="token operator">=</span> anotherColor<span class="token punctuation">;</span>      anotherColor <span class="token operator">=</span> color<span class="token punctuation">;</span>      color <span class="token operator">=</span> tempColor<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 这里可以访问 color、anotherColor 和 tempColor </span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 这里可以访问 color 和 anotherColor，但访问不到 tempColor </span> <span class="token function">swapColors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这里只能访问 color </span><span class="token function">changeColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p>以上代码涉及 3 个上下文：全局上下文、changeColor()的局部上下文和 swapColors()的局部 上下文。全局上下文中有一个变量 color 和一个函数 changeColor()。changeColor()的局部上下文中 有一个变量 anotherColor 和一个函数 swapColors()，但在这里可以访问全局上下文中的变量 color。 swapColors()的局部上下文中有一个变量 tempColor，只能在这个上下文中访问到。全局上下文和 changeColor()的局部上下文都无法访问到 tempColor。而在 swapColors()中则可以访问另外两个 上下文中的变量，因为它们都是父上下文。（也就是说内部上下文可以通过作用域链访问外部上下文中的一切，但是外部上下文不能访问内部上下文中的任何东西，上下文之间的连接是线性的、有序的）</p><p>作用域链：window（color、changeColor）&#x3D;&gt; changeColor(anotherColor、swapColors) &#x3D;&gt; swapColors（tempColor）</p><ul><li><p>全局执行上下文</p><p>默认或者基础上下文，任何不在函数内部的代码都在全局上下文中，它会执行两件事：1、创建一个全局的window对象，并且设置this的值等于这个全局对象。一个程序中只会有一个全局执行上下文。</p></li><li><p>函数执行上下文</p><p><strong>每当一个函数被调用时</strong>，都会为该函数创建一个新的执行上下文。函数上下文可以有任意多个。</p></li><li><p>Eval函数执行上下文</p><p>执行在eval函数内部的代码有属于它自己的执行上下文</p></li></ul><h6 id="执行上下文的生命周期："><a href="#执行上下文的生命周期：" class="headerlink" title="执行上下文的生命周期："></a>执行上下文的生命周期：</h6><ul><li><p>创建阶段</p><ol><li><p>this值的绑定</p><p>在全局执行上下文中，this的值指向全局对象（window对象），在函数执行上下文中，this的值取决于该函数是如何被调用的，如果是引用对象调用，this指向该对象，否则this指向全局对象或者undefined（严格模式下）</p></li><li><p>创建词法环境组件</p></li><li><p>创建变量环境组件</p></li></ol></li><li><p>执行阶段</p><p>执行变量赋值、代码执行</p></li><li><p>回收阶段</p><p>执行上下文出栈等待虚拟机回收执行上下文</p></li></ul><h6 id="执行上下文栈：也称作作用域"><a href="#执行上下文栈：也称作作用域" class="headerlink" title="执行上下文栈：也称作作用域"></a>执行上下文栈：也称作作用域</h6><p>也叫调用栈、执行栈，它是一种拥有先进后出数据结构的栈，用来存储代码运行时创建的所有执行上下文。</p><p>当js第一次遇到我们写的脚本时，它会创建一个全局的执行上下文并且压入当前调用栈，每当引擎遇到一个函数调用，它会为该函数创建一个新的函数执行上下文并压入栈的顶部。引擎执行栈顶的函数，执行结束时，执行上下文从栈中弹出，控制流程到达当前栈中的下一个上下文。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">'Hello World!'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Inside first function'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">second</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Again inside first function'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">second</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Inside second function'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Inside Global Execution Context'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><img src='执行上下文.jpg' align='left'><p>上述过程加载时，js创建了一个全局执行上下文并把它压入当前执行栈，当遇到first函数调用时，js为该函数创建了一个函数执行上下文并把它压入执行栈，当遇到first函数内部调用second函数时，js引擎为second创建了新的函数执行上下文并入栈，second执行完毕，弹出，first执行完毕弹出，一旦所有代码执行完毕，js从当前栈中移除全局执行上下文。</p><h6 id="词法环境："><a href="#词法环境：" class="headerlink" title="词法环境："></a>词法环境：</h6><p>由环境记录器（存储变量和函数声明的实际位置）和一个可能的引用外部词法环境（意味着它可以访问其父级的词法环境）的空值组成。</p><ul><li><p>全局环境</p><p>外部环境引用为null，环境记录器内有原型函数，用户定义的全局变量，this的值指向全局对象</p></li><li><p>函数环境</p><p>外部环境可能是全局环境或者任何包含此内部函数的外部函数，环境记录器有函数内部用户定义的变量</p></li></ul><h6 id="变量环境："><a href="#变量环境：" class="headerlink" title="变量环境："></a>变量环境：</h6><p>它同样是一个词法环境，环境记录器拥有变量声明语句在上行上下文中创建的绑定关系。ES6提出了变量环境，它只用来存储var变量绑定，词法环境被用来存储函数声明和变量（let 和const）绑定。</p><h6 id="作用域链增强："><a href="#作用域链增强：" class="headerlink" title="作用域链增强："></a>作用域链增强：</h6><p>下述两种情况，都会在作用域链前端添加一个变量对象。</p><ul><li>try&#x2F;catch语句的catch块</li></ul><p>​会创建一个新的变量对象，这个变量对象会包含要抛出的错误对象的声明。</p><ul><li>with语句</li></ul><p>​会向作用域链前端添加指定的对象</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">buildUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> qs <span class="token operator">=</span> <span class="token string">"?debug=true"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// with语句将location对象作为上下文，因此location会被添加到作用域链前端</span> <span class="token comment" spellcheck="true">// with语句中的代码引用变量href时，实际上引用的是location.href，也就是自己变量对象的属性，在引用qs时，引用的则是定义在buildUrl()中的那个变量，它定义在函数上下文的变量对象上。</span> <span class="token keyword">with</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> url <span class="token operator">=</span> href <span class="token operator">+</span> qs<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 在with语句中使用var声明的变量url会成为函数上下文的一部分，可以作为函数的值被返回，但是let声明的url，因为被限制在块级作用域中，所以在with块之外没有定义</span> <span class="token keyword">return</span> url<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> </code></pre><h6 id="变量声明："><a href="#变量声明：" class="headerlink" title="变量声明："></a>变量声明：</h6><ul><li>使用var的函数作用域声明</li></ul><p>var声明会被拿到函数或者全局作用域的顶部，位于作用域中所有代码之前，这个现象叫做“提升”hoisting。</p><ul><li><p>使用let的块级作用域声明</p><p>块级作用域由最近的一对包含花括号{}界定。换句话说，<strong>if 块、while 块、function 块，甚至连单独的块</strong>也是 let 声明变量的作用域。</p><p><strong>let在同一作用域内不能声明两次</strong>，重复的var声明会被忽略，但是重复的let声明会抛出<strong>SyntaxError</strong></p><pre class=" language-js"><code class="language-js"><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> d<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError: d 没有定义</span></code></pre><p><strong>let 的行为非常适合在循环中声明迭代变量。</strong>使用 var 声明的迭代变量会泄漏到循环外部，这种情况应该避免。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10 </span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError: j 没有定义</span></code></pre></li><li><p>使用const的常量声明</p><p><strong>使用 const 声明的变量必须同时初始化为某个值。</strong> 一经声明，在其生命周期的任何时候都不能再重新赋予新值。除了上述规则，其他方面与let声明一致</p><p><strong>const 声明只应用到顶级原语或者对象</strong>。换句话说，赋值为对象的 const 变量不能再被重新赋值 为其他引用值，但对象的键则不受限制。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> o1 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span> o1 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// TypeError: 给常量赋值</span><span class="token keyword">const</span> o2 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span> o2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Jake'</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'Jake' </span><span class="token comment" spellcheck="true">// 如果想要整个对象都不能修改，可以使用Object.freeze()，这样再给属性赋值时虽然不会报错，但会静默失败。</span><span class="token keyword">const</span> o3 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> o3<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Jake'</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o3<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined </span></code></pre></li><li><p>标识符查找</p><p>当在特定上下文中读取或者写入而引用一个标识符时，必须通过搜索确定这个标识符表示什么。搜索开始于作用域链前端，以给定的名称搜索对应的标识符。如果在局部上下文中找到该标识符，则搜索 停止，变量确定；如果没有找到变量名，则继续沿作用域链搜索。（注意，作用域链中的对象也有一个 原型链，因此搜索可能涉及每个对象的原型链。）这个过程一直持续到搜索至全局上下文的变量对象。 如果仍然没有找到标识符，则说明其未声明。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> color <span class="token operator">=</span> <span class="token string">'blue'</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> color <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 块级作用域</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> color <span class="token operator">=</span> <span class="token string">'green'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 此时的color能够从块级作用域中找到，就停止查找，否则他还会搜索函数作用域、全局作用域</span> <span class="token keyword">return</span> color<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'green'</span></code></pre><p>标识符查找并非没有代价。访问局部变量比访问全局变量要快，因为不用切换作用 域。</p></li></ul><h5 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h5><p><strong>垃圾回收算法：就是垃圾收集器按照固定的时间间隔，周期性地寻找那些不再使用的变量，然后将其清除或者释放内存。</strong>垃圾回收算法是个不完美的算法，因为某块内存是否可用，属于不可预判的问题，也就意味着单纯依靠算法是解决不了的。主要有两种主要的标记策略：标记清理和引用计数。</p><ul><li><p>标记清理 mark and sweep</p><p>常用，总共分为标记阶段和清除阶段。首先遍历堆内存上所有的对象，分别给它们打上标记，然后在代码执行过程结束之后，对所使用过的变量取消标记。在清除阶段把具有标记的内存对象进行整体清除，从而释放内存空间。</p><p>优点：简单</p><p>缺点：通过标记清除之后，剩余对象内存位置不变，空闲内存空间是不连续的，造成 内存碎片问题。内存碎片多了之后，要存储一个新的需要占据较大内存空间的对象会有影响。</p><p>改进：标记整理mark-compact算法，在标记结束之后，会将不需要清理的对象向内存的一端进行移动，最后清理掉边界的内存。</p></li><li><p>引用计数</p><p>不常用，思路：对每个值都记录它的引用次数。</p><ol><li><p>声明变量并给它赋一个引用值时，这个值的引用数为 1</p></li><li><p>如果同一个值又被赋给另一个变 量，那么引用数加 1。</p></li><li><p>如果保存对该值引用的变量被其他值给覆盖了，那么引用数减 1。</p></li><li><p>当一 个值的引用数为 0 时，就说明没办法再访问到这个值了，因此可以安全地收回其内存了。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 此对象的引用计数为 1（a引用）</span><span class="token keyword">let</span> b <span class="token operator">=</span> a <span class="token comment" spellcheck="true">// 此对象的引用计数是 2（a,b引用）</span>a <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token comment" spellcheck="true">// 此对象的引用计数为 1（b引用）</span>b <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token comment" spellcheck="true">// 此对象的引用计数为 0（无引用）</span><span class="token operator">...</span><span class="token comment" spellcheck="true">// GC 回收此对象</span></code></pre><p>问题：循环引用</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">problem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> objectA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> objectB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  objectA<span class="token punctuation">.</span>someOtherObject <span class="token operator">=</span> objectB<span class="token punctuation">;</span>  objectB<span class="token punctuation">.</span>anotherObject <span class="token operator">=</span> objectA<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>对象 A 有一个指针指向对象 B，而对象 B 也引用了对象 A。objectA 和 objectB 通过各自的属性相互引用，意味着它们的引用数都是 2。在标记清理策略下，这不是问题，因为在函数结束后，这两个对象都不在作用域中。而在引用计数策略下，objectA 和 objectB 在函数结束后还会存在 （为啥？？？），因为它们的引用数永远不会变成 0。</p></li></ol></li></ul><p>内存管理</p><p>1、通过const和let声明提升性能</p><p>2、隐藏类和删除操作</p><p>3、内存泄漏</p><p>4、静态分配与对象池</p><p>​减少浏览器执行垃圾回收的次数（间接控制触发垃圾回收的条件），合理使用分配的内存，同时避免多余的垃圾回收，那就可以保住因释放内存而损失的性能。</p><h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><ul><li><p>js变量的两种类型的值：原始值（基本数据类型）、引用值（引用数据类型）</p></li><li><p>作用域（执行上下文）</p></li><li><p>js的垃圾回收机制</p><p>离开作用域的值会被自动标记为可回收，然后在垃圾回收期间被删除</p><p>主流的垃圾回收算法是标记清理，即先给当前不使用的值加上标记，再回来回收它们的内存</p><p>引用计数是另一种垃圾回收策略，需要记录值被引用了多少次。JavaScript 引擎不再使用这种算 法，但某些旧版本的 IE 仍然会受这种算法的影响，原因是 JavaScript 会访问非原生 JavaScript 对 象（如 DOM 元素）</p><p>引用计数在代码中存在循环引用时会出现问题。</p><p>解除变量的引用不仅可以消除循环引用，而且对垃圾回收也有帮助。为促进内存回收，全局对 象、全局对象的属性和循环引用都应该在不需要时解除引用。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
